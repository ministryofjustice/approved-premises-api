openapi: 3.0.1
info:
  title: Approved Premises
  version: 1.0.0
servers:
- url: /
paths:
  /premises:
    get:
      tags:
        - Premises
      summary: Lists all approved premises, optionally for the given service
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: If given, only premises for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Premises'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
    post:
      tags:
        - Premises
      summary: Add a new premises
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: If given, persist the service name against this property
          schema:
            $ref: '#/components/schemas/ServiceName'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewPremises'
        required: true
      responses:
        201:
          description: new premises added
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Premises'
        400:
          description: invalid request
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}:
    get:
      tags:
        - Premises
      summary: Returns an approved premises
      parameters:
      - name: premisesId
        in: path
        description: ID of the premises to return
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Premises'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
    put:
      tags:
        - Operations on premises
      summary: Updates a premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Information to update the premises with
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdatePremises'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Premises'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/staff:
    get:
      tags:
        - Premises
      summary: Returns the staff that work at an approved premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to return staff for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StaffMember'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/residents:
    get:
      tags:
        - Operations on premises
      summary: Returns all the residents in an approved premises with the given ID
      parameters:
      - name: premisesId
        in: path
        description: ID of the premises to get residents for
        required: true
        schema:
          type: integer
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Person'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/bookings:
    get:
      tags:
        - Operations on premises
      summary: Returns all bookings for an approved premises
      parameters:
      - name: premisesId
        in: path
        description: ID of the premises to get bookings for
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
    post:
      tags:
        - Operations on premises
      summary: Adds a new booking for an approved premises
      parameters:
      - name: premisesId
        in: path
        description: ID of the premises to create a booking for
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewBooking'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Booking'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        409:
          description: An existing booking for the given bed has overlapping dates
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/capacity:
    get:
      tags:
        - Operations on premises
      summary: Returns the Premises' capacity for each date from today to the end of the last existing booking
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to get bookings for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DateCapacity'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/bookings/{bookingId}:
    get:
      tags:
        - Operations on premises
      summary: Returns a specific booking for an approved premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the booking is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Booking'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/bookings/{bookingId}/arrivals:
    post:
      tags:
        - Operations on bookings
      summary: Posts an arrival to a specified approved premises booking
      parameters:
      - name: premisesId
        in: path
        description: ID of the premises the booking is related to
        required: true
        schema:
          type: string
          format: uuid
      - name: bookingId
        in: path
        description: ID of the booking
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: details of the arrival
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewArrival'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Arrival'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/extensions:
    post:
      tags:
        - Operations on bookings
      summary: Posts an extension to a specified approved premises booking
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the booking is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the extension
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewExtension'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Extension'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/departures:
    post:
      tags:
        - Operations on bookings
      summary: Posts a departure to a specified approved premises booking
      parameters:
      - name: premisesId
        in: path
        description: ID of the premises the booking is related to
        required: true
        schema:
          type: string
          format: uuid
      - name: bookingId
        in: path
        description: ID of the booking
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: details of the departure
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewDeparture'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Departure'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/non-arrivals:
    post:
      tags:
        - Operations on bookings
      summary: Posts an non-arrival to a specified approved premises booking
      parameters:
      - name: premisesId
        in: path
        description: ID of the premises the booking is related to
        required: true
        schema:
          type: string
          format: uuid
      - name: bookingId
        in: path
        description: ID of the booking
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: details of the non-arrival
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewNonarrival'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Nonarrival'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/cancellations:
    post:
      tags:
        - Operations on bookings
      summary: Posts a cancellation to a specified approved premises booking
      parameters:
      - name: premisesId
        in: path
        description: ID of the premises the cancellation is related to
        required: true
        schema:
          type: string
          format: uuid
      - name: bookingId
        in: path
        description: ID of the booking
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: details of the cancellation
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewCancellation'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cancellation'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/rooms:
    get:
      tags:
        - Rooms
      summary: Lists all rooms for the given premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to list the rooms for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
    post:
      tags:
        - Rooms
      summary: Adds a new room for an approved premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the room is in
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the new room
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewRoom'
        required: true
      responses:
        201:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Room'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/rooms/{roomId}:
    get:
      summary: Returns a specific room for a premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the room is in
          required: true
          schema:
            type: string
            format: uuid
        - name: roomId
          in: path
          description: ID of the room to get
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Room'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or room ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
    put:
      summary: Updates a room
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the room is in
          required: true
          schema:
            type: string
            format: uuid
        - name: roomId
          in: path
          description: ID of the room to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Information to update the room with
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateRoom'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Room'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or room ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/search:
    get:
      summary: Searches for a Person by their CRN
      parameters:
        - name: crn
          in: query
          description: CRN to search for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Person'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/risks:
    get:
      summary: Returns the risks for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch risks for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PersonRisks'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/needs:
    get:
      summary: Returns the needs for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch needs for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PersonNeeds'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/prison-case-notes:
    get:
      summary: Returns the prison case notes for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch prison case notes for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrisonCaseNote'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/adjudications:
    get:
      summary: Returns the adjudications for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch adjudications for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adjudication'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/acct-alerts:
    get:
      summary: Returns the ACCT alerts for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch ACCT alerts for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonAcctAlert'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/oasys/offence-analysis:
    get:
      tags:
        - OASys
      summary: Returns the latest OASys offence analysis for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch latest OASys offence analysis
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: object
                $ref: '#/components/schemas/OASysOffenceAnalysis'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/oasys/risk-contributors:
    get:
      tags:
        - OASys
      summary: Returns the latest OASys information on issues contributing to risks of offending or harm for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch latest OASys information on issues contributing to risks
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OASysRiskContributors'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/oasys/risk-management-plan:
    get:
      tags:
        - OASys
      summary: Returns the latest OASys Risk Management Plan for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch latest OASys Risk Management Plan
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OASysRiskManagementPlan'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/oasys/rosh-summary:
    get:
      tags:
        - OASys
      summary: Returns the latest OASys Risk of Serious Harm (RoSH) summary for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch latest OASys RoSH summary
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OASysRiskOfSeriousHarmSummary'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/oasys/risks-to-the-individual:
    get:
      tags:
        - OASys
      summary: Returns the latest OASys risks to the individual (R8, R9) for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch latest OASys risks to the individual
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OASysRisksToTheIndividual'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/oasys/risks-to-others:
    get:
      tags:
        - OASys
      summary: Returns the latest OASys current and previous risks to others (R6.1, R6.2) for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch latest OASys risks to others
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OASysRisksToOthers'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/offences:
    get:
      summary: Returns the active Offences for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch active Offences for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveOffence'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/lost-beds:
    post:
      tags:
        - Operations on premises
      summary: Posts a lost bed to a specified approved premises
      parameters:
      - name: premisesId
        in: path
        description: ID of the premises the lost bed is related to
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: details of the lost bed
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewLostBed'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LostBed'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
    get:
      tags:
        - Operations on premises
      summary: Lists all Lost Beds entries for the Premises
      parameters:
      - name: premisesId
        in: path
        description: ID of the premises to show lost beds for
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LostBed'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /applications:
    post:
      tags:
        - Operations on applications
      summary: Creates an application
      requestBody:
        description: Information to create a blank application with
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewApplication'
        required: true
      responses:
        201:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Application'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
    get:
      tags:
        - Operations on applications
      summary: Lists all applications that the user has created
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /applications/{applicationId}:
    put:
      tags:
        - Operations on applications
      summary: Updates an application
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Information to update the application with
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateApplication'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Application'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
    get:
      tags:
        - Operations on applications
      summary: Gets a single application by its ID
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Application'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /applications/{applicationId}/submission:
    post:
      tags:
        - Application data
      summary: Submits an Application
      parameters:
        - in: path
          name: applicationId
          required: true
          description: Id of the application
          schema:
            type: string
            format: uuid
      requestBody:
        description: Information needed to submit an application
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SubmitApplication'
        required: true
      responses:
        200:
          description: successfully submitted the application
        400:
          description: application has already been submitted
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /applications/{applicationId}/allocations:
    post:
      tags:
        - Operations on applications
      summary: Reallocates an application
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/Reallocation'
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /reference-data/departure-reasons:
    get:
      tags:
        - Reference Data
      summary: Lists all departure reasons
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DepartureReason'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/move-on-categories:
    get:
      tags:
        - Reference Data
      summary: Lists all move-on categories for departures
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoveOnCategory'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/destination-providers:
    get:
      tags:
        - Reference Data
      summary: Lists all destination providers for departures
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DestinationProvider'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/supervising-providers:
    get:
      tags:
        - Reference Data
      summary: Lists all supervising providers for arrivals
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupervisingProvider'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/supervising-teams:
    get:
      tags:
        - Reference Data
      summary: Lists all supervising teams for arrivals
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupervisingTeam'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/supervising-officers:
    get:
      tags:
        - Reference Data
      summary: Lists all supervising officers for arrivals
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupervisingOfficer'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/lost-bed-reasons:
    get:
      tags:
        - Reference Data
      summary: Lists all reasons for losing beds
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LostBedReason'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/cancellation-reasons:
    get:
      tags:
        - Reference Data
      summary: Lists all cancellation reasons
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CancellationReason'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/local-authority-areas:
    get:
      tags:
        - Local Authorities
      summary: Lists all local authorities
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocalAuthorityArea'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/characteristics:
    get:
      tags:
        - Characteristics
      summary: Lists all available characteristics
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: If given, only characteristics for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Characteristic'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /assessments:
    get:
      tags:
        - Assessment data
      summary: Gets assessments the user is authorised to view
      responses:
        200:
          description: successfully retrieved assessments
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assessment'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /assessments/{assessmentId}:
    get:
      tags:
        - Assessment data
      summary: Gets a single assessment by its id
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: Id of the assessment
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successfully retrieved assessment
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Assessment'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
    put:
      tags:
        - Assessment data
      summary: Updates an assessment
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: Id of the assessment
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated assessment
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateAssessment'
        required: true
      responses:
        200:
          description: successfully retrieved assessment
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Assessment'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /assessments/{assessmentId}/notes:
    post:
      tags:
        - Assessment data
      summary: Adds a clarification note to an assessment
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: Id of the assessment
          schema:
            type: string
            format: uuid
      requestBody:
        description: Clarification note
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewClarificationNote'
        required: true
      responses:
        201:
          description: successfully created a clarification note
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ClarificationNote'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /profile:
    get:
      tags:
        - Auth
      summary: Returns information on the logged in user
      responses:
        200:
          description: successfully retrieved information on user
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /users:
    get:
      tags:
        - Auth
      summary: Returns a list of users
      parameters:
        - in: path
          name: roles
          required: false
          description: Only return users with the provided role(s)
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserRole'
        - in: path
          name: qualifications
          required: false
          description: Only return users with the provided qualification(s)
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserQualification'
      responses:
        200:
          description: successfully retrieved users
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
components:
  responses:
    401Response:
      description: not authenticated
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Problem'
    403Response:
      description: unauthorised
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Problem'
    500Response:
      description: unexpected error
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Problem'
  schemas:
    Premises:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Hope House
        addressLine1:
          type: string
          example: one something street
        postcode:
          type: string
          example: LS1 3AD
        bedCount:
          type: integer
          example: 22
        availableBedsForToday:
          type: integer
          example: 20
        service:
          type: string
          example: CAS3
        notes:
          type: string
          example: some notes about this property
        probationRegion:
          $ref: '#/components/schemas/ProbationRegion'
        apArea:
          $ref: '#/components/schemas/ApArea'
        localAuthorityArea:
          $ref: '#/components/schemas/LocalAuthorityArea'
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/Characteristic'
        status:
          $ref: '#/components/schemas/PropertyStatus'
      discriminator:
        propertyName: service
        mapping:
          CAS1: '#/components/schemas/ApprovedPremises'
          CAS3: '#/components/schemas/TemporaryAccommodationPremises'
      required:
        - id
        - name
        - addressLine1
        - postcode
        - bedCount
        - availableBedsForToday
        - probationRegion
        - apArea
        - localAuthorityArea
        - status
    ApprovedPremises:
      allOf:
        - $ref: '#/components/schemas/Premises'
        - type: object
          properties:
            apCode:
              type: string
              example: NEHOPE1
      required:
        - apCode
    TemporaryAccommodationPremises:
      allOf:
        - $ref: '#/components/schemas/Premises'
    NewPremises:
      type: object
      properties:
        name:
          type: string
        addressLine1:
          type: string
        postcode:
          type: string
        notes:
          type: string
          example: some notes about this property
        localAuthorityAreaId:
          type: string
          format: uuid
        characteristicIds:
          type: array
          items:
            type: string
            format: uuid
        status:
          $ref: '#/components/schemas/PropertyStatus'
      required:
        - name
        - addressLine1
        - postcode
        - localAuthorityAreaId
        - characteristicIds
        - status
    LocalAuthorityArea:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 6abb5fa3-e93f-4445-887b-30d081688f44
        identifier:
          type: string
          example: LEEDS
        name:
          type: string
          example: Leeds City Council
      required:
        - id
        - identifier
        - name
    ApArea:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: cd1c2d43-0b0b-4438-b0e3-d4424e61fb6a
        identifier:
          type: string
          example: LON
        name:
          type: string
          example: Yorkshire & The Humber
      required:
        - id
        - identifier
        - name
    ProbationRegion:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 952790c0-21d7-4fd6-a7e1-9018f08d8bb0
        name:
          type: string
          example: NPS North East Central Referrals
      required:
        - id
        - name
    Characteristic:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 952790c0-21d7-4fd6-a7e1-9018f08d8bb0
        name:
          type: string
        serviceScope:
          type: string
        modelScope:
          type: string
      required:
        - id
        - name
        - serviceScope
        - modelScope
    BookingBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
        person:
          $ref: '#/components/schemas/Person'
        arrivalDate:
          type: string
          format: date
        departureDate:
          type: string
          format: date
        keyWorker:
          $ref: '#/components/schemas/StaffMember'
        serviceName:
          $ref: '#/components/schemas/ServiceName'
        bed:
          $ref: '#/components/schemas/Bed'
      required:
        - id
        - person
        - arrivalDate
        - departureDate
        - serviceName
    NewBooking:
      type: object
      properties:
        crn:
          type: string
          example: A123456
        arrivalDate:
          type: string
          format: date
          example: 2022-07-28
        departureDate:
          type: string
          format: date
          example: 2022-09-30
        serviceName:
          $ref: '#/components/schemas/ServiceName'
      required:
        - crn
        - arrivalDate
        - departureDate
        - serviceName
      discriminator:
        propertyName: serviceName
        mapping:
          approved-premises: '#/components/schemas/NewApprovedPremisesBooking'
          temporary-accommodation: '#/components/schemas/NewTemporaryAccommodationBooking'
    NewApprovedPremisesBooking:
      allOf:
        - $ref: '#/components/schemas/NewBooking'
    NewTemporaryAccommodationBooking:
      allOf:
        - $ref: '#/components/schemas/NewBooking'
        - type: object
          properties:
            bedId:
              type: string
              format: uuid
          required:
            - bedId
    Booking:
      allOf:
        - $ref: '#/components/schemas/BookingBody'
        - type: object
          properties:
            status:
              type: string
              enum:
              - arrived
              - awaiting-arrival
              - not-arrived
              - departed
              - cancelled
            extensions:
              type: array
              items:
                $ref: '#/components/schemas/Extension'
            arrival:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Arrival'
            departure:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Departure'
            nonArrival:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Nonarrival'
            cancellation:
              nullable: true
              allOf:
              - $ref: '#/components/schemas/Cancellation'
          required:
            - status
            - extensions
    Person:
      type: object
      properties:
        crn:
          type: string
        name:
          type: string
        dateOfBirth:
          type: string
          format: date
        nomsNumber:
          type: string
        nationality:
          type: string
        religionOrBelief:
          type: string
        sex:
          type: string
        genderIdentity:
          type: string
        status:
          type: string
          enum:
            - InCustody
            - InCommunity
        prisonName:
          type: string
      required:
        - crn
        - name
        - dateOfBirth
        - sex
        - status
    Arrival:
      type: object
      properties:
        bookingId:
          type: string
          format: uuid
        arrivalDate:
          type: string
          format: date
        expectedDepartureDate:
          type: string
          format: date
        notes:
          type: string
      required:
        - bookingId
        - arrivalDate
        - expectedDepartureDate
    NewArrival:
      type: object
      properties:
        arrivalDate:
          type: string
          format: date
        expectedDepartureDate:
          type: string
          format: date
        notes:
          type: string
        keyWorkerStaffCode:
          type: string
      required:
        - arrivalDate
        - expectedDepartureDate
        - keyWorkerStaffCode
    Nonarrival:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        date:
          type: string
          format: date
        reason:
          $ref: '#/components/schemas/NonArrivalReason'
        notes:
          type: string
      required:
        - id
        - bookingId
        - date
        - reason
    NewNonarrival:
      type: object
      properties:
        date:
          type: string
          format: date
        reason:
          type: string
          format: uuid
        notes:
          type: string
      required:
        - date
        - reason
    NewCancellation:
      type: object
      properties:
        date:
          type: string
          format: date
        reason:
          type: string
          format: uuid
        notes:
          type: string
      required:
        - bookingId
        - date
        - reason
    Cancellation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        date:
          type: string
          format: date
        reason:
          $ref: '#/components/schemas/CancellationReason'
        notes:
          type: string
      required:
        - bookingId
        - date
        - reason
    Extension:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        previousDepartureDate:
          type: string
          format: date
        newDepartureDate:
          type: string
          format: date
        notes:
          type: string
      required:
        - id
        - bookingId
        - previousDepartureDate
        - newDepartureDate
    NewExtension:
      type: object
      properties:
        newDepartureDate:
          type: string
          format: date
        notes:
          type: string
      required:
        - newDepartureDate
    NewDeparture:
      type: object
      properties:
        dateTime:
          type: string
          format: date-time
        reasonId:
          type: string
          format: uuid
        notes:
          type: string
        moveOnCategoryId:
          type: string
          format: uuid
        destinationProviderId:
          type: string
          format: uuid
      required:
        - dateTime
        - reasonId
        - moveOnCategoryId
        - destinationProviderId
    Departure:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
        reason:
          $ref: '#/components/schemas/DepartureReason'
        notes:
          type: string
        moveOnCategory:
          $ref: '#/components/schemas/MoveOnCategory'
        destinationProvider:
          $ref: '#/components/schemas/DestinationProvider'
      required:
        - id
        - bookingId
        - dateTime
        - reason
        - moveOnCategory
        - destinationProvider
    Problem:
      type: object
      properties:
        type:
          type: string
          example: https://example.net/validation-error
        title:
          type: string
          example: Invalid request parameters
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: You provided invalid request parameters
        instance:
          type: string
          example: f7493e12-546d-42c3-b838-06c12671ab5b
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            invalid-params:
              type: array
              items:
                $ref: '#/components/schemas/InvalidParam'
    InvalidParam:
      type: object
      properties:
        propertyName:
          type: string
          example: arrivalDate
        errorType:
          type: string
    LostBed:
      type: object
      properties:
        id:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        numberOfBeds:
          type: integer
        reason:
          $ref: '#/components/schemas/LostBedReason'
        referenceNumber:
          type: string
        notes:
          type: string
      required:
        - id
        - startDate
        - endDate
        - numberOfBeds
        - reason
    NewLostBed:
      type: object
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        numberOfBeds:
          type: integer
        reason:
          type: string
          format: uuid
        referenceNumber:
          type: string
        notes:
          type: string
      required:
        - startDate
        - endDate
        - numberOfBeds
        - reason
    DepartureReason:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Admitted to Hospital
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    MoveOnCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Housing Association - Rented
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    DestinationProvider:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Ext - North East Region
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    SupervisingProvider:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: North East Region
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    SupervisingTeam:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: CP - Sheffield
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    SupervisingOfficer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Smith, John (PS - PO)
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    StaffMember:
      type: object
      properties:
        code:
          type: string
        keyWorker:
          type: boolean
        name:
          type: string
          example: Brown, James (PS - PSO)
      required:
        - code
        - keyWorker
        - name
    LostBedReason:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Double Room with Single Occupancy - Other (Non-FM)
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    CancellationReason:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Recall
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    NonArrivalReason:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Recall
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    DateCapacity:
      type: object
      properties:
        date:
          type: date
        availableBeds:
          type: integer
          example: 10
      required:
        - date
        - availableBeds
    PersonRisks:
      type: object
      properties:
        crn:
          type: string
        roshRisks:
          $ref: '#/components/schemas/RoshRisksEnvelope'
        mappa:
          $ref: '#/components/schemas/MappaEnvelope'
        tier:
          $ref: '#/components/schemas/RiskTierEnvelope'
        flags:
          $ref: '#/components/schemas/FlagsEnvelope'
      required:
        - crn
        - roshRisks
        - tier
        - flags
    RoshRisksEnvelope:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RiskEnvelopeStatus'
        value:
          $ref: '#/components/schemas/RoshRisks'
      required:
        - status
    RoshRisks:
      type: object
      properties:
        overallRisk:
          type: string
        riskToChildren:
          type: string
        riskToPublic:
          type: string
        riskToKnownAdult:
          type: string
        riskToStaff:
          type: string
        lastUpdated:
          type: string
          format: date
      required:
        - overallRisk
        - riskToChildren
        - riskToPublic
        - riskToKnownAdult
        - riskToStaff
    MappaEnvelope:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RiskEnvelopeStatus'
        value:
          $ref: '#/components/schemas/Mappa'
      required:
        - status
    Mappa:
      type: object
      properties:
        level:
          type: string
        lastUpdated:
          type: string
          format: date
      required:
        - level
        - lastUpdated
    RiskTierEnvelope:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RiskEnvelopeStatus'
        value:
          $ref: '#/components/schemas/RiskTier'
      required:
        - status
    RiskTier:
      type: object
      properties:
        level:
          type: string
        lastUpdated:
          type: string
          format: date
      required:
        - level
        - lastUpdated
    FlagsEnvelope:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RiskEnvelopeStatus'
        value:
          type: array
          items:
            type: string
      required:
        - status
    RiskEnvelopeStatus:
      type: string
      enum:
        - retrieved
        - not_found
        - error
    PersonNeeds:
      type: object
      properties:
        linkedToRiskOfSeriousHarm:
          type: array
          items:
            $ref: '#/components/schemas/PersonNeed'
        linkedToReoffending:
          type: array
          items:
            $ref: '#/components/schemas/PersonNeed'
        notLinkedToSeriousHarmOrReoffending:
          type: array
          items:
            $ref: '#/components/schemas/PersonNeed'
      required:
        - linkedToRiskOfSeriousHarm
        - linkedToReoffending
        - notLinkedToSeriousHarmOrReoffending
    PersonNeed:
      type: object
      properties:
        section:
          type: string
        name:
          type: string
        overThreshold:
          type: boolean
        riskOfHarm:
          type: boolean
        riskOfReoffending:
          type: boolean
        flaggedAsNeed:
          type: boolean
        severity:
          type: string
        identifiedAsNeed:
          type: boolean
        needScore:
          type: integer
      required:
        - section
        - name
        - overThreshold
        - riskOfHarm
        - riskOfReoffending
        - flaggedAsNeed
        - severity
        - identifiedAsNeed
        - needScore
    PersonAcctAlert:
      type: object
      properties:
        alertId:
          type: long
        comment:
          type: string
        dateCreated:
          type: date
        dateExpires:
          type: date
        expired:
          type: boolean
        active:
          type: boolean
      required:
        - alertId
        - comment
        - dateCreated
        - expired
        - active
    Application:
      type: object
      properties:
        id:
          type: string
          format: uuid
        person:
          $ref: '#/components/schemas/Person'
        createdByUserId:
          type: string
          format: uuid
        schemaVersion:
          type: string
          format: uuid
        outdatedSchema:
          type: boolean
        createdAt:
          type: string
          format: date-time
        isWomensApplication:
          type: boolean
        isPipeApplication:
          type: boolean
        submittedAt:
          type: string
          format: date-time
        data:
          $ref: '#/components/schemas/AnyValue'
        document:
          $ref: '#/components/schemas/AnyValue'
      required:
        - id
        - crn
        - createdByUserId
        - schemaVersion
        - outdatedSchema
        - createdAt
        - person
    AnyValue:
      description: Any object that conforms to the current JSON schema for an application
    NewApplication:
      type: object
      properties:
        crn:
          type: string
      required:
        - crn
    UpdateApplication:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
        isWomensApplication:
          type: boolean
        isPipeApplication:
          type: boolean
      required:
        - data
    SubmitApplication:
      type: object
      properties:
        translatedDocument:
          $ref: '#/components/schemas/AnyValue'
      required:
        - translatedDocument
    PrisonCaseNote:
      type: object
      properties:
        id:
          type: string
        sensitive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        occurredAt:
          type: string
          format: date-time
        authorName:
          type: string
        type:
          type: string
        subType:
          type: string
        note:
          type: string
      required:
        - id
        - sensitive
        - createdAt
        - occurredAt
        - authorName
        - type
        - subType
        - note
    Adjudication:
      type: object
      properties:
        id:
          type: long
        reportedAt:
          type: string
          format: date-time
        establishment:
          type: string
        offenceDescription:
          type: string
        hearingHeld:
          type: boolean
        finding:
          type: string
      required:
        - id
        - reportedAt
        - establishment
        - offenceDescription
        - hearingHeld
    Assessment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        application:
            $ref: '#/components/schemas/Application'
        allocatedToStaffMemberId:
          type: string
          format: uuid
        schemaVersion:
          type: string
          format: uuid
        outdatedSchema:
          type: boolean
        createdAt:
          type: string
          format: date-time
        allocatedAt:
          type: string
          format: date-time
        submittedAt:
          type: string
          format: date-time
        decision:
          $ref: '#/components/schemas/AssessmentDecision'
        data:
          $ref: '#/components/schemas/AnyValue'
        clarificationNotes:
          type: array
          items:
            $ref: '#/components/schemas/ClarificationNote'
      required:
        - id
        - application
        - allocatedToUser
        - schemaVersion
        - outdatedSchema
        - createdAt
        - allocatedAt
        - clarificationNotes
    AssessmentDecision:
      type: string
      enum:
        - accepted
        - rejected
    UpdatePremises:
      type: object
      properties:
        addressLine1:
          type: string
        postcode:
          type: string
        notes:
          type: string
        localAuthorityAreaId:
          type: string
          format: uuid
        characteristicIds:
          type: array
          items:
            type: string
            format: uuid
        status:
          $ref: '#/components/schemas/PropertyStatus'
      required:
        - addressLine1
        - postcode
        - localAuthorityAreaId
        - characteristicIds
        - status
    UpdateAssessment:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
        acceptedAt:
          type: string
          format: date-time
        rejectedAt:
          type: string
          format: date-time
        rejectionRationale:
          type: string
      required:
        - data
    ClarificationNote:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        createdByStaffMemberId:
          type: string
          format: uuid
        text:
          type: string
      required:
        - id
        - createdAt
        - createdByStaffMemberId
        - text
    NewClarificationNote:
      type: object
      properties:
        text:
          type: string
      required:
        - text
    Reallocation:
      type: object
      properties:
        userId:
          type: string
          format: uuid
    User:
      type: object
      properties:
        deliusUsername:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
        qualifications:
          type: array
          items:
            $ref: '#/components/schemas/UserQualification'
      required:
        - deliusUsername
        - roles
        - qualifications
    UserRole:
      type: string
      enum:
        - assessor
        - matcher
        - manager
        - workflow_manager
        - applicant
        - admin
    UserQualification:
      type: string
      enum:
        - womens
        - pipe
    ServiceName:
      type: string
      enum:
        - approved-premises
        - temporary-accommodation
      x-enum-varnames:
        - approvedPremises
        - temporaryAccommodation
    NewRoom:
      type: object
      properties:
        name:
          type: string
        notes:
          type: string
        characteristicIds:
          type: array
          items:
            type: string
            format: uuid
      required:
        - name
        - characteristicIds
    UpdateRoom:
      type: object
      properties:
        notes:
          type: string
        characteristicIds:
          type: array
          items:
            type: string
            format: uuid
      required:
        - characteristicIds
    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        notes:
          type: string
        beds:
          type: array
          items:
            $ref: '#/components/schemas/Bed'
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/Characteristic'
      required:
        - id
        - name
        - characteristics
    Bed:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    PropertyStatus:
      type: string
      enum:
        - pending
        - active
        - archived
    OASysAssessmentId:
      description: The ID of assessment being used. This should always be the latest Layer 3 assessment, regardless of state.
      type: long
      example: 138985987
    OASysQuestion:
      type: object
      properties:
        label:
          type: string
        questionNumber:
          type: string
        answers:
          type: array
          items:
            type: string
      required:
        - label
        - questionNumber
        - answers
    ArrayOfOASysOffenceAnalysisQuestions:
      type: array
      items:
        type: OASysQuestion
        example:
          - label: "Offence summary"
            questionNumber: "2.1"
            answers:
              - "Mr Smith admits he went to Mr Jones's address on 23rd March 2010..."
          - label: "Offence involved"
            questionNumber: "2.2"
            answers:
              - "Any violence or threat of violence / coercion"
              -  "Excessive use of violence / sadistic violence"
              -  "Carrying or using a weapon"
          - label: "Specific weapon"
            questionNumber: "2.3"
            answers:
              - "Iron bar"
    ArrayOfOASysRiskContributorsQuestions:
      type: array
      items:
        type: OASysQuestion
        example:
          - label: "Accommodation issues contributing to risks of offending and harm"
            questionNumber: "3.9"
            answers:
              - "Mr Smith told me that he was renting a room in a shared house, prior to his current remand..."
          - label: "Education, training and employability issues contributing to risks of offending and harm"
            questionNumber: "4.9"
            answers:
              - "Mr Smith told me that his formal school education was regularly interrupted as he and his family travelled a lot whilst he was growing up..."
    ArrayOfOASysRiskManagementQuestions:
      type: array
      items:
        type: OASysQuestion
        example:
          - label: "Current situation"
            questionNumber: "RM28.1"
            answers:
              - "Currently on remand at HMP Wandsworth - Management of case under MAPPA - level not yet set."
          - label: "Supervision"
            questionNumber: "RM30"
            answers:
              - "Probation Officer, Education training and employment Officer, Prison Offender Supervisor"
          - label: "Monitoring and control"
            questionNumber: "RM31"
            answers:
              - "State they will have secure accommodation for Mr Smith and partner on release, although ..."
    ArrayOfOASysRiskOfSeriousHarmSummaryQuestions:
      type: array
      items:
        type: OASysQuestion
        example:
          - label: "Who is at risk?"
            questionNumber: "R10.1"
            answers:
              - "Males whom Mr Smith believes have wronged him, or strangers with whom he gets...."
          - label: "What is the nature of the risk?"
            questionNumber: "R10.2"
            answers:
              - "Violence"
              - "Threats"
              - "Physical harm"
          - label: "When is the risk likely to be greatest?"
            questionNumber: "R10.3"
            answers:
              - "Not imminent ? lengthy gap between convictions for violent offences..."
          - label: "What circumstances are likely to increase the risk?"
            questionNumber: "R10.4"
            answers:
              - "As above ? drug use, need to obtain money for drugs at all costs..."
          - label: "What factors are likely to reduce the risk?"
            questionNumber: "R10.5"
            answers:
              - "Mr Smith thinking about consequences of his actions and not acting impulsively..."
    ArrayOfOASysRisksToTheIndividualQuestions:
      type: OASysQuestion
      example:
        - label: "Current concerns about self-harm or suicide"
          questionNumber: "R8.1.1"
          answers:
            - "There have been numerous ACCTs opened since 2013 and every subsequent year he has been in custody..."
        - label: "Previous concerns about self-harm or suicide"
          questionNumber: "R8.1.4"
          answers:
            - "During Mr Smith's psr report, he denied having any history of self-harm, however... "
        - label: "Current concerns about Coping in Custody or Hostel."
          questionNumber: "R8.2.1"
          answers:
            - "Has told prison staff that he swallowed batteries on one occasion due to wanting..."
        - label: "Previous concerns about Coping in Custody or Hostel."
          questionNumber: "R8.2.2"
          answers:
            - "Reported in 2021 that he will keep himself to himself because he gets discomfiture..."
    ArrayOfOASysRisksToOthersQuestions:
      type: array
      items:
        type: OASysQuestion
        example:
          - label: "Current offence details"
            questionNumber: "R6.1 FA1"
            answers:
              - "Mr Smith was released on licence from custody on 12/7/2018.  Between then and 1/8/2018 Mr Smith approached..."
          - label: "Current where and when"
            questionNumber: "R6.1 FA2"
            answers:
              - "Between 12/7/2018 - 31/7/2018, initially victim in the street putting bins out... "
          - label: "Previous offence details"
            questionNumber: "R6.2 FA8"
            answers:
              - "Mr Smith is assessed to have committed a number of offences that are considered to have crossed the Threshold of serious harm..."
          - label: "Previous where and when"
            questionNumber: "R6.2 FA9"
            answers:
              - "Bolton and Bury Districts."
    OASysOffenceAnalysis:
      type: object
      properties:
        assessmentId:
          type: object
          $ref: '#/components/schemas/OASysAssessmentId'
        assessmentState:
          $ref: '#/components/schemas/OASysAssessmentState'
        dateStarted:
          type: string
          format: date-time
        dateCompleted:
          type: string
          format: date-time
        offenceAnalysis:
          $ref: '#/components/schemas/ArrayOfOASysOffenceAnalysisQuestions'
      required:
        - assessmentId
        - assessmentState
        - dateStarted
        - offenceAnalysis
    OASysRiskContributors:
      type: object
      properties:
        assessmentId:
          type: object
          $ref: '#/components/schemas/OASysAssessmentId'
        assessmentState:
          $ref: '#/components/schemas/OASysAssessmentState'
        dateStarted:
          type: string
          format: date-time
        dateCompleted:
          type: string
          format: date-time
        riskContributors:
          $ref: '#/components/schemas/ArrayOfOASysRiskContributorsQuestions'
      required:
        - assessmentId
        - assessmentState
        - dateStarted
        - riskContributors
    OASysRiskManagementPlan:
      type: object
      properties:
        assessmentId:
          type: object
          $ref: '#/components/schemas/OASysAssessmentId'
        assessmentState:
          $ref: '#/components/schemas/OASysAssessmentState'
        dateStarted:
          type: string
          format: date-time
        dateCompleted:
          type: string
          format: date-time
        riskManagementPlan:
          $ref: '#/components/schemas/ArrayOfOASysRiskManagementQuestions'
      required:
        - assessmentId
        - assessmentState
        - dateStarted
        - riskManagementPlan
    OASysRiskOfSeriousHarmSummary:
      type: object
      properties:
        assessmentId:
          type: object
          $ref: '#/components/schemas/OASysAssessmentId'
        assessmentState:
          $ref: '#/components/schemas/OASysAssessmentState'
        dateStarted:
          type: string
          format: date-time
        dateCompleted:
          type: string
          format: date-time
        riskOfSeriousHarmSummary:
          $ref: '#/components/schemas/ArrayOfOASysRiskOfSeriousHarmSummaryQuestions'
      required:
        - assessmentId
        - assessmentState
        - dateStarted
        - riskOfSeriousHarmSummary
    OASysRisksToTheIndividual:
      type: object
      properties:
        assessmentId:
          type: object
          $ref: '#/components/schemas/OASysAssessmentId'
        assessmentState:
          $ref: '#/components/schemas/OASysAssessmentState'
        dateStarted:
          type: string
          format: date-time
        dateCompleted:
          type: string
          format: date-time
        risksToTheIndividual:
          $ref: '#/components/schemas/ArrayOfOASysRisksToTheIndividualQuestions'
      required:
        - assessmentId
        - assessmentState
        - dateStarted
        - risksToTheIndividual
    OASysRisksToOthers:
      type: object
      properties:
        assessmentId:
          type: object
          $ref: '#/components/schemas/OASysAssessmentId'
        assessmentState:
          $ref: '#/components/schemas/OASysAssessmentState'
        dateStarted:
          type: string
          format: date-time
        dateCompleted:
          type: string
          format: date-time
        risksToOthers:
          $ref: '#/components/schemas/ArrayOfOASysRisksToOthersQuestions'
      required:
        - assessmentId
        - asessmentState
        - dateStarted
        - risksToOthers
    OASysAssessmentState:
      type: string
      enum:
        - Completed
        - Incomplete
    ActiveOffence:
      type: object
      properties:
        deliusEventNumber:
          type: string
        offenceDescription:
          type: string
        offenceId:
          type: string
        convictionId:
          type: long
      required:
        - deliusEventNumber
        - offenceDescription
        - offenceId
        - convictionId

# DO NOT EDIT.
# This is a build artefact for use in code generation.
openapi: 3.0.1
info:
  title: Approved Premises
  version: 1.0.0
servers:
  - url: /
paths:
  /premises:
    get:
      tags:
        - Premises
      summary: Lists all approved premises, optionally for the given service
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: If given, only premises for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: X-User-Region
          in: header
          required: false
          description: If given, only premises within this region will be returned
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Premises'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
    post:
      tags:
        - Premises
      summary: Add a new premises
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: If given, persist the service name against this property
          schema:
            $ref: '#/components/schemas/ServiceName'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewPremises'
        required: true
      responses:
        201:
          description: new premises added
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Premises'
        400:
          description: invalid request
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/summary:
    get:
      tags:
        - Premises
      summary: Returns a list of premises
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: If given, only premises for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: probationRegionId
          in: query
          description: ID of the probation region to filter by
          schema:
            type: string
            format: uuid
        - name: apAreaId
          in: query
          description: ID of the AP area to filter by
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PremisesSummary'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}:
    get:
      tags:
        - Premises
      summary: Returns an approved premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Premises'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
    put:
      tags:
        - Operations on premises
      summary: Updates a premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Information to update the premises with
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdatePremises'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Premises'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/staff:
    get:
      tags:
        - Premises
      summary: Returns the staff that work at an approved premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to return staff for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StaffMember'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/bookings:
    get:
      tags:
        - Operations on premises
      summary: Returns all bookings for an approved premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to get bookings for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
    post:
      tags:
        - Operations on premises
      summary: Adds a new booking for an approved premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to create a booking for
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewBooking'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Booking'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        409:
          description: An existing booking for the given bed has overlapping dates
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/summary:
    get:
      tags:
        - Operations on premises
      summary: Returns a summary of bookings for an approved premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to get bookings for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ExtendedPremisesSummary'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/calendar:
    get:
      tags:
        - Operations on premises
      summary: Returns information about the occupancy of each bed in the Premises over the specified time period
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to get bed information for
          required: true
          schema:
            type: string
            format: uuid
        - name: startDate
          in: query
          description: Start of date range to return occupancy for
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End of date range to return occupancy for
          required: true
          schema:
            type: string
            format: date
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BedOccupancyRange'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/capacity:
    get:
      tags:
        - Operations on premises
      summary: Returns the Premises' capacity for each date from today to the end of the last existing booking
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to get bookings for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DateCapacity'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/bookings/{bookingId}:
    get:
      tags:
        - Operations on premises
      summary: Returns a specific booking for an approved premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the booking is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Booking'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/bookings/{bookingId}/moves:
    post:
      tags:
        - Operations on bookings
      summary: Moves a booking to a new bed
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the booking is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the bed move
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewBedMove'
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/arrivals:
    post:
      tags:
        - Operations on bookings
      summary: Posts an arrival to a specified approved premises booking
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the booking is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the arrival
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewArrival'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Arrival'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/extensions:
    post:
      tags:
        - Operations on bookings
      summary: Posts an extension to a specified approved premises booking
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the booking is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the extension
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewExtension'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Extension'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/date-changes:
    post:
      tags:
        - Operations on bookings
      summary: Posts a change to the dates for a specified approved premises booking
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the booking is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the extension
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewDateChange'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/DateChange'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/departures:
    post:
      tags:
        - Operations on bookings
      summary: Posts a departure to a specified approved premises booking
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the booking is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the departure
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewDeparture'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Departure'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/non-arrivals:
    post:
      tags:
        - Operations on bookings
      summary: Posts an non-arrival to a specified approved premises booking
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the booking is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the non-arrival
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewNonarrival'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Nonarrival'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/cancellations:
    post:
      tags:
        - Operations on bookings
      summary: Posts a cancellation to a specified approved premises booking
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the cancellation is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the cancellation
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewCancellation'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Cancellation'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/confirmations:
    post:
      tags:
        - Operations on bookings
      summary: Posts a confirmation to a specified Temporary Accommodation booking
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the confirmation is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the confirmation
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewConfirmation'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Confirmation'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/bookings/{bookingId}/turnarounds:
    post:
      tags:
        - Operations on bookings
      summary: Posts a turnaround to a specified Temporary Accommodation booking
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the turnaround is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: bookingId
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the turnaround
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewTurnaround'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Turnaround'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        409:
          description: An existing booking for the given bed has overlapping dates
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/beds:
    get:
      tags:
        - Rooms
      summary: Lists all beds for the given premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to list the beds for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BedSummary'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/beds/{bedId}:
    get:
      tags:
        - Rooms
      summary: Gets a given bed for a given premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises that the bed is in
          required: true
          schema:
            type: string
            format: uuid
        - name: bedId
          in: path
          description: ID of the bed to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BedDetail'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/rooms:
    get:
      tags:
        - Rooms
      summary: Lists all rooms for the given premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to list the rooms for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
    post:
      tags:
        - Rooms
      summary: Adds a new room for an approved premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the room is in
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the new room
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewRoom'
        required: true
      responses:
        201:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Room'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/rooms/{roomId}:
    get:
      summary: Returns a specific room for a premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the room is in
          required: true
          schema:
            type: string
            format: uuid
        - name: roomId
          in: path
          description: ID of the room to get
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Room'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or room ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
    put:
      summary: Updates a room
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the room is in
          required: true
          schema:
            type: string
            format: uuid
        - name: roomId
          in: path
          description: ID of the room to update
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Information to update the room with
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateRoom'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Room'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or room ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/search:
    get:
      summary: Searches for a Person by their CRN
      parameters:
        - name: crn
          in: query
          description: CRN to search for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Person'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/risks:
    get:
      summary: Returns the risks for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch risks for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PersonRisks'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/prison-case-notes:
    get:
      summary: Returns the prison case notes for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch prison case notes for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PrisonCaseNote'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/adjudications:
    get:
      summary: Returns the adjudications for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch adjudications for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Adjudication'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/acct-alerts:
    get:
      summary: Returns the ACCT alerts for a Person
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch ACCT alerts for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonAcctAlert'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/oasys/selection:
    get:
      tags:
        - OASys
      summary: Returns the importable sections of OASys including details of links to harm and reoffending
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch latest OASys selection
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OASysSection'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/oasys/sections:
    get:
      tags:
        - OASys
      summary: Returns OASys sections to support an Application.  The Supporting Information sections are returned if linked to harm and optionally if their section number appears in the selected-sections query parameter.
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch latest OASys selection
          required: true
          schema:
            type: string
        - name: selected-sections
          in: query
          description: Section numbers for optional (not Linked to Harm) suppprting information
          required: false
          schema:
            type: array
            items:
              type: integer
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OASysSections'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/oasys/risk-to-self:
    get:
      tags:
        - OASys
      summary: Returns the Risk To Individual (known as Risk to Self on frontend) section of an OASys.
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch latest OASys
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OASysRiskToSelf'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/oasys/rosh:
    get:
      tags:
        - OASys
      summary: Returns the Risk of Serious Harm section of an OASys.
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch latest OASys
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/OASysRiskOfSeriousHarm'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /people/{crn}/offences:
    get:
      summary: Returns all active offences for a Person.
      parameters:
        - name: crn
          in: path
          description: CRN of the Person to fetch active offences for
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ActiveOffence'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/lost-beds:
    post:
      tags:
        - Operations on premises
      summary: Posts a lost bed to a specified approved premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the lost bed is related to
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the lost bed
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewLostBed'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LostBed'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
    get:
      tags:
        - Operations on premises
      summary: Lists all Lost Beds entries for the Premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises to show lost beds for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LostBed'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /premises/{premisesId}/lost-beds/{lostBedId}:
    get:
      tags:
        - Operations on premises
      summary: Returns a specific lost bed for a premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the lost bed is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: lostBedId
          in: path
          description: ID of the lost bed
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LostBed'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises or lost bed ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
    put:
      tags:
        - Operations on premises
      summary: Updates a lost bed for a premises
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the lost bed is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: lostBedId
          in: path
          description: ID of the lost bed
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the lost bed
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateLostBed'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LostBed'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or booking ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /premises/{premisesId}/lost-beds/{lostBedId}/cancellations:
    post:
      tags:
        - Operations on bookings
      summary: Posts a cancellation to a specified lost bed
      parameters:
        - name: premisesId
          in: path
          description: ID of the premises the cancellation is related to
          required: true
          schema:
            type: string
            format: uuid
        - name: lostBedId
          in: path
          description: ID of the lost bed
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the cancellation
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewLostBedCancellation'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/LostBedCancellation'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid premises ID or lost bed ID
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /applications/all:
    get:
      tags:
        - Operations on all applications
      summary: Lists all applications that any user has created
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only approved premises anything else gets a 400
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: page
          in: query
          description: Page number of results to return. If blank, returns all results
          schema:
            type: integer
        - name: crnOrName
          in: query
          description: CRN of applications
          schema:
            type: string
        - name: sortDirection
          in: query
          description: The direction to sort the results by. If blank, will sort in descending order
          schema:
            $ref: '#/components/schemas/SortDirection'
        - name: status
          in: query
          description: The application status
          schema:
            $ref: '#/components/schemas/ApprovedPremisesApplicationStatus'
        - name: sortBy
          in: query
          description: The field to sort the results by.
          schema:
            $ref: '#/components/schemas/ApplicationSortField'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationSummary'
          headers:
            X-Pagination-CurrentPage:
              $ref: '#/components/headers/X-Pagination-CurrentPage'
            X-Pagination-TotalPages:
              $ref: '#/components/headers/X-Pagination-TotalPages'
            X-Pagination-TotalResults:
              $ref: '#/components/headers/X-Pagination-TotalResults'
            X-Pagination-PageSize:
              $ref: '#/components/headers/X-Pagination-TotalResults'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /applications:
    post:
      tags:
        - Operations on applications
      summary: Creates an application
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: Which service the application will belong to, defaults to approved-premises
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: createWithRisks
          in: query
          required: false
          description: Instructs the API to create and return risk information from the OASys API (defaults to true)
          schema:
            type: boolean
      requestBody:
        description: Information to create a blank application with
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewApplication'
        required: true
      responses:
        201:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Application'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
    get:
      tags:
        - Operations on all applications
      summary: Lists all applications that the user has created
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: Which service to get applications for, defaults to approved-premises
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationSummary'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /applications/{applicationId}:
    put:
      tags:
        - Operations on applications
      summary: Updates an application
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Information to update the application with
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateApplication'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Application'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
    get:
      tags:
        - Operations on applications
      summary: Gets a single application by its ID
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Application'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /applications/{applicationId}/withdrawal:
    post:
      tags:
        - Operations on applications
      summary: Withdraws an application with a reason
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: details of the withdrawal
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewWithdrawal'
        required: true
      responses:
        200:
          description: successful operation
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid applicationId
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /applications/{applicationId}/notes:
    post:
      tags:
        - Add a note on applications
      summary: Add a note on applications
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: the note to add
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewApplicationTimelineNote'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ApplicationTimelineNote'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid applicationId
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /applications/{applicationId}/timeline:
    get:
      tags:
        - Application data timeline
      summary: Returns domain event summary
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Service-Name
          in: header
          required: true
          description: If given, only users for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimelineEvent'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /applications/{applicationId}/placement-applications:
    get:
      tags:
        - Application data timeline
      summary: Returns domain event summary
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Service-Name
          in: header
          required: true
          description: If given, only users for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlacementApplication'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /applications/{applicationId}/documents:
    get:
      tags:
        - Application data
      summary: Returns meta info on documents at the person level or at the Conviction level for the index Offence of this application.
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid CRN
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /documents/{crn}/{documentId}:
    get:
      tags:
        - Application data
      summary: Downloads a document
      parameters:
        - name: crn
          in: path
          description: CRN of the Person the document is associated with
          required: true
          schema:
            type: string
        - name: documentId
          in: path
          description: ID of the document
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/octet-stream':
              schema:
                type: string
                format: binary
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid applicationId or documentId
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /applications/{applicationId}/submission:
    post:
      tags:
        - Application data
      summary: Submits an Application
      parameters:
        - in: path
          name: applicationId
          required: true
          description: Id of the application
          schema:
            type: string
            format: uuid
      requestBody:
        description: Information needed to submit an application
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SubmitApplication'
        required: true
      responses:
        200:
          description: successfully submitted the application
        400:
          description: application has already been submitted
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /applications/{applicationId}/assessment:
    get:
      tags:
        - Operations on applications
      summary: Get the assessment for an application
      parameters:
        - name: applicationId
          in: path
          description: ID of the application
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Assessment'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /beds/search:
    post:
      summary: Searches for available Beds within the given parameters
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/BedSearchParameters'
        required: true
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BedSearchResults'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /bookings/search:
    get:
      summary: Searches for bookings with the given parameters
      parameters:
        - name: status
          in: query
          description: If provided, only search for bookings with the given status
          required: false
          schema:
            $ref: "#/components/schemas/BookingStatus"
        - name: sortOrder
          in: query
          description: If provided, return results in the given order
          required: false
          schema:
            $ref: "#/components/schemas/SortOrder"
        - name: sortField
          in: query
          description: If provided, return results ordered by the given field name
          required: false
          schema:
            $ref: "#/components/schemas/BookingSearchSortField"
        - name: page
          in: query
          description: Page number of results to return. If blank, returns all results
          schema:
            type: integer
        - name: X-Service-Name
          in: header
          required: true
          description: Filters the bookings to those relevant to the specified service.
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BookingSearchResults'
          headers:
            X-Pagination-CurrentPage:
              $ref: '#/components/headers/X-Pagination-CurrentPage'
            X-Pagination-TotalPages:
              $ref: '#/components/headers/X-Pagination-TotalPages'
            X-Pagination-TotalResults:
              $ref: '#/components/headers/X-Pagination-TotalResults'
            X-Pagination-PageSize:
              $ref: '#/components/headers/X-Pagination-TotalResults'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/departure-reasons:
    get:
      tags:
        - Reference Data
      summary: Lists all departure reasons
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: If given, only departure reasons for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: includeInactive
          in: query
          required: false
          description: Specifies whether inactive departure reasons should be provided. Defaults to `false`.
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DepartureReason'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/move-on-categories:
    get:
      tags:
        - Reference Data
      summary: Lists all move-on categories for departures
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: If given, only move-on categories for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: includeInactive
          in: query
          required: false
          description: Specifies whether inactive move-on categories should be provided. Defaults to `false`.
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MoveOnCategory'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/destination-providers:
    get:
      tags:
        - Reference Data
      summary: Lists all destination providers for departures
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DestinationProvider'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/supervising-providers:
    get:
      tags:
        - Reference Data
      summary: Lists all supervising providers for arrivals
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupervisingProvider'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/supervising-teams:
    get:
      tags:
        - Reference Data
      summary: Lists all supervising teams for arrivals
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupervisingTeam'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/non-arrival-reasons:
    get:
      tags:
        - Reference Data
      summary: Lists reasons for non-arrivals
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NonArrivalReason'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/supervising-officers:
    get:
      tags:
        - Reference Data
      summary: Lists all supervising officers for arrivals
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SupervisingOfficer'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/lost-bed-reasons:
    get:
      tags:
        - Reference Data
      summary: Lists all reasons for losing beds
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: If given, only lost bed reasons for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LostBedReason'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/cancellation-reasons:
    get:
      tags:
        - Reference Data
      summary: Lists all cancellation reasons
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: If given, only departure reasons for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CancellationReason'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/local-authority-areas:
    get:
      tags:
        - Local Authorities
      summary: Lists all local authorities
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocalAuthorityArea'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/probation-regions:
    get:
      tags:
        - Reference Data
      summary: Lists all probation regions
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProbationRegion'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/ap-areas:
    get:
      tags:
        - Reference Data
      summary: Lists all probation regions
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApArea'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/characteristics:
    get:
      tags:
        - Characteristics
      summary: Lists all available characteristics
      parameters:
        - name: X-Service-Name
          in: header
          required: false
          description: If given, only characteristics for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: includeInactive
          in: query
          required: false
          description: Specifies whether inactive characteristics should be provided. Defaults to `false`.
          schema:
            type: boolean
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Characteristic'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reference-data/probation-delivery-units:
    get:
      tags:
        - Reference Data
      summary: Lists probation delivery units, optionally filtered by region
      parameters:
        - name: probationRegionId
          in: query
          required: false
          description: If given, only probation delivery units for this region will be returned
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProbationDeliveryUnit'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /tasks:
    get:
      tags:
        - Task data
      summary: List all tasks
      parameters:
        - name: apAreaId
          in: query
          required: false
          description: If provided, only tasks for this area will be returned
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successfully retrieved tasks
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /tasks/{taskType}:
    get:
      tags:
        - Task data
      summary: List all tasks
      parameters:
        - in: path
          name: taskType
          required: true
          description: Task type
          schema:
            type: string
        - name: page
          in: query
          description: Page number of results to return.
          schema:
            type: integer
        - name: sortDirection
          in: query
          description: The direction to sort the results by. If blank, will sort by descending order
          schema:
            $ref: '#/components/schemas/SortDirection'
        - name: apAreaId
          in: query
          required: false
          description: If provided, only tasks for this area will be returned
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successfully retrieved tasks
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
          headers:
            X-Pagination-CurrentPage:
              $ref: '#/components/headers/X-Pagination-CurrentPage'
            X-Pagination-TotalPages:
              $ref: '#/components/headers/X-Pagination-TotalPages'
            X-Pagination-TotalResults:
              $ref: '#/components/headers/X-Pagination-TotalResults'
            X-Pagination-PageSize:
              $ref: '#/components/headers/X-Pagination-TotalResults'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /tasks/reallocatable:
    get:
      tags:
        - Task data
      summary: List all reallocatable tasks
      parameters:
        - in: query
          name: type
          required: false
          description: Returns tasks that match the given type. If no type given return all.
          schema:
            type: string
        - name: page
          in: query
          description: Page number of results to return.
          schema:
            type: integer
        - name: sortBy
          in: query
          description: Which field to sort the results by. If blank, will sort by createdAt
          schema:
            $ref: '#/components/schemas/TaskSortField'
        - name: sortDirection
          in: query
          description: The direction to sort the results by. If blank will sort by descending order
          schema:
            $ref: '#/components/schemas/SortDirection'
        - name: allocatedFilter
          in: query
          description: Filter by allocated or not
          schema:
            $ref: '#/components/schemas/AllocatedFilter'
        - name: apAreaId
          in: query
          description: Approved Premises Area ID to filter results by
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successfully retrieved tasks
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
          headers:
            X-Pagination-CurrentPage:
              $ref: '#/components/headers/X-Pagination-CurrentPage'
            X-Pagination-TotalPages:
              $ref: '#/components/headers/X-Pagination-TotalPages'
            X-Pagination-TotalResults:
              $ref: '#/components/headers/X-Pagination-TotalResults'
            X-Pagination-PageSize:
              $ref: '#/components/headers/X-Pagination-TotalResults'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /tasks/{taskType}/{id}:
    get:
      tags:
        - Application data
      summary: Gets a task for an application
      parameters:
        - in: path
          name: id
          required: true
          description: ID of the task
          schema:
            type: string
            format: uuid
        - in: path
          name: taskType
          required: true
          description: Task type
          schema:
            type: string
      responses:
        200:
          description: successfully retrieved task
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/TaskWrapper'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /tasks/{taskType}/{id}/allocations:
    post:
      tags:
        - Operations on applications
      summary: Reallocates a task for an application
      parameters:
        - name: id
          in: path
          description: ID of the task
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: taskType
          required: true
          description: Task type
          schema:
            type: string
        - name: X-Service-Name
          in: header
          required: true
          description: Only assessments for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewReallocation'
        required: false
      responses:
        201:
          description: successful operation
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Reallocation'
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
    delete:
      tags:
        - Operations on applications
      summary: Unallocates a task for an application
      parameters:
        - name: id
          in: path
          description: ID of the task
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: taskType
          required: true
          description: Task type
          schema:
            type: string
      responses:
        200:
          description: successful operation
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /placement-requests:
    get:
      tags:
        - Placement requests
      summary: Gets placement requests for a given user
      responses:
        200:
          description: successfully retrieved placement requests
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlacementRequest'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /placement-requests/dashboard:
    get:
      tags:
        - Placement requests
      summary: Gets all placement requests
      parameters:
        - name: status
          in: query
          description: filter by status of an application
          schema:
            $ref: '#/components/schemas/PlacementRequestStatus'
        - name: crn
          in: query
          description: filter by CRN
          schema:
            type: string
        - name: crnOrName
          in: query
          description: search by CRN or name
          schema:
            type: string
        - name: tier
          in: query
          description: filter by tier of Offender at time Application was created
          schema:
            $ref: '#/components/schemas/RiskTierLevel'
        - name: arrivalDateStart
          in: query
          description: filter by minimum expected arrival date
          schema:
            type: string
            format: date
        - name: arrivalDateEnd
          in: query
          description: filter by maximum expected arrival date
          schema:
            type: string
            format: date
        - name: requestType
          in: query
          description: filter by request type
          schema:
            $ref: '#/components/schemas/PlacementRequestRequestType'
        - name: apAreaId
          in: query
          required: false
          description: filter by approved premises area ID
          schema:
            type: string
            format: uuid
        - name: page
          in: query
          description: Page number of results to return. If blank, returns all results
          schema:
            type: integer
        - name: sortBy
          in: query
          description: Which field to sort the results by. If blank, will sort by createdAt
          schema:
            $ref: '#/components/schemas/PlacementRequestSortField'
        - name: sortDirection
          in: query
          description: The direction to sort the results by. If blank, will sort in descending order
          schema:
            $ref: '#/components/schemas/SortDirection'
      responses:
        200:
          description: successfully retrieved placement requests
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlacementRequest'
          headers:
            X-Pagination-CurrentPage:
              $ref: '#/components/headers/X-Pagination-CurrentPage'
            X-Pagination-TotalPages:
              $ref: '#/components/headers/X-Pagination-TotalPages'
            X-Pagination-TotalResults:
              $ref: '#/components/headers/X-Pagination-TotalResults'
            X-Pagination-PageSize:
              $ref: '#/components/headers/X-Pagination-TotalResults'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /placement-requests/{id}:
    get:
      tags:
        - Placement requests
      summary: Gets placement requests for a given user
      parameters:
        - name: id
          in: path
          description: ID of the placement request
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successfully retrieved placement requests
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PlacementRequestDetail'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /placement-requests/{id}/withdrawal:
    post:
      tags:
        - Placement requests
      summary: Withdraws a placement request
      parameters:
        - name: id
          in: path
          description: ID of the placement request
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successful operation
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: invalid applicationId
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
      x-codegen-request-body-name: body
  /placement-requests/{id}/booking:
    post:
      tags:
        - Placement requests
      summary: Creates a Booking for a placement request
      parameters:
        - name: id
          in: path
          description: ID of the placement request
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Booking details
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewPlacementRequestBooking'
        required: true
      responses:
        200:
          description: successfully created a Booking
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/NewPlacementRequestBookingConfirmation'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /placement-requests/{id}/booking-not-made:
    post:
      tags:
        - Placement requests
      summary: Records that an attempt to match was made but no suitable Beds could be found
      parameters:
        - name: id
          in: path
          description: ID of the placement request
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details about the failure to match
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewBookingNotMade'
        required: true
      responses:
        200:
          description: successfully recorded that a Booking could not be made
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/BookingNotMade'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /placement-applications:
    post:
      tags:
        - Placement applications
      summary: Creates an application for a placement
      requestBody:
        description: Details about the application
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewPlacementApplication'
        required: true
      responses:
        200:
          description: successfully recorded that a placement application has been made
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PlacementApplication'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /placement-applications/{id}:
    get:
      tags:
        - Placement applications
      summary: Retrieves an application for a placement request
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the application
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successfully retrieved placement request application
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PlacementApplication'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
    put:
      tags:
        - Placement applications
      summary: Updates an application for a placement request
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the application
          schema:
            type: string
            format: uuid
      requestBody:
        description: Details about the application
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdatePlacementApplication'
        required: true
      responses:
        200:
          description: successfully retrieved placement request application
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PlacementApplication'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /placement-applications/{id}/submission:
    post:
      tags:
        - Placement applications
      summary: Submits an application for a placement request
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the application
          schema:
            type: string
            format: uuid
      requestBody:
        description: Information needed to submit a placement application
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SubmitPlacementApplication'
        required: true
      responses:
        200:
          description: successfully submitted the placement application
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PlacementApplication'
        400:
          description: placement application has already been submitted
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /placement-applications/{id}/decision:
    post:
      tags:
        - Placement applications
      summary: Submits a decision for a placement application
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the application
          schema:
            type: string
            format: uuid
      requestBody:
        description: Information needed to submit a placement application
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/PlacementApplicationDecisionEnvelope'
        required: true
      responses:
        200:
          description: successfully made a decision on the placement application
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PlacementApplication'
        400:
          description: placement application already has a decision made
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /placement-applications/{id}/withdraw:
    post:
      tags:
        - Placement applications
      summary: Withdraw a placement application
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the placement application to withdraw
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Placement application withdrawn
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/PlacementApplication'
        400:
          description: placement application already has a decision made
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /assessments:
    get:
      tags:
        - Assessment data
      summary: Gets assessments the user is authorised to view
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only assessments for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: sortDirection
          in: query
          description: If provided, return results in the given order
          required: false
          schema:
            $ref: "#/components/schemas/SortDirection"
        - name: sortBy
          in: query
          description: If provided, return results ordered by the given field name
          required: false
          schema:
            $ref: "#/components/schemas/AssessmentSortField"
        - name: statuses
          in: query
          description: If provided, return only results with the given statuses
          required: false
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AssessmentStatus"
        - name: crn
          in: query
          description: If provided, return only results for the given CRN
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Page number of results to return. If blank, returns all results
          schema:
            type: integer
        - name: perPage
          in: query
          description: Number of items to return per page (defaults to 10)
          schema:
            type: integer
      responses:
        200:
          description: successfully retrieved assessments
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssessmentSummary'
          headers:
            X-Pagination-CurrentPage:
              schema:
                type: integer
              description: The current page number
            X-Pagination-TotalPages:
              schema:
                type: integer
              description: The total number of pages
            X-Pagination-TotalResults:
              schema:
                type: integer
              description: The total number of results
            X-Pagination-PageSize:
              schema:
                type: integer
              description: The size of each page
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /assessments/{assessmentId}:
    get:
      tags:
        - Assessment data
      summary: Gets a single assessment by its id
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: Id of the assessment
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successfully retrieved assessment
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Assessment'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
    put:
      tags:
        - Assessment data
      summary: Updates an assessment
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: Id of the assessment
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated assessment
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdateAssessment'
        required: true
      responses:
        200:
          description: successfully retrieved assessment
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Assessment'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /assessments/{assessmentId}/notes:
    post:
      tags:
        - Assessment data
      summary: Adds a clarification note to an assessment
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: Id of the assessment
          schema:
            type: string
            format: uuid
      requestBody:
        description: Clarification note
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewClarificationNote'
        required: true
      responses:
        201:
          description: successfully created a clarification note
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ClarificationNote'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /assessments/{assessmentId}/notes/{noteId}:
    put:
      tags:
        - Assessment data
      summary: Updates an assessment's clarification note
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: Id of the assessment
          schema:
            type: string
            format: uuid
        - in: path
          name: noteId
          required: true
          description: Id of the clarification note
          schema:
            type: string
            format: uuid
      requestBody:
        description: Clarification note
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UpdatedClarificationNote'
        required: true
      responses:
        201:
          description: successfully updated a clarification note
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ClarificationNote'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /assessments/{assessmentId}/referral-history-notes:
    post:
      tags:
        - Assessment data
      summary: Adds a user-written note to an assessment
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: Id of the assessment
          schema:
            type: string
            format: uuid
      requestBody:
        description: User note
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/NewReferralHistoryUserNote'
        required: true
      responses:
        201:
          description: successfully created a user-written note
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ReferralHistoryNote'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /assessments/{assessmentId}/acceptance:
    post:
      tags:
        - Assessment data
      summary: Accepts an Assessment
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: Id of the assessment
          schema:
            type: string
            format: uuid
      requestBody:
        description: Information needed to accept an assessment
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AssessmentAcceptance'
        required: true
      responses:
        200:
          description: successfully accepted the assessment
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /assessments/{assessmentId}/rejection:
    post:
      tags:
        - Assessment data
      summary: Rejects an Assessment
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: Id of the assessment
          schema:
            type: string
            format: uuid
      requestBody:
        description: Rejection info
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AssessmentRejection'
        required: true
      responses:
        200:
          description: successfully rejected the assessment
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /assessments/{assessmentId}/closure:
    post:
      tags:
        - Assessment data
      summary: Closes an Assessment
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: Id of the assessment
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: successfully closed the assessment
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /profile:
    get:
      tags:
        - Auth
      summary: Returns information on the logged in user
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Filters the user details to those relevant to the specified service.
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successfully retrieved information on user
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /users:
    get:
      tags:
        - Auth
      summary: Returns a list of users
      parameters:
        - in: query
          name: roles
          required: false
          description: Only return users with the provided role(s)
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ApprovedPremisesUserRole'
        - in: query
          name: qualifications
          required: false
          description: Only return users with the provided qualification(s)
          schema:
            type: array
            items:
              $ref: '#/components/schemas/UserQualification'
        - name: probationRegionId
          in: query
          description: Probation region ID to filter results by
          schema:
            type: string
            format: uuid
        - name: apAreaId
          in: query
          description: Approved premises area ID to filter results by
          schema:
            type: string
            format: uuid
        - name: X-Service-Name
          in: header
          required: true
          description: Filters the user details to those relevant to the specified service.
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: page
          in: query
          description: Page number of results to return. If blank, returns all results
          schema:
            type: integer
        - name: sortBy
          in: query
          description: Which field to sort the results by. If blank, will sort by createdAt
          schema:
            $ref: '#/components/schemas/UserSortField'
        - name: sortDirection
          in: query
          description: The direction to sort the results by. If blank, will sort in descending order
          schema:
            $ref: '#/components/schemas/SortDirection'
      responses:
        200:
          description: successfully retrieved users
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          headers:
            X-Pagination-CurrentPage:
              schema:
                type: integer
              description: The current page number
            X-Pagination-TotalPages:
              schema:
                type: integer
              description: The total number of pages
            X-Pagination-TotalResults:
              schema:
                type: integer
              description: The total number of results
            X-Pagination-PageSize:
              schema:
                type: integer
              description: The size of each page
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /users/{id}:
    get:
      summary: Get information about a specific user
      parameters:
        - in: path
          name: id
          required: true
          description: Id of the user
          schema:
            type: string
            format: uuid
        - name: X-Service-Name
          in: header
          required: true
          description: If given, only users for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successfully retrieved information on user
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
    put:
      summary: Update information about a specific user's roles and qualifications
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: If given, only users for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - in: path
          name: id
          required: true
          description: Id of the user
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/UserRolesAndQualifications'
        required: true
      responses:
        200:
          description: Successfully added information about user roles and qualifications
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
    delete:
      summary: Deletes the user
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            format: uuid
        - name: X-Service-Name
          in: header
          required: true
          description: Only users for this service will be allowed to delete a user
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successful operation
        400:
          description: invalid params
          content:
            'application/problem+json':
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /users/search:
    get:
      tags:
        - Auth
      summary: Returns a list of users with partial match on name
      parameters:
        - in: query
          name: name
          required: true
          description: Name or partial name of the user
          schema:
            type: string
        - name: X-Service-Name
          in: header
          required: true
          description: Filters the user details to those relevant to the specified service.
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successfully retrieved users
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /users/delius:
    get:
      tags:
        - Auth
      summary: Returns a user with match on name
      parameters:
        - in: query
          name: name
          required: true
          description: Name of the user
          schema:
            type: string
        - name: X-Service-Name
          in: header
          required: true
          description: Filters the user details to those relevant to the specified service.
          schema:
            $ref: '#/components/schemas/ServiceName'
      responses:
        200:
          description: successfully retrieved user
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        404:
          description: User not found
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Problem'
        500:
          $ref: '#/components/responses/500Response'
  /seed:
    post:
      summary: Starts the data seeding process, can only be called from a local connection
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/SeedRequest'
        required: true
      responses:
        202:
          description: successfully requested task
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /cache/{cacheName}:
    delete:
      summary: Clears the given cache, can only be called from a local connection
      parameters:
        - in: path
          name: cacheName
          required: true
          schema:
            $ref: '#/components/schemas/CacheType'
      responses:
        200:
          description: successfully cleared cache
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /migration-job:
    post:
      summary: Starts a migration job (process for data migrations that can't be achieved solely via SQL migrations), can only be called from a local connection
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/MigrationJobRequest'
        required: true
      responses:
        202:
          description: successfully requested task
        401:
          $ref: '#/components/responses/401Response'
        403:
          $ref: '#/components/responses/403Response'
        500:
          $ref: '#/components/responses/500Response'
  /reports/bookings:
    get:
      tags:
        - Reports
      summary: Returns a spreadsheet of all bookings for the specified service and (optional) region.
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only bookings for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: probationRegionId
          in: query
          required: false
          description: If provided, only bookings for this region will be returned
          schema:
            type: string
            format: uuid
        - name: year
          in: query
          required: true
          description: If provided, only bookings for this year will be returned
          schema:
            type: integer
        - name: month
          in: query
          required: true
          description: If provided, only bookings for this month will be returned - must be provided with year
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved the report
          content:
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              schema:
                type: string
                format: binary
  /reports/bed-usage:
    get:
      tags:
        - Reports
      summary: Returns a spreadsheet of the bookings, voids and turnarounds all beds for the specified service and (optional) region.
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only bookings for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: probationRegionId
          in: query
          required: false
          description: If provided, only bookings for this region will be returned
          schema:
            type: string
            format: uuid
        - name: year
          in: query
          required: true
          description: Only bookings for this year will be returned
          schema:
            type: integer
        - name: month
          in: query
          required: true
          description: Only bookings for this month will be returned - must be provided with year
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved the report
          content:
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              schema:
                type: string
                format: binary
  /reports/bed-utilisation:
    get:
      tags:
        - Reports
      summary: Returns a spreadsheet showing how many days per month each bedspace spent in which state and the overall occupancy rate.
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only bookings for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: probationRegionId
          in: query
          required: false
          description: If provided, only bookings for this region will be returned
          schema:
            type: string
            format: uuid
        - name: year
          in: query
          required: true
          description: Only bookings for this year will be returned
          schema:
            type: integer
        - name: month
          in: query
          required: true
          description: Only bookings for this month will be returned - must be provided with year
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved the report
          content:
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              schema:
                type: string
                format: binary
  /reports/lost-beds:
    get:
      tags:
        - Reports
      summary: Returns a spreadsheet listing all of the lost beds for the month
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only lost beds for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: probationRegionId
          in: query
          required: false
          description: If provided, only lost beds for this region will be returned (CAS2)
          schema:
            type: string
            format: uuid
        - name: year
          in: query
          required: true
          description: Only lost beds for this year will be returned
          schema:
            type: integer
        - name: month
          in: query
          required: true
          description: Only lost beds for this month will be returned - must be provided with year
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved the report
          content:
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              schema:
                type: string
                format: binary
  /reports/applications:
    get:
      tags:
        - Reports
      summary: Returns a spreadsheet listing all of the submitted applications for the month
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only applications for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: year
          in: query
          required: true
          description: Only applications for this year will be returned
          schema:
            type: integer
        - name: month
          in: query
          required: true
          description: Only applications for this month will be returned - must be provided with year
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved the report
          content:
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              schema:
                type: string
                format: binary
  /reports/referrals:
    get:
      tags:
        - Reports
      summary: Returns a spreadsheet listing all of the submitted referrals for the month and associated booking
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only applications for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: year
          in: query
          required: true
          description: Only referrals for this year will be returned
          schema:
            type: integer
        - name: month
          in: query
          required: true
          description: Only referrals for this month will be returned - must be provided with year
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved the report
          content:
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              schema:
                type: string
                format: binary
  /reports/referrals-by-tier:
    get:
      tags:
        - Reports
      summary: Returns a spreadsheet of referral metrics, grouped by tier.
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only metrics for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: year
          in: query
          required: true
          description: If provided, only bookings for this year will be returned
          schema:
            type: integer
        - name: month
          in: query
          required: true
          description: If provided, only bookings for this month will be returned - must be provided with year
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved the report
          content:
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              schema:
                type: string
                format: binary
  /reports/referrals-by-ap-type:
    get:
      tags:
        - Reports
      summary: Returns a spreadsheet of referral metrics, grouped by Ap Type.
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only metrics for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: year
          in: query
          required: true
          description: If provided, only bookings for this year will be returned
          schema:
            type: integer
        - name: month
          in: query
          required: true
          description: If provided, only bookings for this month will be returned - must be provided with year
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved the report
          content:
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              schema:
                type: string
                format: binary
  /reports/daily-metrics:
    get:
      tags:
        - Reports
      summary: Returns a spreadsheet of daily metrics for a given month/year.
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only metrics for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: year
          in: query
          required: true
          description: If provided, only bookings for this year will be returned
          schema:
            type: integer
        - name: month
          in: query
          required: true
          description: If provided, only bookings for this month will be returned - must be provided with year
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved the report
          content:
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              schema:
                type: string
                format: binary
  /reports/placement-metrics:
    get:
      tags:
        - Reports
      summary: Returns a spreadsheet of placement metrics for a given month/year.
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only metrics for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: year
          in: query
          required: true
          description: Only bookings for this year will be returned
          schema:
            type: integer
        - name: month
          in: query
          required: true
          description: Only metrics for this month will be returned
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved the report
          content:
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              schema:
                type: string
                format: binary
  /reports/placement-applications:
    get:
      tags:
        - Reports
      summary: Returns a spreadsheet of placement applications for a given month/year.
      parameters:
        - name: X-Service-Name
          in: header
          required: true
          description: Only metrics for this service will be returned
          schema:
            $ref: '#/components/schemas/ServiceName'
        - name: year
          in: query
          required: true
          description: Only placement applications for this year will be returned
          schema:
            type: integer
        - name: month
          in: query
          required: true
          description: Only placement applications for this month will be returned
          schema:
            type: integer
      responses:
        200:
          description: Successfully retrieved the report
          content:
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
              schema:
                type: string
                format: binary
components:
  responses:
    401Response:
      description: not authenticated
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Problem'
    403Response:
      description: unauthorised
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Problem'
    500Response:
      description: unexpected error
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Problem'
  headers:
    X-Pagination-CurrentPage:
      schema:
        type: integer
      description: The current page number
    X-Pagination-TotalPages:
      schema:
        type: integer
      description: The total number of pages
    X-Pagination-TotalResults:
      schema:
        type: integer
      description: The total number of results
    X-Pagination-PageSize:
      schema:
        type: integer
      description: The size of each page
  schemas:
    Premises:
      type: object
      properties:
        service:
          type: string
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Hope House
        addressLine1:
          type: string
          example: one something street
        addressLine2:
          type: string
          example: Blackmore End
        town:
          type: string
          example: Braintree
        postcode:
          type: string
          example: LS1 3AD
        bedCount:
          type: integer
          example: 22
        availableBedsForToday:
          type: integer
          example: 20
        notes:
          type: string
          example: some notes about this property
        probationRegion:
          $ref: '#/components/schemas/ProbationRegion'
        apArea:
          $ref: '#/components/schemas/ApArea'
        localAuthorityArea:
          $ref: '#/components/schemas/LocalAuthorityArea'
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/Characteristic'
        status:
          $ref: '#/components/schemas/PropertyStatus'
      discriminator:
        propertyName: service
        mapping:
          CAS1: '#/components/schemas/ApprovedPremises'
          CAS3: '#/components/schemas/TemporaryAccommodationPremises'
      required:
        - service
        - id
        - name
        - addressLine1
        - postcode
        - bedCount
        - availableBedsForToday
        - probationRegion
        - apArea
        - status
    PremisesSummary:
      type: object
      properties:
        service:
          type: string
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Hope House
        addressLine1:
          type: string
          example: one something street
        addressLine2:
          type: string
          example: Blackmore End
        postcode:
          type: string
          example: LS1 3AD
        bedCount:
          type: integer
          example: 22
        status:
          $ref: '#/components/schemas/PropertyStatus'
      discriminator:
        propertyName: service
        mapping:
          CAS1: '#/components/schemas/ApprovedPremisesSummary'
          CAS3: '#/components/schemas/TemporaryAccommodationPremisesSummary'
      required:
        - service
        - id
        - name
        - addressLine1
        - postcode
        - bedCount
        - status
    ApprovedPremises:
      allOf:
        - $ref: '#/components/schemas/Premises'
        - type: object
          properties:
            apCode:
              type: string
              example: NEHOPE1
      required:
        - apCode
        - localAuthorityArea
    TemporaryAccommodationPremises:
      allOf:
        - $ref: '#/components/schemas/Premises'
        - type: object
          properties:
            pdu:
              type: string
            probationDeliveryUnit:
              $ref: '#/components/schemas/ProbationDeliveryUnit'
            turnaroundWorkingDayCount:
              type: integer
              example: 2
      required:
        - pdu
    ApprovedPremisesSummary:
      allOf:
        - $ref: '#/components/schemas/PremisesSummary'
        - type: object
          properties:
            apCode:
              type: string
              example: NEHOPE1
            probationRegion:
              type: string
            apArea:
              type: string
      required:
        - apCode
        - probationRegion
        - apArea
    TemporaryAccommodationPremisesSummary:
      allOf:
        - $ref: '#/components/schemas/PremisesSummary'
        - type: object
          properties:
            pdu:
              type: string
            localAuthorityAreaName:
              type: string
      required:
        - pdu
    NewPremises:
      type: object
      properties:
        name:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        town:
          type: string
        postcode:
          type: string
        notes:
          type: string
          example: some notes about this property
        localAuthorityAreaId:
          type: string
          format: uuid
        probationRegionId:
          type: string
          format: uuid
        characteristicIds:
          type: array
          items:
            type: string
            format: uuid
        status:
          $ref: '#/components/schemas/PropertyStatus'
        pdu:
          type: string
        probationDeliveryUnitId:
          type: string
          format: uuid
        turnaroundWorkingDayCount:
          type: integer
      required:
        - name
        - addressLine1
        - postcode
        - probationRegionId
        - characteristicIds
        - status
    TaskWrapper:
      type: object
      properties:
        task:
          $ref: '#/components/schemas/Task'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserWithWorkload'
      required:
        - task
        - users
    Task:
      type: object
      properties:
        taskType:
          $ref: '#/components/schemas/TaskType'
        id:
          type: string
          format: uuid
          example: 6abb5fa3-e93f-4445-887b-30d081688f44
        applicationId:
          type: string
          format: uuid
          example: 6abb5fa3-e93f-4445-887b-30d081688f44
        personName:
          type: string
        crn:
          type: string
        dueDate:
          type: string
          format: date
        allocatedToStaffMember:
          $ref: '#/components/schemas/ApprovedPremisesUser'
        status:
          $ref: '#/components/schemas/TaskStatus'
      discriminator:
        propertyName: taskType
        mapping:
          Assessment: '#/components/schemas/AssessmentTask'
          PlacementRequest: '#/components/schemas/PlacementRequestTask'
          PlacementApplication: '#/components/schemas/PlacementApplicationTask'
          BookingAppeal: '#/components/schemas/BookingAppealTask'
      required:
        - id
        - taskType
        - applicationId
        - personName
        - dueDate
        - status
        - crn
    TaskStatus:
      type: string
      enum:
        - not_started
        - in_progress
        - complete
    TaskSortField:
      type: string
      enum:
        - createdAt
    AssessmentTask:
      allOf:
        - $ref: '#/components/schemas/Task'
    PlacementRequestTask:
      allOf:
        - $ref: '#/components/schemas/Task'
        - $ref: '#/components/schemas/PlacementDates'
        - type: object
          properties:
            tier:
              $ref: '#/components/schemas/RiskTierEnvelope'
            releaseType:
              $ref: '#/components/schemas/ReleaseTypeOption'
            placementRequestStatus:
              $ref: '#/components/schemas/PlacementRequestStatus'
          required:
            - tier
            - releaseType
            - placementRequestStatus
    PlacementApplicationTask:
      allOf:
        - $ref: '#/components/schemas/Task'
        - type: object
          properties:
            tier:
              $ref: '#/components/schemas/RiskTierEnvelope'
            releaseType:
              $ref: '#/components/schemas/ReleaseTypeOption'
            placementType:
              $ref: '#/components/schemas/PlacementType'
            placementDates:
              type: array
              items:
                $ref: '#/components/schemas/PlacementDates'
          required:
            - id
            - tier
            - releaseType
            - placementType
    BookingAppealTask:
      allOf:
        - $ref: '#/components/schemas/Task'
    TaskType:
      type: string
      enum:
        - Assessment
        - PlacementRequest
        - PlacementApplication
        - BookingAppeal
    LocalAuthorityArea:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 6abb5fa3-e93f-4445-887b-30d081688f44
        identifier:
          type: string
          example: LEEDS
        name:
          type: string
          example: Leeds City Council
      required:
        - id
        - identifier
        - name
    ApArea:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: cd1c2d43-0b0b-4438-b0e3-d4424e61fb6a
        identifier:
          type: string
          example: LON
        name:
          type: string
          example: Yorkshire & The Humber
      required:
        - id
        - identifier
        - name
    ProbationRegion:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 952790c0-21d7-4fd6-a7e1-9018f08d8bb0
        name:
          type: string
          example: NPS North East Central Referrals
      required:
        - id
        - name
    Characteristic:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 952790c0-21d7-4fd6-a7e1-9018f08d8bb0
        name:
          type: string
          example: Is this premises catered (rather than self-catered)?
        propertyName:
          type: string
          example: isCatered
        serviceScope:
          type: string
          enum:
            - approved-premises
            - temporary-accommodation
            - "*"
        modelScope:
          type: string
          enum:
            - premises
            - room
            - "*"
      required:
        - id
        - name
        - serviceScope
        - modelScope
    BookingBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
        person:
          $ref: '#/components/schemas/Person'
        arrivalDate:
          type: string
          format: date
        originalArrivalDate:
          type: string
          format: date
        departureDate:
          type: string
          format: date
        originalDepartureDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        keyWorker:
          $ref: '#/components/schemas/StaffMember'
        serviceName:
          $ref: '#/components/schemas/ServiceName'
        bed:
          $ref: '#/components/schemas/Bed'
      required:
        - id
        - person
        - arrivalDate
        - originalArrivalDate
        - departureDate
        - originalDepartureDate
        - createdAt
        - serviceName
    NewBooking:
      type: object
      properties:
        crn:
          type: string
          example: A123456
        arrivalDate:
          type: string
          format: date
          example: 2022-07-28
        departureDate:
          type: string
          format: date
          example: 2022-09-30
        bedId:
          type: string
          format: uuid
        serviceName:
          $ref: '#/components/schemas/ServiceName'
        enableTurnarounds:
          type: boolean
        assessmentId:
          type: string
          format: uuid
        eventNumber:
          type: string
      required:
        - crn
        - arrivalDate
        - departureDate
        - serviceName
    NewPlacementRequestBooking:
      type: object
      properties:
        arrivalDate:
          type: string
          format: date
          example: 2022-07-28
        departureDate:
          type: string
          format: date
          example: 2022-09-30
        bedId:
          type: string
          format: uuid
        premisesId:
          type: string
          format: uuid
      required:
        - arrivalDate
        - departureDate
    Booking:
      allOf:
        - $ref: '#/components/schemas/BookingBody'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/BookingStatus'
            extensions:
              type: array
              items:
                $ref: '#/components/schemas/Extension'
            arrival:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Arrival'
            departure:
              description: The latest version of the departure, if it exists
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Departure'
            departures:
              description: The full history of the departure
              type: array
              items:
                $ref: '#/components/schemas/Departure'
            nonArrival:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Nonarrival'
            cancellation:
              description: The latest version of the cancellation, if it exists
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Cancellation'
            cancellations:
              description: The full history of the cancellation
              type: array
              items:
                $ref: '#/components/schemas/Cancellation'
            confirmation:
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Confirmation'
            turnaround:
              description: The latest version of the turnaround, if it exists
              nullable: true
              allOf:
                - $ref: '#/components/schemas/Turnaround'
            turnarounds:
              description: The full history of turnarounds
              type: array
              items:
                $ref: '#/components/schemas/Turnaround'
            turnaroundStartDate:
              type: string
              format: date
            effectiveEndDate:
              type: string
              format: date
            applicationId:
              type: string
              format: uuid
            assessmentId:
              type: string
              format: uuid
          required:
            - status
            - extensions
            - departures
            - cancellations
    ExtendedPremisesSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        apCode:
          type: string
        postcode:
          type: string
        bedCount:
          type: integer
        availableBedsForToday:
          type: integer
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/PremisesBooking'
        dateCapacities:
          type: array
          items:
            $ref: '#/components/schemas/DateCapacity'
    PremisesBooking:
      type: object
      properties:
        id:
          type: string
          format: uuid
        arrivalDate:
          type: string
          format: date
        departureDate:
          type: string
          format: date
        person:
          $ref: '#/components/schemas/Person'
        bed:
          $ref: '#/components/schemas/Bed'
        status:
          $ref: '#/components/schemas/BookingStatus'
    BookingSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        premisesId:
          type: string
          format: uuid
        premisesName:
          type: string
        arrivalDate:
          type: string
          format: date
        departureDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - premisesId
        - premisesName
        - arrivalDate
        - departureDate
        - createdAt
    Person:
      type: object
      properties:
        crn:
          type: string
        type:
          $ref: '#/components/schemas/PersonType'
      discriminator:
        propertyName: type
        mapping:
          FullPerson: '#/components/schemas/FullPerson'
          RestrictedPerson: '#/components/schemas/RestrictedPerson'
          UnknownPerson: '#/components/schemas/FullPerson'
      required:
        - crn
        - type
    UnknownPerson:
      allOf:
        - $ref: '#/components/schemas/Person'
    RestrictedPerson:
      allOf:
        - $ref: '#/components/schemas/Person'
    FullPerson:
      allOf:
        - $ref: '#/components/schemas/Person'
        - type: object
          properties:
            name:
              type: string
            dateOfBirth:
              type: string
              format: date
            nomsNumber:
              type: string
            pncNumber:
              type: string
            ethnicity:
              type: string
            nationality:
              type: string
            religionOrBelief:
              type: string
            sex:
              type: string
            genderIdentity:
              type: string
            status:
              $ref: '#/components/schemas/PersonStatus'
            prisonName:
              type: string
            isRestricted:
              type: boolean
          required:
            - name
            - dateOfBirth
            - sex
            - status
    PersonStatus:
      type: string
      enum:
        - InCustody
        - InCommunity
        - Unknown
    NewArrival:
      type: object
      properties:
        type:
          type: string
        expectedDepartureDate:
          type: string
          format: date
        notes:
          type: string
        keyWorkerStaffCode:
          type: string
      required:
        - type
        - expectedDepartureDate
      discriminator:
        propertyName: type
        mapping:
          CAS1: '#/components/schemas/NewCas1Arrival'
          CAS2: '#/components/schemas/NewCas2Arrival'
          CAS3: '#/components/schemas/NewCas3Arrival'
    NewCas1Arrival:
      allOf:
        - $ref: '#/components/schemas/NewArrival'
        - type: object
          properties:
            arrivalDateTime:
              type: string
              format: date-time
          required:
            - arrivalDateTime
    NewCas2Arrival:
      allOf:
        - $ref: '#/components/schemas/NewArrival'
        - type: object
          properties:
            arrivalDate:
              type: string
              format: date
          required:
            - arrivalDate
    NewCas3Arrival:
      allOf:
        - $ref: '#/components/schemas/NewArrival'
        - type: object
          properties:
            arrivalDate:
              type: string
              format: date
          required:
            - arrivalDate
    Arrival:
      type: object
      properties:
        expectedDepartureDate:
          type: string
          format: date
        arrivalDate:
          type: string
          format: date
        arrivalTime:
          type: string
          format: time
        notes:
          type: string
        keyWorkerStaffCode:
          type: string
        bookingId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
      required:
        - type
        - bookingId
        - expectedDepartureDate
        - createdAt
        - arrivalDate
        - arrivalTime
    Nonarrival:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        date:
          type: string
          format: date
        reason:
          $ref: '#/components/schemas/NonArrivalReason'
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - bookingId
        - date
        - reason
        - createdAt
    NewNonarrival:
      type: object
      properties:
        date:
          type: string
          format: date
        reason:
          type: string
          format: uuid
        notes:
          type: string
      required:
        - date
        - reason
    NewCancellation:
      type: object
      properties:
        date:
          type: string
          format: date
        reason:
          type: string
          format: uuid
        notes:
          type: string
      required:
        - bookingId
        - date
        - reason
    NewWithdrawal:
      type: object
      properties:
        reason:
          $ref: '#/components/schemas/WithdrawalReason'
        otherReason:
          type: string
      required:
        - reason
    Cancellation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        date:
          type: string
          format: date
        reason:
          $ref: '#/components/schemas/CancellationReason'
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        premisesName:
          type: string
      required:
        - bookingId
        - date
        - reason
        - createdAt
        - premisesName
    Extension:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        previousDepartureDate:
          type: string
          format: date
        newDepartureDate:
          type: string
          format: date
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - bookingId
        - previousDepartureDate
        - newDepartureDate
        - createdAt
    NewExtension:
      type: object
      properties:
        newDepartureDate:
          type: string
          format: date
        notes:
          type: string
      required:
        - newDepartureDate
    DateChange:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        previousArrivalDate:
          type: string
          format: date
        newArrivalDate:
          type: string
          format: date
        previousDepartureDate:
          type: string
          format: date
        newDepartureDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - bookingId
        - previousArrivalDate
        - newArrivalDate
        - previousDepartureDate
        - newDepartureDate
        - createdAt
    NewDateChange:
      type: object
      properties:
        newArrivalDate:
          type: string
          format: date
        newDepartureDate:
          type: string
          format: date
    NewDeparture:
      type: object
      properties:
        dateTime:
          type: string
          format: date-time
        reasonId:
          type: string
          format: uuid
        notes:
          type: string
        moveOnCategoryId:
          type: string
          format: uuid
        destinationProviderId:
          type: string
          format: uuid
      required:
        - dateTime
        - reasonId
        - moveOnCategoryId
    Departure:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
        reason:
          $ref: '#/components/schemas/DepartureReason'
        notes:
          type: string
        moveOnCategory:
          $ref: '#/components/schemas/MoveOnCategory'
        destinationProvider:
          $ref: '#/components/schemas/DestinationProvider'
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - bookingId
        - dateTime
        - reason
        - moveOnCategory
        - createdAt
    Confirmation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - bookingId
        - dateTime
        - createdAt
    NewConfirmation:
      type: object
      properties:
        notes:
          type: string
    Turnaround:
      type: object
      properties:
        id:
          type: string
          format: uuid
        bookingId:
          type: string
          format: uuid
        workingDays:
          type: integer
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - bookingId
        - workingDays
        - createdAt
    NewTurnaround:
      type: object
      properties:
        workingDays:
          type: integer
      required:
        - workingDays
    Problem:
      type: object
      properties:
        type:
          type: string
          example: https://example.net/validation-error
        title:
          type: string
          example: Invalid request parameters
        status:
          type: integer
          example: 400
        detail:
          type: string
          example: You provided invalid request parameters
        instance:
          type: string
          example: f7493e12-546d-42c3-b838-06c12671ab5b
    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Problem'
        - type: object
          properties:
            invalid-params:
              type: array
              items:
                $ref: '#/components/schemas/InvalidParam'
    InvalidParam:
      type: object
      properties:
        propertyName:
          type: string
          example: arrivalDate
        errorType:
          type: string
    LostBed:
      type: object
      properties:
        id:
          type: string
          format: uuid
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        bedId:
          type: string
          format: uuid
        bedName:
          type: string
        roomName:
          type: string
        reason:
          $ref: '#/components/schemas/LostBedReason'
        referenceNumber:
          type: string
        notes:
          type: string
        status:
          $ref: '#/components/schemas/LostBedStatus'
        cancellation:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/LostBedCancellation'
      required:
        - id
        - startDate
        - endDate
        - bedId
        - bedName
        - roomName
        - reason
        - status
    NewLostBed:
      type: object
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        reason:
          type: string
          format: uuid
        referenceNumber:
          type: string
        notes:
          type: string
        bedId:
          type: string
          format: uuid
      required:
        - startDate
        - endDate
        - reason
        - bedId
    UpdateLostBed:
      type: object
      properties:
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        reason:
          type: string
          format: uuid
        referenceNumber:
          type: string
        notes:
          type: string
      required:
        - startDate
        - endDate
        - reason
    LostBedCancellation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        notes:
          type: string
      required:
        - id
        - createdAt
    NewLostBedCancellation:
      type: object
      properties:
        notes:
          type: string
    LostBedStatus:
      type: string
      enum:
        - active
        - cancelled
    DepartureReason:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Admitted to Hospital
        serviceScope:
          type: string
        isActive:
          type: boolean
      required:
        - id
        - name
        - serviceScope
        - isActive
    MoveOnCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Housing Association - Rented
        serviceScope:
          type: string
        isActive:
          type: boolean
      required:
        - id
        - name
        - serviceScope
        - isActive
    DestinationProvider:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Ext - North East Region
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    SupervisingProvider:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: North East Region
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    SupervisingTeam:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: CP - Sheffield
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    SupervisingOfficer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Smith, John (PS - PO)
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    StaffMember:
      type: object
      properties:
        code:
          type: string
        keyWorker:
          type: boolean
        name:
          type: string
          example: Brown, James (PS - PSO)
      required:
        - code
        - keyWorker
        - name
    LostBedReason:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Double Room with Single Occupancy - Other (Non-FM)
        isActive:
          type: boolean
        serviceScope:
          type: string
      required:
        - id
        - name
        - isActive
        - serviceScope
    CancellationReason:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Recall
        isActive:
          type: boolean
        serviceScope:
          type: string
      required:
        - id
        - name
        - isActive
        - serviceScope
    NonArrivalReason:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: Recall
        isActive:
          type: boolean
      required:
        - id
        - name
        - isActive
    DateCapacity:
      type: object
      properties:
        date:
          type: string
          format: date
        availableBeds:
          type: integer
          example: 10
      required:
        - date
        - availableBeds
    PersonRisks:
      type: object
      properties:
        crn:
          type: string
        roshRisks:
          $ref: '#/components/schemas/RoshRisksEnvelope'
        mappa:
          $ref: '#/components/schemas/MappaEnvelope'
        tier:
          $ref: '#/components/schemas/RiskTierEnvelope'
        flags:
          $ref: '#/components/schemas/FlagsEnvelope'
      required:
        - crn
        - roshRisks
        - tier
        - flags
    RoshRisksEnvelope:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RiskEnvelopeStatus'
        value:
          $ref: '#/components/schemas/RoshRisks'
      required:
        - status
    RoshRisks:
      type: object
      properties:
        overallRisk:
          type: string
        riskToChildren:
          type: string
        riskToPublic:
          type: string
        riskToKnownAdult:
          type: string
        riskToStaff:
          type: string
        lastUpdated:
          type: string
          format: date
      required:
        - overallRisk
        - riskToChildren
        - riskToPublic
        - riskToKnownAdult
        - riskToStaff
    MappaEnvelope:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RiskEnvelopeStatus'
        value:
          $ref: '#/components/schemas/Mappa'
      required:
        - status
    Mappa:
      type: object
      properties:
        level:
          type: string
        lastUpdated:
          type: string
          format: date
      required:
        - level
        - lastUpdated
    RiskTierEnvelope:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RiskEnvelopeStatus'
        value:
          $ref: '#/components/schemas/RiskTier'
      required:
        - status
    RiskTier:
      type: object
      properties:
        level:
          type: string
        lastUpdated:
          type: string
          format: date
      required:
        - level
        - lastUpdated
    FlagsEnvelope:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/RiskEnvelopeStatus'
        value:
          type: array
          items:
            type: string
      required:
        - status
    RiskEnvelopeStatus:
      type: string
      enum:
        - retrieved
        - not_found
        - error
    PersonAcctAlert:
      type: object
      properties:
        alertId:
          type: integer
          format: int64
        comment:
          type: string
        dateCreated:
          type: string
          format: date
        dateExpires:
          type: string
          format: date
        expired:
          type: boolean
        active:
          type: boolean
      required:
        - alertId
        - dateCreated
        - expired
        - active
    Application:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
          format: uuid
        person:
          $ref: '#/components/schemas/Person'
        createdAt:
          type: string
          format: date-time
      discriminator:
        propertyName: type
        mapping:
          Offline: '#/components/schemas/OfflineApplication'
          CAS1: '#/components/schemas/ApprovedPremisesApplication'
          CAS2: '#/components/schemas/Cas2Application'
          CAS3: '#/components/schemas/TemporaryAccommodationApplication'
      required:
        - type
        - id
        - person
        - createdAt
    OfflineApplication:
      allOf:
        - $ref: '#/components/schemas/Application'
    ApprovedPremisesApplication:
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            isWomensApplication:
              type: boolean
            isPipeApplication:
              type: boolean
            isEmergencyApplication:
              type: boolean
            isEsapApplication:
              type: boolean
            arrivalDate:
              type: string
              format: date-time
            risks:
              $ref: '#/components/schemas/PersonRisks'
            createdByUserId:
              type: string
              format: uuid
            schemaVersion:
              type: string
              format: uuid
            outdatedSchema:
              type: boolean
            data:
              $ref: '#/components/schemas/AnyValue'
            document:
              $ref: '#/components/schemas/AnyValue'
            status:
              $ref: '#/components/schemas/ApprovedPremisesApplicationStatus'
            assessmentId:
              type: string
              format: uuid
            assessmentDecision:
              $ref: '#/components/schemas/AssessmentDecision'
            assessmentDecisionDate:
              type: string
              format: date
            submittedAt:
              type: string
              format: date-time
            personStatusOnSubmission:
              $ref: '#/components/schemas/PersonStatus'
          required:
            - createdByUserId
            - schemaVersion
            - outdatedSchema
            - status
    Cas2Application:
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            createdBy:
              $ref: '#/components/schemas/NomisUser'
            schemaVersion:
              type: string
              format: uuid
            outdatedSchema:
              type: boolean
            data:
              $ref: '#/components/schemas/AnyValue'
            document:
              $ref: '#/components/schemas/AnyValue'
            status:
              $ref: '#/components/schemas/ApplicationStatus'
            submittedAt:
              type: string
              format: date-time
            telephoneNumber:
              type: string
          required:
            - createdBy
            - schemaVersion
            - outdatedSchema
            - status
    Cas2SubmittedApplication:
      type: object
      properties:
        id:
          type: string
          format: uuid
        person:
          $ref: '#/components/schemas/Person'
        createdAt:
          type: string
          format: date-time
        submittedBy:
          $ref: '#/components/schemas/NomisUser'
        schemaVersion:
          type: string
          format: uuid
        outdatedSchema:
          type: boolean
        document:
          $ref: '#/components/schemas/AnyValue'
        submittedAt:
          type: string
          format: date-time
        statusUpdates:
          type: array
          items:
            $ref: '#/components/schemas/Cas2StatusUpdate'
        telephoneNumber:
          type: string
      required:
        - id
        - person
        - createdAt
        - createdBy
        - schemaVersion
        - outdatedSchema
        - status
    TemporaryAccommodationApplication:
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            createdByUserId:
              type: string
              format: uuid
            schemaVersion:
              type: string
              format: uuid
            outdatedSchema:
              type: boolean
            data:
              $ref: '#/components/schemas/AnyValue'
            document:
              $ref: '#/components/schemas/AnyValue'
            status:
              $ref: '#/components/schemas/ApplicationStatus'
            risks:
              $ref: '#/components/schemas/PersonRisks'
            submittedAt:
              type: string
              format: date-time
            arrivalDate:
              type: string
              format: date-time
            offenceId:
              type: string
          required:
            - createdByUserId
            - schemaVersion
            - outdatedSchema
            - status
            - offenceId
    ApplicationSummary:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
          format: uuid
        person:
          $ref: '#/components/schemas/Person'
        createdAt:
          type: string
          format: date-time
        submittedAt:
          type: string
          format: date-time
      discriminator:
        propertyName: type
        mapping:
          Offline: '#/components/schemas/OfflineApplicationSummary'
          CAS1: '#/components/schemas/ApprovedPremisesApplicationSummary'
          CAS2: '#/components/schemas/Cas2ApplicationSummary'
          CAS3: '#/components/schemas/TemporaryAccommodationApplicationSummary'
      required:
        - type
        - id
        - person
        - createdAt
    OfflineApplicationSummary:
      allOf:
        - $ref: '#/components/schemas/ApplicationSummary'
    ApprovedPremisesApplicationSummary:
      allOf:
        - $ref: '#/components/schemas/ApplicationSummary'
        - type: object
          properties:
            isWomensApplication:
              type: boolean
            isPipeApplication:
              type: boolean
            isEmergencyApplication:
              type: boolean
            isEsapApplication:
              type: boolean
            arrivalDate:
              type: string
              format: date-time
            risks:
              $ref: '#/components/schemas/PersonRisks'
            createdByUserId:
              type: string
              format: uuid
            status:
              $ref: '#/components/schemas/ApprovedPremisesApplicationStatus'
            tier:
              type: string
          required:
            - createdByUserId
            - status
    TemporaryAccommodationApplicationSummary:
      allOf:
        - $ref: '#/components/schemas/ApplicationSummary'
        - type: object
          properties:
            createdByUserId:
              type: string
              format: uuid
            status:
              $ref: '#/components/schemas/ApplicationStatus'
            risks:
              $ref: '#/components/schemas/PersonRisks'
          required:
            - createdByUserId
            - status
    Cas2ApplicationSummary:
      allOf:
        - $ref: '#/components/schemas/ApplicationSummary'
        - type: object
          properties:
            createdByUserId:
              type: string
              format: uuid
            status:
              $ref: '#/components/schemas/ApplicationStatus'
            risks:
              $ref: '#/components/schemas/PersonRisks'
          required:
            - createdByUserId
            - status
    Cas2ApplicationStatus:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'moreInfoRequested'
        label:
          type: string
          example: 'More information requested'
        description:
          type: string
          example: 'More information about the application has been requested from the POM (Prison Offender Manager).'
      required:
        - id
        - name
        - label
    Cas2ApplicationStatusUpdate:
      type: object
      properties:
        newStatus:
          type: string
          example: 'moreInfoRequired'
          description: 'The "name" of the new status to be applied'
      required:
        - newStatus
    Cas2SubmittedApplicationSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdByUserId:
          type: string
          format: uuid
        person:
          $ref: '#/components/schemas/Person'
        createdAt:
          type: string
          format: date-time
        submittedAt:
          type: string
          format: date-time
      required:
        - createdByUserId
        - status
        - id
        - person
        - createdAt
    Cas2StatusUpdate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'moreInfoRequested'
        label:
          type: string
          example: 'More information requested'
        description:
          type: string
          example: 'More information about the application has been requested from the POM (Prison Offender Manager).'
        updatedBy:
          $ref: '#/components/schemas/ExternalUser'
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - label
        - description
    ApplicationStatus:
      type: string
      enum:
        - inProgress
        - submitted
        - requestedFurtherInformation
        - pending
        - rejected
        - awaitingPlacement
        - placed
        - inapplicable
        - withdrawn
    ApprovedPremisesApplicationStatus:
      type: string
      enum:
        - started
        - submitted
        - rejected
        - awaitingAssesment
        - unallocatedAssesment
        - assesmentInProgress
        - awaitingPlacement
        - placementAllocated
        - inapplicable
        - withdrawn
        - requestedFurtherInformation
        - pendingPlacementRequest
    AnyValue:
      description: Any object that conforms to the current JSON schema for an application
    ApplicationTimelineNote:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdByUser:
          $ref: '#/components/schemas/User'
        note:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - createdByUserId
        - note
      description: Notes added to an application
    NewApplicationTimelineNote:
      type: object
      properties:
        note:
          type: string
      required:
        - note
      description: A note to add to an application
    NewApplication:
      type: object
      properties:
        crn:
          type: string
        convictionId:
          type: integer
          format: int64
          example: 1502724704
        deliusEventNumber:
          type: string
          example: "7"
        offenceId:
          type: string
          example: "M1502750438"
      required:
        - crn
    UpdateApplicationType:
      type: string
      enum:
        - CAS1
        - CAS2
        - CAS3
      x-enum-varnames:
        - CAS1
        - CAS2
        - CAS3
    UpdateApplication:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/UpdateApplicationType'
        data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
      discriminator:
        propertyName: type
        mapping:
          CAS1: '#/components/schemas/UpdateApprovedPremisesApplication'
          CAS2: '#/components/schemas/UpdateCas2Application'
          CAS3: '#/components/schemas/UpdateTemporaryAccommodationApplication'
      required:
        - type
        - data
    UpdateCas2Application:
      allOf:
        - $ref: '#/components/schemas/UpdateApplication'
    UpdateApprovedPremisesApplication:
      allOf:
        - $ref: '#/components/schemas/UpdateApplication'
        - type: object
          properties:
            isInapplicable:
              type: boolean
            isWomensApplication:
              type: boolean
            isPipeApplication:
              type: boolean
            isEmergencyApplication:
              type: boolean
            isEsapApplication:
              type: boolean
            targetLocation:
              type: string
            releaseType:
              $ref: '#/components/schemas/ReleaseTypeOption'
            arrivalDate:
              type: string
              format: date
    UpdateTemporaryAccommodationApplication:
      allOf:
        - $ref: '#/components/schemas/UpdateApplication'
    SubmitApplication:
      type: object
      properties:
        type:
          type: string
        translatedDocument:
          $ref: '#/components/schemas/AnyValue'
      discriminator:
        propertyName: type
        mapping:
          CAS1: '#/components/schemas/SubmitApprovedPremisesApplication'
          CAS3: '#/components/schemas/SubmitTemporaryAccommodationApplication'
          CAS2: '#/components/schemas/SubmitCas2Application'
      required:
        - type
        - translatedDocument
    SubmitApprovedPremisesApplication:
      allOf:
        - $ref: '#/components/schemas/SubmitApplication'
        - type: object
          properties:
            isPipeApplication:
              type: boolean
            isWomensApplication:
              type: boolean
            isEmergencyApplication:
              type: boolean
            isEsapApplication:
              type: boolean
            targetLocation:
              type: string
            releaseType:
              $ref: '#/components/schemas/ReleaseTypeOption'
            sentenceType:
              $ref: '#/components/schemas/SentenceTypeOption'
            situation:
              $ref: '#/components/schemas/SituationOption'
            arrivalDate:
              type: string
              format: date
            apAreaId:
              type: string
              format: uuid
          required:
            - isPipeApplication
            - isWomensApplication
            - isEmergencyApplication
            - isEsapApplication
            - targetLocation
            - releaseType
            - sentenceType
    SubmitCas2Application:
      type: object
      properties:
        translatedDocument:
          $ref: '#/components/schemas/AnyValue'
        applicationId:
          type: string
          format: uuid
          description: Id of the application being submitted
        preferredAreas:
          type: string
          description: First and second preferences for where the accommodation should be located, pipe-separated
          example: 'Leeds | Bradford'
        hdcEligibilityDate:
          type: string
          example: '2023-03-30'
          format: date
        conditionalReleaseDate:
          type: string
          example: '2023-04-30'
          format: date
        telephoneNumber:
          type: string
      required:
        - translatedDocument
        - applicationId
        - telephoneNumber
    SubmitTemporaryAccommodationApplication:
      allOf:
        - $ref: '#/components/schemas/SubmitApplication'
        - type: object
          properties:
            arrivalDate:
              type: string
              format: date
            isRegisteredSexOffender:
              type: boolean
            needsAccessibleProperty:
              type: boolean
            hasHistoryOfArson:
              type: boolean
            isDutyToReferSubmitted:
              type: boolean
            dutyToReferSubmissionDate:
              type: string
              format: date
            isApplicationEligible:
              type: boolean
            eligibilityReason:
              type: string
            dutyToReferLocalAuthorityAreaName:
              type: string
            summaryData:
              $ref: '#/components/schemas/AnyValue'
          required:
            - arrivalDate
            - summaryData
    ReleaseTypeOption:
      type: string
      enum:
        - licence
        - rotl
        - hdc
        - pss
        - in_community
        - not_applicable
        - extendedDeterminateLicence
        - paroleDirectedLicence
    SentenceTypeOption:
      type: string
      enum:
        - standardDeterminate
        - life
        - ipp
        - extendedDeterminate
        - communityOrder
        - bailPlacement
        - nonStatutory
    SituationOption:
      type: string
      enum:
        - riskManagement
        - residencyManagement
        - bailAssessment
        - bailSentence
    PrisonCaseNote:
      type: object
      properties:
        id:
          type: string
        sensitive:
          type: boolean
        createdAt:
          type: string
          format: date-time
        occurredAt:
          type: string
          format: date-time
        authorName:
          type: string
        type:
          type: string
        subType:
          type: string
        note:
          type: string
      required:
        - id
        - sensitive
        - createdAt
        - occurredAt
        - authorName
        - type
        - subType
        - note
    Adjudication:
      type: object
      properties:
        id:
          type: integer
          format: int64
        reportedAt:
          type: string
          format: date-time
        establishment:
          type: string
        offenceDescription:
          type: string
          example: "Wounding or inflicting grievous bodily harm (inflicting bodily injury with or without weapon) (S20) - 00801"
        hearingHeld:
          type: boolean
        finding:
          type: string
      required:
        - id
        - reportedAt
        - establishment
        - offenceDescription
        - hearingHeld
    Assessment:
      type: object
      properties:
        service:
          type: string
        id:
          type: string
          format: uuid
        schemaVersion:
          type: string
          format: uuid
        outdatedSchema:
          type: boolean
        createdAt:
          type: string
          format: date-time
        allocatedAt:
          type: string
          format: date-time
        submittedAt:
          type: string
          format: date-time
        decision:
          $ref: '#/components/schemas/AssessmentDecision'
        rejectionRationale:
          type: string
        data:
          $ref: '#/components/schemas/AnyValue'
        clarificationNotes:
          type: array
          items:
            $ref: '#/components/schemas/ClarificationNote'
        referralHistoryNotes:
          type: array
          items:
            $ref: '#/components/schemas/ReferralHistoryNote'
      discriminator:
        propertyName: service
        mapping:
          CAS1: '#/components/schemas/ApprovedPremisesAssessment'
          CAS3: '#/components/schemas/TemporaryAccommodationAssessment'
      required:
        - service
        - id
        - allocatedToUser
        - schemaVersion
        - outdatedSchema
        - createdAt
        - clarificationNotes
    AssessmentStatus:
      type: string
      enum:
        - awaiting_response
        - completed
        - reallocated
        - in_progress
        - not_started
        - unallocated
        - in_review
        - ready_to_place
        - closed
        - rejected
      x-enum-varnames:
        - cas1AwaitingResponse
        - cas1Completed
        - cas1Reallocated
        - cas1InProgress
        - cas1NotStarted
        - cas3Unallocated
        - cas3InReview
        - cas3ReadyToPlace
        - cas3Closed
        - cas3Rejected
    ApprovedPremisesAssessmentStatus:
      type: string
      enum:
        - awaiting_response
        - completed
        - reallocated
        - in_progress
        - not_started
    TemporaryAccommodationAssessmentStatus:
      type: string
      enum:
        - unallocated
        - in_review
        - ready_to_place
        - closed
        - rejected
    ApprovedPremisesAssessment:
      allOf:
        - $ref: '#/components/schemas/Assessment'
        - type: object
          properties:
            application:
              $ref: '#/components/schemas/ApprovedPremisesApplication'
            allocatedToStaffMember:
              $ref: '#/components/schemas/ApprovedPremisesUser'
            status:
              $ref: '#/components/schemas/ApprovedPremisesAssessmentStatus'
          required:
            - application
    TemporaryAccommodationAssessment:
      allOf:
        - $ref: '#/components/schemas/Assessment'
        - type: object
          properties:
            application:
              $ref: '#/components/schemas/TemporaryAccommodationApplication'
            allocatedToStaffMember:
              $ref: '#/components/schemas/TemporaryAccommodationUser'
            status:
              $ref: '#/components/schemas/TemporaryAccommodationAssessmentStatus'
            summaryData:
              $ref: '#/components/schemas/AnyValue'
          required:
            - application
            - summaryData
    AssessmentSummary:
      type: object
      properties:
        type:
          type: string
        id:
          type: string
          format: uuid
        applicationId:
          type: string
          format: uuid
        arrivalDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        dateOfInfoRequest:
          type: string
          format: date-time
        decision:
          $ref: '#/components/schemas/AssessmentDecision'
        risks:
          $ref: '#/components/schemas/PersonRisks'
        person:
          $ref: '#/components/schemas/Person'
      required:
        - type
        - id
        - applicationId
        - createdAt
        - person
      discriminator:
        propertyName: type
        mapping:
          CAS1: '#/components/schemas/ApprovedPremisesAssessmentSummary'
          CAS3: '#/components/schemas/TemporaryAccommodationAssessmentSummary'
    ApprovedPremisesAssessmentSummary:
      allOf:
        - $ref: '#/components/schemas/AssessmentSummary'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/ApprovedPremisesAssessmentStatus'
          required:
            - status
    TemporaryAccommodationAssessmentSummary:
      allOf:
        - $ref: '#/components/schemas/AssessmentSummary'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/TemporaryAccommodationAssessmentStatus'
          required:
            - status
    AssessmentSortField:
      type: string
      enum:
        - name
        - crn
        - arrivalDate
        - status
        - createdAt
      x-enum-varnames:
        - personName
        - personCrn
        - assessmentArrivalDate
        - assessmentStatus
        - assessmentCreatedAt
    AssessmentDecision:
      type: string
      enum:
        - accepted
        - rejected
    UpdatePremises:
      type: object
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        town:
          type: string
        postcode:
          type: string
        notes:
          type: string
        localAuthorityAreaId:
          type: string
          format: uuid
        probationRegionId:
          type: string
          format: uuid
        characteristicIds:
          type: array
          items:
            type: string
            format: uuid
        status:
          $ref: '#/components/schemas/PropertyStatus'
        pdu:
          type: string
        probationDeliveryUnitId:
          type: string
          format: uuid
        turnaroundWorkingDayCount:
          type: integer
        name:
          type: string
      required:
        - addressLine1
        - postcode
        - probationRegionId
        - characteristicIds
        - status
    UpdateAssessment:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
      required:
        - data
    AssessmentAcceptance:
      type: object
      properties:
        document:
          $ref: '#/components/schemas/AnyValue'
        requirements:
          $ref: '#/components/schemas/PlacementRequirements'
        placementDates:
          $ref: '#/components/schemas/PlacementDates'
        notes:
          type: string
      required:
        - document
    AssessmentRejection:
      type: object
      properties:
        document:
          $ref: '#/components/schemas/AnyValue'
        rejectionRationale:
          type: string
      required:
        - document
        - rejectionRationale
    ClarificationNote:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        responseReceivedOn:
          type: string
          format: date
        createdByStaffMemberId:
          type: string
          format: uuid
        query:
          type: string
        response:
          type: string
      required:
        - id
        - createdAt
        - createdByStaffMemberId
        - query
    UpdatedClarificationNote:
      type: object
      properties:
        response:
          type: string
        responseReceivedOn:
          type: string
          format: date
          example: 2022-07-28
      required:
        - response
        - responseReceivedOn
    NewClarificationNote:
      type: object
      properties:
        query:
          type: string
      required:
        - query
    ReferralHistoryNote:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        message:
          type: string
        createdByUserName:
          type: string
        type:
          type: string
      required:
        - id
        - createdAt
        - message
        - createdByUserName
        - type
      discriminator:
        propertyName: type
        mapping:
          user: '#/components/schemas/ReferralHistoryUserNote'
          system: '#/components/schemas/ReferralHistorySystemNote'
    ReferralHistoryUserNote:
      allOf:
        - $ref: '#/components/schemas/ReferralHistoryNote'
    ReferralHistorySystemNote:
      allOf:
        - $ref: '#/components/schemas/ReferralHistoryNote'
        - type: object
          properties:
            category:
              type: string
              enum:
                - submitted
                - unallocated
                - in_review
                - ready_to_place
                - rejected
                - completed
          required:
            - category
    NewReferralHistoryUserNote:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    NewReallocation:
      type: object
      properties:
        userId:
          type: string
          format: uuid
    Reallocation:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/ApprovedPremisesUser'
        taskType:
          $ref: '#/components/schemas/TaskType'
      required:
        - user
        - taskType
    ExternalUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          example: 'CAS2_ASSESSOR_USER'
        name:
          type: string
          example: 'Roger Smith'
        email:
          type: string
          example: 'roger@external.example.com'
        origin:
          type: string
          example: 'NACRO'
      required:
        - id
        - username
        - name
        - email
    NomisUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: 'Roger Smith'
        nomisUsername:
          type: string
          example: 'SMITHR_GEN'
        email:
          type: string
          example: 'Roger.Smith@justice.gov.uk'
        isActive:
          type: boolean
          example: true
      required:
        - id
        - name
        - nomisUsername
        - isActive
    User:
      type: object
      properties:
        service:
          type: string
        id:
          type: string
          format: uuid
        name:
          type: string
        deliusUsername:
          type: string
        email:
          type: string
        telephoneNumber:
          type: string
        isActive:
          type: boolean
        region:
          $ref: '#/components/schemas/ProbationRegion'
      discriminator:
        propertyName: service
        mapping:
          CAS1: '#/components/schemas/ApprovedPremisesUser'
          CAS3: '#/components/schemas/TemporaryAccommodationUser'
      required:
        - service
        - id
        - name
        - deliusUsername
        - region
    UserWithWorkload:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            numTasksPending:
              type: integer
            numTasksCompleted7Days:
              type: integer
            numTasksCompleted30Days:
              type: integer
            qualifications:
              type: array
              items:
                $ref: '#/components/schemas/UserQualification'
            roles:
              type: array
              items:
                $ref: '#/components/schemas/ApprovedPremisesUserRole'
    ApprovedPremisesUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            qualifications:
              type: array
              items:
                $ref: '#/components/schemas/UserQualification'
            roles:
              type: array
              items:
                $ref: '#/components/schemas/ApprovedPremisesUserRole'
            apArea:
              $ref: '#/components/schemas/ApArea'
          required:
            - qualifications
            - roles
            - apArea
    UserRolesAndQualifications:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/ApprovedPremisesUserRole'
        qualifications:
          type: array
          items:
            $ref: '#/components/schemas/UserQualification'
      required:
        - roles
        - qualifications
    TemporaryAccommodationUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            roles:
              type: array
              items:
                $ref: '#/components/schemas/TemporaryAccommodationUserRole'
          required:
            - roles
    ApprovedPremisesUserRole:
      type: string
      enum:
        - assessor
        - matcher
        - manager
        - workflow_manager
        - applicant
        - role_admin
        - report_viewer
        - excluded_from_assess_allocation
        - excluded_from_match_allocation
        - excluded_from_placement_application_allocation
    TemporaryAccommodationUserRole:
      type: string
      enum:
        - assessor
        - referrer
        - reporter
    UserQualification:
      type: string
      enum:
        - womens
        - pipe
        - lao
        - emergency
        - esap
    ServiceName:
      type: string
      enum:
        - approved-premises
        - cas2
        - temporary-accommodation
      x-enum-varnames:
        - approvedPremises
        - cas2
        - temporaryAccommodation
    NewRoom:
      type: object
      properties:
        name:
          type: string
        notes:
          type: string
        characteristicIds:
          type: array
          items:
            type: string
            format: uuid
      required:
        - name
        - characteristicIds
    UpdateRoom:
      type: object
      properties:
        notes:
          type: string
        characteristicIds:
          type: array
          items:
            type: string
            format: uuid
        name:
          type: string
      required:
        - characteristicIds
    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        code:
          type: string
          example: NEABC-4
        notes:
          type: string
        beds:
          type: array
          items:
            $ref: '#/components/schemas/Bed'
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/Characteristic'
      required:
        - id
        - name
        - characteristics
    Bed:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        code:
          type: string
          example: NEABC04
      required:
        - id
        - name
    BedSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        roomName:
          type: string
        status:
          $ref: '#/components/schemas/BedStatus'
      required:
        - id
        - name
        - roomName
        - status
    BedDetail:
      allOf:
        - $ref: '#/components/schemas/BedSummary'
        - type: object
          properties:
            characteristics:
              type: array
              items:
                type: object
                $ref: '#/components/schemas/CharacteristicPair'
          required:
            - characteristics
    BedStatus:
      type: string
      enum:
        - occupied
        - available
        - out_of_service
    PropertyStatus:
      type: string
      enum:
        - pending
        - active
        - archived
    OASysAssessmentId:
      description: The ID of assessment being used. This should always be the latest Layer 3 assessment, regardless of state.
      type: integer
      format: int64
      example: 138985987
    OASysSupportingInformationQuestion:
      type: object
      properties:
        label:
          type: string
        sectionNumber:
          type: integer
        questionNumber:
          type: string
        linkedToHarm:
          type: boolean
        linkedToReOffending:
          type: boolean
        answer:
          type: string
      required:
        - label
        - questionNumber
    OASysQuestion:
      type: object
      properties:
        label:
          type: string
        questionNumber:
          type: string
        answer:
          type: string
      required:
        - label
        - questionNumber
    ArrayOfOASysOffenceDetailsQuestions:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/OASysQuestion'
        example:
          - label: "Offence analysis"
            questionNumber: "2.1"
            answer: "Mr Smith admits he went to Mr Jones's address on 23rd March 2010..."
          - label: "Victim - perpetrator relationship"
            questionNumber: "2.4.1"
            answer: "Mr Smith told me that he did not know the victim, prior to the incident..."
    ArrayOfOASysRiskContributorsQuestions:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/OASysQuestion'
        example:
          - label: "Accommodation issues contributing to risks of offending and harm"
            questionNumber: "3.9"
            answer: "Mr Smith told me that he was renting a room in a shared house, prior to his current remand..."
          - label: "Education, training and employability issues contributing to risks of offending and harm"
            questionNumber: "4.9"
            answer: "Mr Smith told me that his formal school education was regularly interrupted as he and his family travelled a lot whilst he was growing up..."
    ArrayOfOASysRiskManagementQuestions:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/OASysQuestion'
        example:
          - label: "Current situation"
            questionNumber: "RM28.1"
            answer: "Currently on remand at HMP Wandsworth - Management of case under MAPPA - level not yet set."
          - label: "Supervision"
            questionNumber: "RM30"
            answer: "Probation Officer, Education training and employment Officer, Prison Offender Supervisor"
          - label: "Monitoring and control"
            questionNumber: "RM31"
            answer: "State they will have secure accommodation for Mr Smith and partner on release, although ..."
    ArrayOfOASysRiskOfSeriousHarmSummaryQuestions:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/OASysQuestion'
        example:
          - label: "Who is at risk?"
            questionNumber: "R10.1"
            answer: "Males whom Mr Smith believes have wronged him, or strangers with whom he gets...."
          - label: "What is the nature of the risk?"
            questionNumber: "R10.2"
            answer: "Violence, Threats, Physical harm"
          - label: "When is the risk likely to be greatest?"
            questionNumber: "R10.3"
            answer: "Not imminent ? lengthy gap between convictions for violent offences..."
          - label: "What circumstances are likely to increase the risk?"
            questionNumber: "R10.4"
            answer: "As above ? drug use, need to obtain money for drugs at all costs..."
          - label: "What factors are likely to reduce the risk?"
            questionNumber: "R10.5"
            answer: "Mr Smith thinking about consequences of his actions and not acting impulsively..."
    ArrayOfOASysRisksToTheIndividualQuestions:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/OASysQuestion'
        example:
          - label: "Current concerns about self-harm or suicide"
            questionNumber: "R8.1.1"
            answers: "There have been numerous ACCTs opened since 2013 and every subsequent year he has been in custody..."
          - label: "Previous concerns about self-harm or suicide"
            questionNumber: "R8.1.4"
            answer: "During Mr Smith's psr report, he denied having any history of self-harm, however... "
          - label: "Current concerns about Coping in Custody or Hostel."
            questionNumber: "R8.2.1"
            answer: "Has told prison staff that he swallowed batteries on one occasion due to wanting..."
          - label: "Previous concerns about Coping in Custody or Hostel."
            questionNumber: "R8.2.2"
            answer: "Reported in 2021 that he will keep himself to himself because he gets discomfiture..."
    ArrayOfOASysRisksToOthersQuestions:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/OASysQuestion'
        example:
          - label: "Current offence details"
            questionNumber: "R6.1 FA1"
            answer: "Mr Smith was released on licence from custody on 12/7/2018.  Between then and 1/8/2018 Mr Smith approached..."
          - label: "Current where and when"
            questionNumber: "R6.1 FA2"
            answer: "Between 12/7/2018 - 31/7/2018, initially victim in the street putting bins out... "
          - label: "Previous offence details"
            questionNumber: "R6.2 FA8"
            answer: "Mr Smith is assessed to have committed a number of offences that are considered to have crossed the Threshold of serious harm..."
          - label: "Previous where and when"
            questionNumber: "R6.2 FA9"
            answer: "Bolton and Bury Districts."
    ArrayOfOASysSupportingInformationQuestions:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/OASysSupportingInformationQuestion'
        example:
          - label: "Accommodation issues contributing to risks of offending and harm?"
            questionNumber: "3.9"
            sectionNumber: 3
            linkedToHarm: false
            linkedToReOffending: true
            answer: "Mr Smith told me that he was renting a room in a shared house, prior to his current remand. He said that this accomodation..."
          - label: "Education, training and employability issues contributing to risks of offending and harm"
            questionNumber: "4.9"
            sectionNumber: 4
            linkedToHarm: false
            linkedToReOffending: true
            answer: "He said that he has since learnt to read and write during periods of custody and..."
    ArrayOfOASysRiskToSelfQuestions:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/OASysQuestion'
        example:
          - label: "Current concerns about self-harm or suicide"
            questionNumber: "R8.1.1"
            answer: "There have been numerous ACCTs opened since 2013 and every subsequent year he has been in custody....."
          - label: "Current concerns about Coping in Custody or Hostel."
            questionNumber: "R8.2.1"
            answer: "Has told prison staff that he swallowed batteries on one occasion due to wanting..."
    ArrayOfOASysRiskManagementPlanQuestions:
      type: array
      items:
        type: object
        $ref: '#/components/schemas/OASysQuestion'
        example:
          - label: "Key information about current situation"
            questionNumber: "RM28.1"
            answer: "Currently on remand - Management of case under MAPPA - level not yet set......"
          - label: "Further considerations about current situation"
            questionNumber: "RM28"
            answer: "Mr Manette is currently on remand awaiting sentence"
    OASysSections:
      type: object
      properties:
        assessmentId:
          $ref: '#/components/schemas/OASysAssessmentId'
        assessmentState:
          $ref: '#/components/schemas/OASysAssessmentState'
        dateStarted:
          type: string
          format: date-time
        dateCompleted:
          type: string
          format: date-time
        offenceDetails:
          $ref: '#/components/schemas/ArrayOfOASysOffenceDetailsQuestions'
        roshSummary:
          $ref: '#/components/schemas/ArrayOfOASysRiskOfSeriousHarmSummaryQuestions'
        supportingInformation:
          $ref: '#/components/schemas/ArrayOfOASysSupportingInformationQuestions'
        riskToSelf:
          $ref: '#/components/schemas/ArrayOfOASysRiskToSelfQuestions'
        riskManagementPlan:
          $ref: '#/components/schemas/ArrayOfOASysRiskManagementPlanQuestions'
      required:
        - assessmentId
        - assessmentState
        - dateStarted
        - offenceDetails
        - roshSummary
        - supportingInformation
        - riskToSelf
        - riskManagementPlan
    OASysRiskToSelf:
      type: object
      properties:
        assessmentId:
          $ref: '#/components/schemas/OASysAssessmentId'
        assessmentState:
          $ref: '#/components/schemas/OASysAssessmentState'
        dateStarted:
          type: string
          format: date-time
        dateCompleted:
          type: string
          format: date-time
        riskToSelf:
          $ref: '#/components/schemas/ArrayOfOASysRiskToSelfQuestions'
      required:
        - assessmentId
        - assessmentState
        - dateStarted
        - riskToSelf
    OASysRiskOfSeriousHarm:
      type: object
      properties:
        assessmentId:
          $ref: '#/components/schemas/OASysAssessmentId'
        assessmentState:
          $ref: '#/components/schemas/OASysAssessmentState'
        dateStarted:
          type: string
          format: date-time
        dateCompleted:
          type: string
          format: date-time
        rosh:
          $ref: '#/components/schemas/ArrayOfOASysRiskOfSeriousHarmSummaryQuestions'
      required:
        - assessmentId
        - assessmentState
        - dateStarted
        - rosh
    OASysSection:
      type: object
      properties:
        section:
          type: integer
          example: 10
        name:
          type: string
          example: Emotional wellbeing
        linkedToHarm:
          type: boolean
        linkedToReOffending:
          type: boolean
      required:
        - section
        - name
    OASysAssessmentState:
      type: string
      enum:
        - Completed
        - Incomplete
    ActiveOffence:
      type: object
      properties:
        deliusEventNumber:
          type: string
          example: "7"
        offenceDescription:
          type: string
        offenceId:
          type: string
          example: "M1502750438"
        convictionId:
          type: integer
          format: int64
          example: 1502724704
        offenceDate:
          type: string
          format: date
      required:
        - deliusEventNumber
        - offenceDescription
        - offenceId
        - convictionId
    DocumentLevel:
      type: string
      description: The level at which a Document is associated - i.e. to the Offender or to a specific Conviction
      enum:
        - Offender
        - Conviction
    Document:
      type: object
      description: Meta Info about a file relating to an Offender
      properties:
        id:
          type: string
        level:
          $ref: '#/components/schemas/DocumentLevel'
        fileName:
          type: string
        createdAt:
          type: string
          format: date-time
        typeCode:
          type: string
        typeDescription:
          type: string
        description:
          type: string
      required:
        - id
        - level
        - fileName
        - createdAt
        - typeCode
        - typeDescription
    TimelineEvent:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TimelineEventType'
        id:
          type: string
        occurredAt:
          type: string
          format: date-time
        content:
          type: string
        createdBy:
          $ref: '#/components/schemas/User'
        associatedUrls:
          type: array
          items:
            $ref: '#/components/schemas/TimelineEventAssociatedUrl'
    TimelineEventAssociatedUrl:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/TimelineEventUrlType'
        url:
          type: string
      required:
        - type
        - url
    TimelineEventType:
      type: string
      enum:
        - approved_premises_application_submitted
        - approved_premises_application_assessed
        - approved_premises_booking_made
        - approved_premises_person_arrived
        - approved_premises_person_not_arrived
        - approved_premises_person_departed
        - approved_premises_booking_not_made
        - approved_premises_booking_cancelled
        - approved_premises_booking_changed
        - approved_premises_application_withdrawn
        - approved_premises_information_request
        - cas3_person_arrived
        - cas3_person_departed
        - application_timeline_note
    TimelineEventUrlType:
      type: string
      enum:
        - application
        - booking
        - assessment
    SeedRequest:
      type: object
      properties:
        seedType:
          $ref: '#/components/schemas/SeedFileType'
        fileName:
          type: string
      required:
        - seedType
        - fileName
    SeedFileType:
      type: string
      enum:
        - approved_premises
        - approved_premises_rooms
        - temporary_accommodation_premises
        - temporary_accommodation_bedspace
        - user
        - nomis_users
        - external_users
        - cas2_applications
        - temporary_accommodation_users
        - approved_premises_users
        - characteristics
        - approved_premises_offline_applications
        - approved_premises_bookings
        - approved_premises_cancel_bookings
    MigrationJobRequest:
      type: object
      properties:
        jobType:
          $ref: '#/components/schemas/MigrationJobType'
      required:
        - jobType
    MigrationJobType:
      type: string
      enum:
        - update_inmate_status_on_submission
        - update_all_users_from_community_api
        - update_sentence_type_and_situation
        - update_booking_status
        - update_application_ap_areas
    PlacementDates:
      type: object
      properties:
        expectedArrival:
          type: string
          format: date
        duration:
          type: integer
      required:
        - expectedArrival
        - duration
    PlacementRequirements:
      type: object
      properties:
        gender:
          $ref: '#/components/schemas/Gender'
        type:
          $ref: '#/components/schemas/ApType'
        location:
          type: string
          example: B74
        radius:
          type: integer
        essentialCriteria:
          type: array
          items:
            $ref: '#/components/schemas/PlacementCriteria'
        desirableCriteria:
          type: array
          items:
            $ref: '#/components/schemas/PlacementCriteria'
      required:
        - gender
        - type
        - location
        - radius
        - essentialCriteria
        - desirableCriteria
    PlacementApplication:
      allOf:
        - $ref: '#/components/schemas/NewPlacementApplication'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            createdByUserId:
              type: string
              format: uuid
            schemaVersion:
              type: string
              format: uuid
            outdatedSchema:
              type: boolean
            createdAt:
              type: string
              format: date-time
            submittedAt:
              type: string
              format: date-time
            assessmentId:
              type: string
              format: uuid
            assessmentCompletedAt:
              type: string
              format: date-time
            applicationCompletedAt:
              type: string
              format: date-time
            data:
              $ref: '#/components/schemas/AnyValue'
            document:
              $ref: '#/components/schemas/AnyValue'
            canBeWithdrawn:
              type: boolean
          required:
            - id
            - createdByUserId
            - schemaVersion
            - outdatedScheme
            - createdAt
            - assessmentId
            - assessmentCompletedAt
            - applicationCompletedAt
    NewPlacementApplication:
      type: object
      properties:
        applicationId:
          type: string
          format: uuid
      required:
        - applicationId
    UpdatePlacementApplication:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyValue'
      required:
        - data
    SubmitPlacementApplication:
      type: object
      properties:
        translatedDocument:
          $ref: '#/components/schemas/AnyValue'
        placementType:
          $ref: '#/components/schemas/PlacementType'
        placementDates:
          type: array
          items:
            $ref: '#/components/schemas/PlacementDates'
      required:
        - translatedDocument
        - placementType
        - placementDates
    PlacementApplicationDecisionEnvelope:
      type: object
      properties:
        decision:
          $ref: '#/components/schemas/PlacementApplicationDecision'
        summaryOfChanges:
          type: string
        decisionSummary:
          type: string
      required:
        - decision
        - summaryOfChanges
        - decisionSummary
    PlacementApplicationDecision:
      type: string
      enum:
        - accepted
        - rejected
        - withdraw
        - withdrawn_by_pp
    PlacementType:
      type: string
      enum:
        - rotl
        - release_following_decision
        - additional_placement
    PlacementRequest:
      allOf:
        - $ref: '#/components/schemas/PlacementRequirements'
        - $ref: '#/components/schemas/PlacementDates'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            person:
              $ref: '#/components/schemas/Person'
            risks:
              $ref: '#/components/schemas/PersonRisks'
            applicationId:
              type: string
              format: uuid
            assessmentId:
              type: string
              format: uuid
            releaseType:
              $ref: '#/components/schemas/ReleaseTypeOption'
            status:
              $ref: '#/components/schemas/PlacementRequestStatus'
            assessmentDecision:
              $ref: '#/components/schemas/AssessmentDecision'
            assessmentDate:
              type: string
              format: date-time
            applicationDate:
              type: string
              format: date-time
            assessor:
              $ref: '#/components/schemas/ApprovedPremisesUser'
            isParole:
              type: boolean
            notes:
              type: string
            booking:
              $ref: '#/components/schemas/BookingSummary'
            requestType:
              $ref: '#/components/schemas/PlacementRequestRequestType'
          required:
            - person
            - risks
            - id
            - applicationId
            - assessmentId
            - releaseType
            - status
            - assessmentDecision
            - assessmentDate
            - applicationDate
            - assessor
            - isParole
    PlacementRequestRequestType:
      type: string
      enum:
        - parole
        - standardRelease
    PlacementRequestDetail:
      allOf:
        - $ref: '#/components/schemas/PlacementRequest'
        - type: object
          properties:
            cancellations:
              type: array
              items:
                $ref: '#/components/schemas/Cancellation'
            application:
              $ref: '#/components/schemas/Application'
          required:
            - cancellations
            - application
    PlacementRequestStatus:
      type: string
      enum:
        - notMatched
        - unableToMatch
        - matched
    PlacementCriteria:
      type: string
      enum:
        - isPIPE
        - isESAP
        - isSemiSpecialistMentalHealth
        - isRecoveryFocussed
        - hasBrailleSignage
        - hasTactileFlooring
        - hasHearingLoop
        - isStepFreeDesignated
        - isArsonDesignated
        - isWheelchairDesignated
        - isSingle
        - isCatered
        - isSuitedForSexOffenders
        - isSuitableForVulnerable
        - acceptsSexOffenders
        - acceptsHateCrimeOffenders
        - acceptsChildSexOffenders
        - acceptsNonSexualChildOffenders
        - isArsonSuitable
        - isGroundFloor
        - hasEnSuite
    Gender:
      type: string
      enum:
        - male
        - female
    ApType:
      type: string
      enum:
        - normal
        - pipe
        - esap
        - rfap
    BedSearchParameters:
      type: object
      properties:
        serviceName:
          type: string
        startDate:
          type: string
          format: date
          description: The date the Bed will need to be free from
        durationDays:
          type: integer
          description: The number of days the Bed will need to be free from the start_date until
      required:
        - serviceName
        - startDate
        - durationDays
      discriminator:
        propertyName: serviceName
        mapping:
          approved-premises: '#/components/schemas/ApprovedPremisesBedSearchParameters'
          temporary-accommodation: '#/components/schemas/TemporaryAccommodationBedSearchParameters'
    ApprovedPremisesBedSearchParameters:
      allOf:
        - $ref: '#/components/schemas/BedSearchParameters'
        - type: object
          properties:
            postcodeDistrict:
              type: string
              description: The postcode district to search outwards from
            maxDistanceMiles:
              type: integer
              description: Maximum number of miles from the postcode district to search, only required if more than 50 miles which is the default
            requiredCharacteristics:
              type: array
              items:
                $ref: '#/components/schemas/PlacementCriteria'
          required:
            - postcodeDistrict
            - maxDistanceMiles
            - requiredCharacteristics
    TemporaryAccommodationBedSearchParameters:
      allOf:
        - $ref: '#/components/schemas/BedSearchParameters'
        - type: object
          properties:
            probationDeliveryUnit:
              type: string
              description: The pdu to search within
          required:
            - probationDeliveryUnit
    BedSearchResults:
      type: object
      properties:
        resultsRoomCount:
          type: integer
          description: How many distinct Rooms the Beds in the results belong to
        resultsPremisesCount:
          type: integer
          description: How many distinct Premises the Beds in the results belong to
        resultsBedCount:
          type: integer
          description: How many Beds are in the results
        results:
          type: array
          items:
            $ref: '#/components/schemas/BedSearchResult'
      required:
        - resultsRoomCount
        - resultsPremisesCount
        - resultsBedCount
        - results
    BedSearchResult:
      type: object
      properties:
        serviceName:
          $ref: '#/components/schemas/ServiceName'
        premises:
          $ref: '#/components/schemas/BedSearchResultPremisesSummary'
        room:
          $ref: '#/components/schemas/BedSearchResultRoomSummary'
        bed:
          $ref: '#/components/schemas/BedSearchResultBedSummary'
      required:
        - serviceName
        - premises
        - room
        - bed
      discriminator:
        propertyName: serviceName
        mapping:
          approved-premises: '#/components/schemas/ApprovedPremisesBedSearchResult'
          temporary-accommodation: '#/components/schemas/TemporaryAccommodationBedSearchResult'
    ApprovedPremisesBedSearchResult:
      allOf:
        - $ref: '#/components/schemas/BedSearchResult'
        - type: object
          properties:
            distanceMiles:
              type: number
              description: how many miles away from the postcode district the Premises this Bed belongs to is
          required:
            - distanceMiles
    TemporaryAccommodationBedSearchResult:
      allOf:
        - $ref: '#/components/schemas/BedSearchResult'
        - type: object
          properties:
            overlaps:
              type: array
              items:
                $ref: '#/components/schemas/TemporaryAccommodationBedSearchResultOverlap'
          required:
            - overlaps
    TemporaryAccommodationBedSearchResultOverlap:
      type: object
      properties:
        crn:
          type: string
        days:
          type: integer
        bookingId:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
      required:
        - crn
        - days
        - bookingId
        - roomId
    BedSearchResultPremisesSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        town:
          type: string
        postcode:
          type: string
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/CharacteristicPair'
        bedCount:
          type: integer
          description: the total number of Beds in the Premises
      required:
        - id
        - name
        - addressLine1
        - postcode
        - characteristics
        - bedCount
    BedSearchResultRoomSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        characteristics:
          type: array
          items:
            $ref: '#/components/schemas/CharacteristicPair'
      required:
        - id
        - name
        - characteristics
    BedSearchResultBedSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    CharacteristicPair:
      type: object
      properties:
        propertyName:
          type: string
        name:
          type: string
      required:
        - name
    SortOrder:
      type: string
      enum:
        - ascending
        - descending
    BookingStatus:
      type: string
      enum:
        - arrived
        - awaiting-arrival
        - not-arrived
        - departed
        - cancelled
        - provisional
        - confirmed
        - closed
    BookingSearchSortField:
      type: string
      enum:
        - name
        - crn
        - startDate
        - endDate
        - createdAt
      x-enum-varnames:
        - personName
        - personCrn
        - bookingStartDate
        - bookingEndDate
        - bookingCreatedAt
    BookingSearchResults:
      type: object
      properties:
        resultsCount:
          type: integer
        results:
          type: array
          items:
            $ref: "#/components/schemas/BookingSearchResult"
      required:
        - resultsCount
        - results
    BookingSearchResult:
      type: object
      properties:
        person:
          $ref: "#/components/schemas/BookingSearchResultPersonSummary"
        booking:
          $ref: "#/components/schemas/BookingSearchResultBookingSummary"
        premises:
          $ref: "#/components/schemas/BookingSearchResultPremisesSummary"
        room:
          $ref: "#/components/schemas/BookingSearchResultRoomSummary"
        bed:
          $ref: "#/components/schemas/BookingSearchResultBedSummary"
      required:
        - person
        - booking
        - premises
        - room
        - bed
    BookingSearchResultPersonSummary:
      type: object
      properties:
        name:
          type: string
        crn:
          type: string
      required:
        - crn
    BookingSearchResultBookingSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          $ref: "#/components/schemas/BookingStatus"
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - status
        - startDate
        - endDate
        - createdAt
    BookingSearchResultPremisesSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        addressLine1:
          type: string
        addressLine2:
          type: string
        town:
          type: string
        postcode:
          type: string
      required:
        - id
        - name
        - addressLine1
        - postcode
    BookingSearchResultRoomSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    BookingSearchResultBedSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    NewPlacementRequestBookingConfirmation:
      type: object
      properties:
        premisesName:
          type: string
        arrivalDate:
          type: string
          format: date
          example: 2022-07-28
        departureDate:
          type: string
          format: date
          example: 2022-09-30
      required:
        - premisesName
        - arrivalDate
        - departureDate
    NewBedMove:
      type: object
      properties:
        bedId:
          type: string
          format: uuid
        notes:
          type: string
      required:
        - bedId
    NewBookingNotMade:
      type: object
      properties:
        notes:
          type: string
    BookingNotMade:
      type: object
      properties:
        id:
          type: string
          format: uuid
        placementRequestId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        notes:
          type: string
      required:
        - id
        - placementRequestId
        - createdAt
    ProbationDeliveryUnit:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name
    CacheType:
      type: string
      enum:
        - qCodeStaffMembers
        - userAccess
        - staffDetails
        - teamsManagingCase
        - ukBankHolidays
        - offenderDetails
        - inmateDetails
    BedOccupancyRange:
      type: object
      properties:
        bedId:
          type: string
          format: uuid
        bedName:
          type: string
        schedule:
          type: array
          items:
            $ref: '#/components/schemas/BedOccupancyEntry'
      required:
        - bedId
        - bedName
        - schedule
    BedOccupancyEntryType:
      type: string
      enum:
        - booking
        - lost_bed
        - open
    BedOccupancyEntry:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/BedOccupancyEntryType'
        length:
          type: integer
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
      required:
        - type
        - length
        - startDate
        - endDate
      discriminator:
        propertyName: type
        mapping:
          booking: '#/components/schemas/BedOccupancyBookingEntry'
          lost_bed: '#/components/schemas/BedOccupancyLostBedEntry'
          open: '#/components/schemas/BedOccupancyOpenEntry'
    BedOccupancyBookingEntry:
      allOf:
        - $ref: '#/components/schemas/BedOccupancyEntry'
        - type: object
          properties:
            bookingId:
              type: string
              format: uuid
            personName:
              type: string
          required:
            - bookingId
            - personName
    BedOccupancyLostBedEntry:
      allOf:
        - $ref: '#/components/schemas/BedOccupancyEntry'
        - type: object
          properties:
            lostBedId:
              type: string
              format: uuid
          required:
            - lostBedId
    BedOccupancyOpenEntry:
      allOf:
        - $ref: '#/components/schemas/BedOccupancyEntry'
    PersonType:
      type: string
      enum:
        - FullPerson
        - RestrictedPerson
        - UnknownPerson
        - FullPersonInfo
        - RestrictedPersonInfo
    WithdrawalReason:
      type: string
      enum:
        - alternative_identified_placement_no_longer_required
        - change_in_circumstances_placement_no_longer_required
        - change_in_circumstances_new_application_to_be_submitted
        - change_in_release_date_placement_no_longer_required
        - change_in_release_decision_placement_no_longer_required
        - error_in_application
        - duplicate_application
        - other
    PlacementRequestSortField:
      type: string
      enum:
        - duration
        - expected_arrival
        - created_at
        - application_date
        - request_type
        - person_name
        - person_risks_tier
      x-enum-varnames:
        - duration
        - expectedArrival
        - createdAt
        - applicationSubmittedAt
    UserSortField:
      type: string
      enum:
        - name
      x-enum-varnames:
        - personName
    SortDirection:
      type: string
      enum:
        - asc
        - desc
    AllocatedFilter:
      type: string
      enum:
        - allocated
        - unallocated
    ApplicationSortField:
      type: string
      enum:
        - tier
        - createdAt
        - arrivalDate
    RiskTierLevel:
      type: string
      enum:
        - D0
        - D1
        - D2
        - D3
        - C0
        - C1
        - C2
        - C3
        - B0
        - B1
        - B2
        - B3
        - A0
        - A1
        - A2
        - A3

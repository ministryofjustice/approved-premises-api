/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api

import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.Parameter
import io.swagger.v3.oas.annotations.enums.ParameterIn
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.media.Schema
import io.swagger.v3.oas.annotations.responses.ApiResponse
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.RequestHeader
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RequestMethod
import org.springframework.web.bind.annotation.RequestParam
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ProfileResponse
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ServiceName

interface ProfileApi {

  fun getDelegate(): ProfileApiDelegate = object : ProfileApiDelegate {}

  @Operation(
    tags = ["Auth"],
    summary = "Returns information on the logged in user",
    operationId = "profileV2Get",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successfully retrieved information on user", content = [Content(schema = Schema(implementation = ProfileResponse::class))]),
      ApiResponse(responseCode = "401", description = "not authenticated", content = [Content(schema = Schema(implementation = Problem::class))]),
      ApiResponse(responseCode = "403", description = "unauthorised", content = [Content(schema = Schema(implementation = Problem::class))]),
      ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/profile/v2"],
    produces = ["application/json"],
  )
  fun profileV2Get(@Parameter(description = "Filters the user details to those relevant to the specified service.", `in` = ParameterIn.HEADER, required = true, schema = Schema(allowableValues = ["approved-premises", "cas2", "temporary-accommodation"])) @RequestHeader(value = "X-Service-Name", required = true) xServiceName: ServiceName, @Parameter(description = "If set to true, will not attempt to update the user from delius") @RequestParam(value = "readOnly", required = false) readOnly: kotlin.Boolean?): ResponseEntity<ProfileResponse> {
    return getDelegate().profileV2Get(xServiceName, readOnly)
  }
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas1.cas1

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1ChangeRequestSortField
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1ChangeRequestStatus
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1ChangeRequestSummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1NewChangeRequest
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.SortDirection
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ValidationError
import kotlin.collections.List

@RestController
interface ChangeRequestsCas1 {

  fun getDelegate(): uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas1.cas1.ChangeRequestsCas1Delegate = object :
      uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas1.cas1.ChangeRequestsCas1Delegate {}

  @Operation(
    tags = ["change requests"],
    summary = "",
    operationId = "create",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successful operation"),
      ApiResponse(
        responseCode = "400",
        description = "invalid params",
        content = [Content(schema = Schema(implementation = ValidationError::class))],
      ),
      ApiResponse(
        responseCode = "401",
        description = "not authenticated",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "403",
        description = "unauthorised",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "500",
        description = "unexpected error",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.POST],
    value = ["/change-requests"],
    produces = ["application/problem+json", "application/json"],
    consumes = ["application/json"],
  )
  fun create(
    @Parameter(
      description = "",
      required = true,
    ) @RequestBody cas1NewChangeRequest: Cas1NewChangeRequest,
  ): ResponseEntity<Unit> {
    return getDelegate().create(cas1NewChangeRequest)
  }

  @Operation(
    tags = ["change requests"],
    summary = "",
    operationId = "find",
    description = """""",
    responses = [
      ApiResponse(
        responseCode = "200",
        description = "successfully retrieved change requests",
        content = [Content(array = ArraySchema(schema = Schema(implementation = Cas1ChangeRequestSummary::class)))],
      ),
      ApiResponse(
        responseCode = "401",
        description = "not authenticated",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "403",
        description = "unauthorised",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "500",
        description = "unexpected error",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/change-requests"],
    produces = ["application/json"],
  )
  fun find(
    @Parameter(
      description = "filter by status of a change request",
      schema = Schema(allowableValues = ["resolved", "unresolved"]),
    ) @RequestParam(value = "status", required = false) status: Cas1ChangeRequestStatus?,
    @Parameter(description = "Page number of results to return. If blank, returns all results") @RequestParam(
      value = "page",
      required = false,
    ) page: kotlin.Int?,
    @Parameter(
      description = "Which field to sort the results by. If blank, will sort by createdAt",
      schema = Schema(allowableValues = ["created_at", "type"]),
    ) @RequestParam(value = "sortBy", required = false) sortBy: Cas1ChangeRequestSortField?,
    @Parameter(
      description = "The direction to sort the results by. If blank, will sort in descending order",
      schema = Schema(allowableValues = ["asc", "desc"]),
    ) @RequestParam(value = "sortDirection", required = false) sortDirection: SortDirection?,
  ): ResponseEntity<List<Cas1ChangeRequestSummary>> {
    return getDelegate().find(status, page, sortBy, sortDirection)
  }
}

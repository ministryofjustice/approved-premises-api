/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package uk.gov.justice.digital.hmpps.approvedpremisesapi.controller.generated.cas1

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1PlacementRequestSummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.PlacementRequestRequestType
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.PlacementRequestSortField
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.PlacementRequestStatus
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.RiskTierLevel
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.SortDirection
import kotlin.collections.List

@RestController
interface PlacementRequestsCas1 {

  fun getDelegate(): PlacementRequestsCas1Delegate = object : PlacementRequestsCas1Delegate {}

  @Operation(
    tags = ["Placement requests"],
    summary = "Gets all placement requests",
    operationId = "search",
    description = """""",
    responses = [
      ApiResponse(
        responseCode = "200",
        description = "successfully retrieved placement requests",
        content = [Content(array = ArraySchema(schema = Schema(implementation = Cas1PlacementRequestSummary::class)))],
      ),
      ApiResponse(
        responseCode = "401",
        description = "not authenticated",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "403",
        description = "unauthorised",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "500",
        description = "unexpected error",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/placement-requests"],
    produces = ["application/json"],
  )
  fun search(
    @Parameter(
      description = "filter by status of an application",
      schema = Schema(allowableValues = ["notMatched", "unableToMatch", "matched"]),
    ) @RequestParam(value = "status", required = false) status: PlacementRequestStatus?,
    @Parameter(description = "search by CRN or name") @RequestParam(
      value = "crnOrName",
      required = false,
    ) crnOrName: kotlin.String?,
    @Parameter(
      description = "filter by tier of Offender at time Application was created",
      schema = Schema(allowableValues = ["D0", "D1", "D2", "D3", "C0", "C1", "C2", "C3", "B0", "B1", "B2", "B3", "A0", "A1", "A2", "A3"]),
    ) @RequestParam(value = "tier", required = false) tier: RiskTierLevel?,
    @Parameter(description = "filter by minimum expected arrival date") @RequestParam(
      value = "arrivalDateStart",
      required = false,
    ) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) arrivalDateStart: java.time.LocalDate?,
    @Parameter(description = "filter by maximum expected arrival date") @RequestParam(
      value = "arrivalDateEnd",
      required = false,
    ) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) arrivalDateEnd: java.time.LocalDate?,
    @Parameter(
      description = "filter by request type",
      schema = Schema(allowableValues = ["parole", "standardRelease"]),
    ) @RequestParam(value = "requestType", required = false) requestType: PlacementRequestRequestType?,
    @Parameter(description = "filter by CRU management area ID") @RequestParam(
      value = "cruManagementAreaId",
      required = false,
    ) cruManagementAreaId: java.util.UUID?,
    @Parameter(description = "Page number of results to return. If blank, returns all results") @RequestParam(
      value = "page",
      required = false,
    ) page: kotlin.Int?,
    @Parameter(
      description = "Which field to sort the results by. If blank, will sort by createdAt",
      schema = Schema(allowableValues = ["duration", "expected_arrival", "created_at", "application_date", "request_type", "person_name", "person_risks_tier"]),
    ) @RequestParam(value = "sortBy", required = false) sortBy: PlacementRequestSortField?,
    @Parameter(
      description = "The direction to sort the results by. If blank, will sort in descending order",
      schema = Schema(allowableValues = ["asc", "desc"]),
    ) @RequestParam(value = "sortDirection", required = false) sortDirection: SortDirection?,
  ): ResponseEntity<List<Cas1PlacementRequestSummary>> {
    return getDelegate().search(
      status,
      crnOrName,
      tier,
      arrivalDateStart,
      arrivalDateEnd,
      requestType,
      cruManagementAreaId,
      page,
      sortBy,
      sortDirection,
    )
  }
}

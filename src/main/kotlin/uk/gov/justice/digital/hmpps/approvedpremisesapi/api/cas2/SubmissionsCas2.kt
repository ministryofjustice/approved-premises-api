/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas2

import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas2SubmittedApplication
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas2SubmittedApplicationSummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.SubmitCas2Application
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ValidationError
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired


import kotlin.collections.List
import kotlin.collections.Map

@RestController
interface SubmissionsCas2 {

    fun getDelegate(): SubmissionsCas2Delegate = object: SubmissionsCas2Delegate {}

    @Operation(
        tags = ["Operations on submitted CAS2 applications (Assessors)",],
        summary = "Gets a single submitted CAS2 application by its ID",
        operationId = "submissionsApplicationIdGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas2SubmittedApplication::class))]),
            ApiResponse(responseCode = "401", description = "not authenticated", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "403", description = "unauthorised", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/submissions/{applicationId}"],
            produces = ["application/json"]
    )
    fun submissionsApplicationIdGet(@Parameter(description = "ID of the application", required = true) @PathVariable("applicationId") applicationId: java.util.UUID): ResponseEntity<Cas2SubmittedApplication> {
        return getDelegate().submissionsApplicationIdGet(applicationId)
    }

    @Operation(
        tags = ["Operations on submitted CAS2 applications (Assessors)",],
        summary = "List summaries of all submitted CAS2 applications",
        operationId = "submissionsGet",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(array = ArraySchema(schema = Schema(implementation = Cas2SubmittedApplicationSummary::class)))]),
            ApiResponse(responseCode = "401", description = "not authenticated", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "403", description = "unauthorised", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/submissions"],
            produces = ["application/json"]
    )
    fun submissionsGet(@Parameter(description = "Page number of results to return. If blank, returns all results") @RequestParam(value = "page", required = false) page: kotlin.Int?): ResponseEntity<List<Cas2SubmittedApplicationSummary>> {
        return getDelegate().submissionsGet(page)
    }

    @Operation(
        tags = ["Operations on CAS2 applications",],
        summary = "Submits a CAS2 Application (creates a SubmittedApplication)",
        operationId = "submissionsPost",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successfully submitted the application"),
            ApiResponse(responseCode = "400", description = "application has already been submitted", content = [Content(schema = Schema(implementation = ValidationError::class))]),
            ApiResponse(responseCode = "401", description = "not authenticated", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "403", description = "unauthorised", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/submissions"],
            produces = ["application/problem+json", "application/json"],
            consumes = ["application/json"]
    )
    fun submissionsPost(@Parameter(description = "Information needed to submit an application", required = true) @RequestBody submitCas2Application: SubmitCas2Application): ResponseEntity<Unit> {
        return getDelegate().submissionsPost(submitCas2Application)
    }
}

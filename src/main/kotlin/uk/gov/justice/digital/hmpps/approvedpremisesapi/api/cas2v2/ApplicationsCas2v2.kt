/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas2v2

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Application
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas2v2ApplicationSummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.NewCas2v2Application
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.UpdateApplication
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ValidationError
import kotlin.collections.List

@RestController
interface ApplicationsCas2v2 {

  fun getDelegate(): uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas2v2.ApplicationsCas2v2Delegate = object :
      uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas2v2.ApplicationsCas2v2Delegate {}

  @Operation(
    tags = ["Operations on CAS2 version 2 applications"],
    summary = "Abandons an in progress CAS2 version 2 application",
    operationId = "applicationsApplicationIdAbandonPut",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "successful operation"),
      ApiResponse(
        responseCode = "401",
        description = "not authenticated",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "409",
        description = "The application has been submitted",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "500",
        description = "unexpected error",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.PUT],
    value = ["/applications/{applicationId}/abandon"],
    produces = ["application/json"],
  )
  fun applicationsApplicationIdAbandonPut(
    @Parameter(
      description = "ID of the application",
      required = true,
    ) @PathVariable("applicationId") applicationId: java.util.UUID,
  ): ResponseEntity<Unit> {
    return getDelegate().applicationsApplicationIdAbandonPut(applicationId)
  }

  @Operation(
    tags = ["Operations on CAS2 version 2 applications"],
    summary = "Gets a single CAS2 version 2 application by its ID",
    operationId = "applicationsApplicationIdGet",
    description = """""",
    responses = [
      ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = [Content(schema = Schema(implementation = Application::class))],
      ),
      ApiResponse(
        responseCode = "401",
        description = "not authenticated",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "403",
        description = "unauthorised",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "500",
        description = "unexpected error",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/applications/{applicationId}"],
    produces = ["application/json"],
  )
  fun applicationsApplicationIdGet(
    @Parameter(
      description = "ID of the application",
      required = true,
    ) @PathVariable("applicationId") applicationId: java.util.UUID,
  ): ResponseEntity<Application> {
    return getDelegate().applicationsApplicationIdGet(applicationId)
  }

  @Operation(
    tags = ["Operations on CAS2 version 2 applications"],
    summary = "Updates a CAS2 version 2 application",
    operationId = "applicationsApplicationIdPut",
    description = """""",
    responses = [
      ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = [Content(schema = Schema(implementation = Application::class))],
      ),
      ApiResponse(
        responseCode = "400",
        description = "invalid params",
        content = [Content(schema = Schema(implementation = ValidationError::class))],
      ),
      ApiResponse(
        responseCode = "401",
        description = "not authenticated",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "403",
        description = "unauthorised",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "500",
        description = "unexpected error",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.PUT],
    value = ["/applications/{applicationId}"],
    produces = ["application/json", "application/problem+json"],
    consumes = ["application/json"],
  )
  fun applicationsApplicationIdPut(
    @Parameter(
      description = "ID of the application",
      required = true,
    ) @PathVariable("applicationId") applicationId: java.util.UUID,
    @Parameter(
      description = "Information to update the application with",
      required = true,
    ) @RequestBody body: UpdateApplication,
  ): ResponseEntity<Application> {
    return getDelegate().applicationsApplicationIdPut(applicationId, body)
  }

  @Operation(
    tags = ["Operations on CAS2 version 2 applications"],
    summary = "List summaries of all CAS2 version 2 applications authorised for the logged in user",
    operationId = "applicationsGet",
    description = """""",
    responses = [
      ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = [Content(array = ArraySchema(schema = Schema(implementation = Cas2v2ApplicationSummary::class)))],
      ),
      ApiResponse(
        responseCode = "401",
        description = "not authenticated",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "403",
        description = "unauthorised",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "500",
        description = "unexpected error",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/applications"],
    produces = ["application/json"],
  )
  fun applicationsGet(
    @Parameter(description = "Returns submitted applications if true, un submitted applications if false, and all applications if absent") @RequestParam(
      value = "isSubmitted",
      required = false,
    ) isSubmitted: kotlin.Boolean?,
    @Parameter(description = "Page number of results to return.  If blank, returns all results") @RequestParam(
      value = "page",
      required = false,
    ) page: kotlin.Int?,
    @Parameter(description = "Prison code of applications to return.  If blank, returns all results.") @RequestParam(
      value = "prisonCode",
      required = false,
    ) prisonCode: kotlin.String?,
  ): ResponseEntity<List<Cas2v2ApplicationSummary>> {
    return getDelegate().applicationsGet(isSubmitted, page, prisonCode)
  }

  @Operation(
    tags = ["Operations on CAS2 version 2 applications"],
    summary = "Creates a CAS2 version 2 application",
    operationId = "applicationsPost",
    description = """""",
    responses = [
      ApiResponse(
        responseCode = "201",
        description = "successful operation",
        content = [Content(schema = Schema(implementation = Application::class))],
      ),
      ApiResponse(
        responseCode = "400",
        description = "invalid params",
        content = [Content(schema = Schema(implementation = ValidationError::class))],
      ),
      ApiResponse(
        responseCode = "401",
        description = "not authenticated",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "403",
        description = "unauthorised",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "404",
        description = "invalid CRN",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
      ApiResponse(
        responseCode = "500",
        description = "unexpected error",
        content = [Content(schema = Schema(implementation = Problem::class))],
      ),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.POST],
    value = ["/applications"],
    produces = ["application/json", "application/problem+json"],
    consumes = ["application/json"],
  )
  fun applicationsPost(
    @Parameter(
      description = "Information to create a blank application with",
      required = true,
    ) @RequestBody body: NewCas2v2Application,
  ): ResponseEntity<Application> {
    return getDelegate().applicationsPost(body)
  }
}

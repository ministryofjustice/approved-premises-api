/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ServiceName

interface ReportsApi {

  fun getDelegate(): ReportsApiDelegate = object : ReportsApiDelegate {}

  @Operation(
    tags = ["Reports"],
    summary = "Returns a spreadsheet of the bookings, voids and turnarounds all beds for the specified service and (optional) region.",
    operationId = "reportsBedUsageGet",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "Successfully retrieved the report", content = [Content(schema = Schema(implementation = org.springframework.core.io.Resource::class))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/reports/bed-usage"],
    produces = ["application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
  )
  fun reportsBedUsageGet(@Parameter(description = "Only bookings for this service will be returned", `in` = ParameterIn.HEADER, required = true, schema = Schema(allowableValues = ["approved-premises", "cas2", "temporary-accommodation"])) @RequestHeader(value = "X-Service-Name", required = true) xServiceName: ServiceName, @Parameter(description = "Only bookings for this year will be returned", required = true) @RequestParam(value = "year", required = true) year: kotlin.Int, @Parameter(description = "Only bookings for this month will be returned - must be provided with year", required = true) @RequestParam(value = "month", required = true) month: kotlin.Int, @Parameter(description = "If provided, only bookings for this region will be returned") @RequestParam(value = "probationRegionId", required = false) probationRegionId: java.util.UUID?): ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody> {
    return getDelegate().reportsBedUsageGet(xServiceName, year, month, probationRegionId)
  }

  @Operation(
    tags = ["Reports"],
    summary = "Returns a spreadsheet showing how many days per month each bedspace spent in which state and the overall occupancy rate.",
    operationId = "reportsBedUtilisationGet",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "Successfully retrieved the report", content = [Content(schema = Schema(implementation = org.springframework.core.io.Resource::class))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/reports/bed-utilisation"],
    produces = ["application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
  )
  fun reportsBedUtilisationGet(@Parameter(description = "Only bookings for this service will be returned", `in` = ParameterIn.HEADER, required = true, schema = Schema(allowableValues = ["approved-premises", "cas2", "temporary-accommodation"])) @RequestHeader(value = "X-Service-Name", required = true) xServiceName: ServiceName, @Parameter(description = "Only bookings for this year will be returned", required = true) @RequestParam(value = "year", required = true) year: kotlin.Int, @Parameter(description = "Only bookings for this month will be returned - must be provided with year", required = true) @RequestParam(value = "month", required = true) month: kotlin.Int, @Parameter(description = "If provided, only bookings for this region will be returned") @RequestParam(value = "probationRegionId", required = false) probationRegionId: java.util.UUID?): ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody> {
    return getDelegate().reportsBedUtilisationGet(xServiceName, year, month, probationRegionId)
  }

  @Operation(
    tags = ["Reports"],
    summary = "Returns a spreadsheet of all bookings for the specified service and (optional) region.",
    operationId = "reportsBookingsGet",
    description = """""",
    responses = [
      ApiResponse(responseCode = "200", description = "Successfully retrieved the report", content = [Content(schema = Schema(implementation = org.springframework.core.io.Resource::class))]),
    ],
  )
  @RequestMapping(
    method = [RequestMethod.GET],
    value = ["/reports/bookings"],
    produces = ["application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
  )
  fun reportsBookingsGet(@Parameter(description = "Only bookings for this service will be returned", `in` = ParameterIn.HEADER, required = true, schema = Schema(allowableValues = ["approved-premises", "cas2", "temporary-accommodation"])) @RequestHeader(value = "X-Service-Name", required = true) xServiceName: ServiceName, @Parameter(description = "If provided, only bookings for this year will be returned", required = true) @RequestParam(value = "year", required = true) year: kotlin.Int, @Parameter(description = "If provided, only bookings for this month will be returned - must be provided with year", required = true) @RequestParam(value = "month", required = true) month: kotlin.Int, @Parameter(description = "If provided, only bookings for this region will be returned") @RequestParam(value = "probationRegionId", required = false) probationRegionId: java.util.UUID?): ResponseEntity<org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody> {
    return getDelegate().reportsBookingsGet(xServiceName, year, month, probationRegionId)
  }
}

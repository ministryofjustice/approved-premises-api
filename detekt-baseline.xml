<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues>
    <ID>LongParameterList:ApplicationEntity.kt$ApprovedPremisesApplicationEntity$( id: UUID, crn: String, createdByUser: UserEntity, data: String?, document: String?, schemaVersion: JsonSchemaEntity, createdAt: OffsetDateTime, submittedAt: OffsetDateTime?, schemaUpToDate: Boolean, assessments: MutableList&lt;AssessmentEntity>, var isWomensApplication: Boolean?, var isPipeApplication: Boolean?, var isEmergencyApplication: Boolean?, var isEsapApplication: Boolean?, var isInapplicable: Boolean?, var isWithdrawn: Boolean, var withdrawalReason: String?, var otherWithdrawalReason: String?, val convictionId: Long, val eventNumber: String, val offenceId: String, nomsNumber: String?, @Type(type = "com.vladmihalcea.hibernate.type.json.JsonType") @Convert(disableConversion = true) val riskRatings: PersonRisks?, @OneToMany(mappedBy = "application") val teamCodes: MutableList&lt;ApplicationTeamCodeEntity>, @OneToMany(mappedBy = "application") var placementRequests: MutableList&lt;PlacementRequestEntity>, var releaseType: String?, var arrivalDate: OffsetDateTime?, var name: String, var targetLocation: String?, @Enumerated(EnumType.STRING) var status: ApprovedPremisesApplicationStatus?, )</ID>
    <ID>LongParameterList:ApplicationEntity.kt$ApprovedPremisesApplicationEntity$( id: UUID, crn: String, createdByUser: UserEntity, data: String?, document: String?, schemaVersion: JsonSchemaEntity, createdAt: OffsetDateTime, submittedAt: OffsetDateTime?, schemaUpToDate: Boolean, assessments: MutableList&lt;AssessmentEntity>, var isWomensApplication: Boolean?, var isPipeApplication: Boolean?, var isEmergencyApplication: Boolean?, var isEsapApplication: Boolean?, var isInapplicable: Boolean?, var isWithdrawn: Boolean, var withdrawalReason: String?, var otherWithdrawalReason: String?, val convictionId: Long, val eventNumber: String, val offenceId: String, nomsNumber: String?, @Type(type = "com.vladmihalcea.hibernate.type.json.JsonType") @Convert(disableConversion = true) val riskRatings: PersonRisks?, @OneToMany(mappedBy = "application") val teamCodes: MutableList&lt;ApplicationTeamCodeEntity>, @OneToMany(mappedBy = "application") var placementRequests: MutableList&lt;PlacementRequestEntity>, var releaseType: String?, var arrivalDate: OffsetDateTime?, var name: String, var targetLocation: String?, @Enumerated(value = EnumType.STRING) var status: ApprovedPremisesApplicationStatus?, )</ID>
    <ID>TooGenericExceptionCaught:ApplicationStatusMigrationJob.kt$ApplicationStatusMigrationJob$e: Exception</ID>
    <ID>TooGenericExceptionThrown:ApplicationsTransformer.kt$ApplicationsTransformer$throw RuntimeException("Application ${entity.getId()} has no status")</ID>
    <ID>LongParameterList:ApplicationEntity.kt$ApprovedPremisesApplicationEntity$( id: UUID, crn: String, createdByUser: UserEntity, data: String?, document: String?, schemaVersion: JsonSchemaEntity, createdAt: OffsetDateTime, submittedAt: OffsetDateTime?, schemaUpToDate: Boolean, assessments: MutableList&lt;AssessmentEntity>, var isWomensApplication: Boolean?, var isPipeApplication: Boolean?, var isEmergencyApplication: Boolean?, var isEsapApplication: Boolean?, var isInapplicable: Boolean?, var isWithdrawn: Boolean, var withdrawalReason: String?, var otherWithdrawalReason: String?, val convictionId: Long, val eventNumber: String, val offenceId: String, nomsNumber: String?, @Type(type = "com.vladmihalcea.hibernate.type.json.JsonType") @Convert(disableConversion = true) val riskRatings: PersonRisks?, @OneToMany(mappedBy = "application") val teamCodes: MutableList&lt;ApplicationTeamCodeEntity>, @OneToMany(mappedBy = "application") var placementRequests: MutableList&lt;PlacementRequestEntity>, var releaseType: String?, var arrivalDate: OffsetDateTime?, var name: String, var targetLocation: String?, @Enumerated(value = EnumType.STRING) var status: ApprovedPremisesApplicationStatus, )</ID>
    <ID>UnusedParameter:MigrationJobService.kt$MigrationJobService$pageSize: Int = 10</ID>
  </ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:BookingService.kt$BookingService$booking.service == ServiceName.approvedPremises.value &amp;&amp; booking.application != null &amp;&amp; user != null &amp;&amp; !arrivedAndDepartedDomainEventsDisabled</ID>
    <ID>ConstructorParameterNaming:ApplicationTest.kt$EventType$val Type: String</ID>
    <ID>ConstructorParameterNaming:ApplicationTest.kt$EventType$val Value: String</ID>
    <ID>ConstructorParameterNaming:ApplicationTest.kt$Message$val Message: String</ID>
    <ID>ConstructorParameterNaming:ApplicationTest.kt$Message$val MessageAttributes: MessageAttributes</ID>
    <ID>ConstructorParameterNaming:ApplicationTest.kt$Message$val MessageId: String</ID>
    <ID>CyclomaticComplexMethod:ApplicationService.kt$ApplicationService$private fun createApplicationSubmittedEvent(application: ApprovedPremisesApplicationEntity, submitApplication: SubmitApprovedPremisesApplication, username: String, jwt: String)</ID>
    <ID>CyclomaticComplexMethod:ApplicationServiceTest.kt$ApplicationServiceTest.SubmitApplication$@Test fun `submitApprovedPremisesApplication returns Success, creates assessment and stores event, sends confirmation email`()</ID>
    <ID>CyclomaticComplexMethod:ApplicationsTransformer.kt$ApplicationsTransformer$private fun getStatus(entity: ApplicationEntity, latestAssessment: AssessmentEntity?): ApplicationStatus</ID>
    <ID>CyclomaticComplexMethod:ApplicationsTransformer.kt$ApplicationsTransformer$private fun getStatusFromSummary(entity: DomainApplicationSummary): ApplicationStatus</ID>
    <ID>CyclomaticComplexMethod:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$private fun createBooking( row: ApprovedPremisesBookingSeedCsvRow, )</ID>
    <ID>CyclomaticComplexMethod:AssessmentService.kt$AssessmentService$fun acceptAssessment(user: UserEntity, assessmentId: UUID, document: String?, placementRequirements: PlacementRequirements?, placementDates: PlacementDates?, notes: String?): AuthorisableActionResult&lt;ValidatableActionResult&lt;AssessmentEntity>></ID>
    <ID>CyclomaticComplexMethod:AssessmentService.kt$AssessmentService$fun rejectAssessment(user: UserEntity, assessmentId: UUID, document: String?, rejectionRationale: String): AuthorisableActionResult&lt;ValidatableActionResult&lt;AssessmentEntity>></ID>
    <ID>CyclomaticComplexMethod:BookingService.kt$BookingService$@Transactional fun createApprovedPremisesAdHocBooking( user: UserEntity? = null, crn: String, nomsNumber: String?, arrivalDate: LocalDate, departureDate: LocalDate, bedId: UUID, eventNumber: String?, bookingId: UUID = UUID.randomUUID(), ): AuthorisableActionResult&lt;ValidatableActionResult&lt;BookingEntity>></ID>
    <ID>CyclomaticComplexMethod:BookingService.kt$BookingService$@Transactional fun createApprovedPremisesBookingFromPlacementRequest( user: UserEntity, placementRequestId: UUID, bedId: UUID?, premisesId: UUID?, arrivalDate: LocalDate, departureDate: LocalDate, ): AuthorisableActionResult&lt;ValidatableActionResult&lt;BookingEntity>></ID>
    <ID>CyclomaticComplexMethod:BookingService.kt$BookingService$@Transactional fun createCas1Arrival( user: UserEntity? = null, booking: BookingEntity, arrivalDateTime: Instant, expectedDepartureDate: LocalDate, notes: String?, keyWorkerStaffCode: String?, )</ID>
    <ID>CyclomaticComplexMethod:BookingService.kt$BookingService$fun createNonArrival( user: UserEntity?, booking: BookingEntity, date: LocalDate, reasonId: UUID, notes: String?, )</ID>
    <ID>CyclomaticComplexMethod:BookingService.kt$BookingService$private fun createCas1Cancellation( user: UserEntity?, booking: BookingEntity, cancelledAt: LocalDate, reasonId: UUID, notes: String?, )</ID>
    <ID>CyclomaticComplexMethod:BookingService.kt$BookingService$private fun createCas1Departure( user: UserEntity?, booking: BookingEntity, dateTime: OffsetDateTime, reasonId: UUID, moveOnCategoryId: UUID, destinationProviderId: UUID?, notes: String?, )</ID>
    <ID>CyclomaticComplexMethod:BookingServiceTest.kt$BookingServiceTest.CreateApprovedPremisesBookingFromPlacementRequest$@Test fun `createApprovedPremisesBookingFromPlacementRequest saves successfully when the user is not assigned to the placement request and is a Workflow Manager`()</ID>
    <ID>CyclomaticComplexMethod:BookingServiceTest.kt$BookingServiceTest.CreateDateChange$@Test fun `emits domain event when booking has associated application`()</ID>
    <ID>CyclomaticComplexMethod:BookingTransformer.kt$BookingTransformer$private fun determineTemporaryAccommodationStatus(jpa: BookingEntity): BookingStatus</ID>
    <ID>CyclomaticComplexMethod:DeserializationValidationService.kt$DeserializationValidationService$fun validateObject(path: String = "$", targetType: KClass&lt;*>, jsonObject: ObjectNode): Map&lt;String, String></ID>
    <ID>CyclomaticComplexMethod:DomainEventBuilderTest.kt$DomainEventBuilderTest$@Test fun `getPersonArrivedDomainEvent transforms the booking and arrival information correctly`()</ID>
    <ID>CyclomaticComplexMethod:DomainEventBuilderTest.kt$DomainEventBuilderTest$@Test fun `getPersonDepartedDomainEvent transforms the booking and departure information correctly`()</ID>
    <ID>CyclomaticComplexMethod:DomainEventEntity.kt$DomainEventEntity$final inline fun &lt;reified T> toDomainEvent(objectMapper: ObjectMapper): DomainEvent&lt;T></ID>
    <ID>CyclomaticComplexMethod:OASysSectionsTransformer.kt$OASysSectionsTransformer$private fun transformSupportingInformation(needsDetails: NeedsDetails, requestedOptionalSections: List&lt;Int>): List&lt;OASysSupportingInformationQuestion></ID>
    <ID>CyclomaticComplexMethod:OffenderService.kt$OffenderService$fun getInfoForPerson(crn: String, deliusUsername: String, ignoreLao: Boolean): PersonInfoResult</ID>
    <ID>CyclomaticComplexMethod:OffenderService.kt$OffenderService$fun getOffenderByCrn(crn: String, userDistinguishedName: String, ignoreLao: Boolean = false): AuthorisableActionResult&lt;OffenderDetailSummary></ID>
    <ID>CyclomaticComplexMethod:PremisesController.kt$PremisesController$@Transactional override fun premisesPremisesIdBookingsPost(premisesId: UUID, body: NewBooking): ResponseEntity&lt;Booking></ID>
    <ID>CyclomaticComplexMethod:PremisesController.kt$PremisesController$@Transactional override fun premisesPremisesIdPut(premisesId: UUID, body: UpdatePremises): ResponseEntity&lt;Premises></ID>
    <ID>CyclomaticComplexMethod:PremisesService.kt$PremisesService$fun createNewPremises( addressLine1: String, addressLine2: String?, town: String?, postcode: String, latitude: Double?, longitude: Double?, service: String, localAuthorityAreaId: UUID?, probationRegionId: UUID, name: String, notes: String?, characteristicIds: List&lt;UUID>, status: PropertyStatus, probationDeliveryUnitIdentifier: Either&lt;String, UUID>?, turnaroundWorkingDayCount: Int?, )</ID>
    <ID>CyclomaticComplexMethod:PremisesService.kt$PremisesService$fun updatePremises( premisesId: UUID, addressLine1: String, addressLine2: String?, town: String?, postcode: String, localAuthorityAreaId: UUID?, probationRegionId: UUID, characteristicIds: List&lt;UUID>, notes: String?, status: PropertyStatus, probationDeliveryUnitIdentifier: Either&lt;String, UUID>?, turnaroundWorkingDayCount: Int?, ): AuthorisableActionResult&lt;ValidatableActionResult&lt;PremisesEntity>></ID>
    <ID>CyclomaticComplexMethod:SeedBookingsTest.kt$SeedBookingsTest$private fun approvedPremisesBookingSeedCsvRowsToCsv(rows: List&lt;ApprovedPremisesBookingSeedCsvRow>): String</ID>
    <ID>CyclomaticComplexMethod:SeedUtils.kt$fun getCanonicalRegionName(regionName: String): String</ID>
    <ID>CyclomaticComplexMethod:TaskService.kt$TaskService$fun reallocateTask(requestUser: UserEntity, taskType: TaskType, userToAllocateToId: UUID, id: UUID): AuthorisableActionResult&lt;ValidatableActionResult&lt;Reallocation>></ID>
    <ID>EmptyDefaultConstructor:ArrivalTransformer.kt$ArrivalTransformer$()</ID>
    <ID>EmptyDefaultConstructor:CancellationReasonTransformer.kt$CancellationReasonTransformer$()</ID>
    <ID>EmptyDefaultConstructor:DateChangeTransformer.kt$DateChangeTransformer$()</ID>
    <ID>EmptyDefaultConstructor:DepartureReasonTransformer.kt$DepartureReasonTransformer$()</ID>
    <ID>EmptyDefaultConstructor:DestinationProviderTransformer.kt$DestinationProviderTransformer$()</ID>
    <ID>EmptyDefaultConstructor:ExtensionTransformer.kt$ExtensionTransformer$()</ID>
    <ID>EmptyDefaultConstructor:ForbiddenProblem.kt$ForbiddenProblem$()</ID>
    <ID>EmptyDefaultConstructor:LostBedReasonTransformer.kt$LostBedReasonTransformer$()</ID>
    <ID>EmptyDefaultConstructor:MoveOnCategoryTransformer.kt$MoveOnCategoryTransformer$()</ID>
    <ID>EmptyDefaultConstructor:NonArrivalReasonTransformer.kt$NonArrivalReasonTransformer$()</ID>
    <ID>EmptyDefaultConstructor:OAuth2ResourceServerSecurityConfiguration.kt$AuthAwareTokenConverter$()</ID>
    <ID>EmptyDefaultConstructor:PremisesSummaryTransformer.kt$PremisesSummaryTransformer$()</ID>
    <ID>EmptyDefaultConstructor:StaffMemberTransformer.kt$StaffMemberTransformer$()</ID>
    <ID>EmptyDefaultConstructor:TracesSamplerCallback.kt$TracesSamplerCallback$()</ID>
    <ID>EmptyDefaultConstructor:UserAccessService.kt$UserAccessService$()</ID>
    <ID>ExplicitItLambdaParameter:BedSearchResultTransformerTest.kt$BedSearchResultTransformerTest${ index, it -> val domainResult = domainResults[index] assertThat(domainResult.premisesId).isEqualTo(it.premises.id) assertThat(domainResult.premisesName).isEqualTo(it.premises.name) assertThat(domainResult.premisesAddressLine1).isEqualTo(it.premises.addressLine1) assertThat(domainResult.premisesAddressLine2).isEqualTo(it.premises.addressLine2) assertThat(domainResult.premisesTown).isEqualTo(it.premises.town) assertThat(domainResult.premisesPostcode).isEqualTo(it.premises.postcode) assertThat(domainResult.premisesCharacteristics).isEqualTo(it.premises.characteristics.map { c -> CharacteristicNames(c.propertyName, c.name) }) assertThat(domainResult.premisesBedCount).isEqualTo(it.premises.bedCount) assertThat(domainResult.roomId).isEqualTo(it.room.id) assertThat(domainResult.roomName).isEqualTo(it.room.name) assertThat(domainResult.bedId).isEqualTo(it.bed.id) assertThat(domainResult.bedName).isEqualTo(it.bed.name) assertThat(domainResult.roomCharacteristics).isEqualTo(it.room.characteristics.map { c -> CharacteristicNames(c.propertyName, c.name) }) assertThat(domainResult.distance.toBigDecimal()).isEqualTo((it as ApiApprovedPremisesBedSearchResult).distanceMiles) }</ID>
    <ID>ExplicitItLambdaParameter:BedSearchResultTransformerTest.kt$BedSearchResultTransformerTest${ index, it -> val domainResult = domainResults[index] assertThat(domainResult.premisesId).isEqualTo(it.premises.id) assertThat(domainResult.premisesName).isEqualTo(it.premises.name) assertThat(domainResult.premisesAddressLine1).isEqualTo(it.premises.addressLine1) assertThat(domainResult.premisesAddressLine2).isEqualTo(it.premises.addressLine2) assertThat(domainResult.premisesTown).isEqualTo(it.premises.town) assertThat(domainResult.premisesPostcode).isEqualTo(it.premises.postcode) assertThat(domainResult.premisesCharacteristics).isEqualTo(it.premises.characteristics.map { c -> CharacteristicNames(c.propertyName, c.name) }) assertThat(domainResult.premisesBedCount).isEqualTo(it.premises.bedCount) assertThat(domainResult.roomId).isEqualTo(it.room.id) assertThat(domainResult.roomName).isEqualTo(it.room.name) assertThat(domainResult.bedId).isEqualTo(it.bed.id) assertThat(domainResult.bedName).isEqualTo(it.bed.name) assertThat(domainResult.roomCharacteristics).isEqualTo(it.room.characteristics.map { c -> CharacteristicNames(c.propertyName, c.name) }) assertThat(domainResult.overlaps).isEqualTo((it as ApiTemporaryAccommodationBedSearchResult).overlaps) }</ID>
    <ID>ExplicitItLambdaParameter:BookingSearchTransformerTest.kt$BookingSearchTransformerTest${ index, it -> val domainResult = domainResults[index] assertThat(it.person.name).isEqualTo(domainResult.personName) assertThat(it.person.crn).isEqualTo(domainResult.personCrn) assertThat(it.booking.id).isEqualTo(domainResult.bookingId) assertThat(it.booking.status.value).isEqualTo(domainResult.bookingStatus) assertThat(it.booking.startDate).isEqualTo(domainResult.bookingStartDate) assertThat(it.booking.endDate).isEqualTo(domainResult.bookingEndDate) assertThat(it.booking.createdAt).isEqualTo(domainResult.bookingCreatedAt.toInstant()) assertThat(it.premises.id).isEqualTo(domainResult.premisesId) assertThat(it.premises.name).isEqualTo(domainResult.premisesName) assertThat(it.premises.addressLine1).isEqualTo(domainResult.premisesAddressLine1) assertThat(it.premises.addressLine2).isEqualTo(domainResult.premisesAddressLine2) assertThat(it.premises.town).isEqualTo(domainResult.premisesTown) assertThat(it.premises.postcode).isEqualTo(domainResult.premisesPostcode) assertThat(it.room.id).isEqualTo(domainResult.roomId) assertThat(it.room.name).isEqualTo(domainResult.roomName) assertThat(it.bed.id).isEqualTo(domainResult.bedId) assertThat(it.bed.name).isEqualTo(domainResult.bedName) }</ID>
    <ID>ForbiddenComment:PremisesController.kt$PremisesController$// TODO: Bookings will need to be specialised in a similar way to Premises so that TA Bookings do not have a keyWorkerStaffCode field</ID>
    <ID>ForbiddenComment:PremisesEntity.kt$ApprovedPremisesEntity$// TODO: Make not-null once Premises have had point added in all environments</ID>
    <ID>ForbiddenComment:UserAccessService.kt$UserAccessService$// TODO: Revisit if Approved Premises introduces region-limited access</ID>
    <ID>ForbiddenComment:UserAccessService.kt$UserAccessService$// TODO: Revisit once Temporary Accommodation introduces user roles</ID>
    <ID>FunctionNaming:ApplicationEntity.kt$ApplicationRepository$@Query("SELECT a FROM ApplicationEntity a WHERE TYPE(a) = :type AND a.createdByUser.id = :id") fun &lt;T : ApplicationEntity> findAllByCreatedByUser_Id(id: UUID, type: Class&lt;T>): List&lt;ApplicationEntity></ID>
    <ID>FunctionNaming:AssessmentEntity.kt$AssessmentRepository$fun findByApplication_IdAndReallocatedAtNull(applicationId: UUID): AssessmentEntity?</ID>
    <ID>FunctionNaming:BedMoveEntity.kt$BedMoveRepository$@Query("SELECT b FROM BedMoveEntity b WHERE b.booking.id = :bookingId") fun findByBooking_IdOrNull(bookingId: UUID): BedMoveEntity?</ID>
    <ID>FunctionNaming:Cas2ApplicationEntity.kt$Cas2ApplicationRepository$@Query("SELECT a FROM Cas2ApplicationEntity a WHERE a.createdByUser.id = :id") fun findAllByCreatedByUser_Id(id: UUID): List&lt;Cas2ApplicationEntity></ID>
    <ID>FunctionNaming:PlacementApplicationEntity.kt$PlacementApplicationRepository$fun findAllByAllocatedToUser_IdAndReallocatedAtNull(userId: UUID): List&lt;PlacementApplicationEntity></ID>
    <ID>FunctionNaming:PlacementRequestEntity.kt$PlacementRequestRepository$fun findAllByAllocatedToUser_IdAndReallocatedAtNullAndIsWithdrawnFalse(userId: UUID): List&lt;PlacementRequestEntity></ID>
    <ID>FunctionNaming:PremisesEntity.kt$PremisesRepository$@Query("SELECT p FROM PremisesEntity p WHERE p.probationRegion.id = :probationRegionId AND TYPE(p) = :type") fun &lt;T : PremisesEntity> findAllByProbationRegion_IdAndType(probationRegionId: UUID, type: Class&lt;T>): List&lt;PremisesEntity></ID>
    <ID>FunctionNaming:PremisesEntity.kt$PremisesRepository$fun findAllByProbationRegion_Id(probationRegionId: UUID): List&lt;PremisesEntity></ID>
    <ID>FunctionNaming:ProbationDeliveryUnitEntity.kt$ProbationDeliveryUnitRepository$fun findAllByProbationRegion_Id(probationRegionId: UUID): List&lt;ProbationDeliveryUnitEntity></ID>
    <ID>FunctionNaming:ProbationDeliveryUnitEntity.kt$ProbationDeliveryUnitRepository$fun findByIdAndProbationRegion_Id(id: UUID, probationRegionId: UUID): ProbationDeliveryUnitEntity?</ID>
    <ID>FunctionNaming:ProbationDeliveryUnitEntity.kt$ProbationDeliveryUnitRepository$fun findByNameAndProbationRegion_Id(name: String, probationRegionId: UUID): ProbationDeliveryUnitEntity?</ID>
    <ID>ImplicitDefaultLocale:DbExtension.kt$DbExtension$String.format("Failed to capture initial database state due to error: \"%s\"", e.message)</ID>
    <ID>ImplicitDefaultLocale:DbExtension.kt$DbExtension$String.format("Failed to clean database due to error: \"%s\"", e.message)</ID>
    <ID>ImplicitDefaultLocale:DbExtension.kt$DbExtension$String.format("Failed to restore initial database state due to error: \"%s\"", e.message)</ID>
    <ID>ImplicitDefaultLocale:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$String.format("%.1f days", averagePlacementMatchingTimeliness)</ID>
    <ID>ImplicitDefaultLocale:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$String.format("%.1f days", averageTimeliness)</ID>
    <ID>ImplicitDefaultLocale:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$String.format("%.1f%%", percentage)</ID>
    <ID>ImplicitDefaultLocale:ReferralsMetricsReportGenerator.kt$ReferralsMetricsReportGenerator$String.format("%.1f%%", percentage)</ID>
    <ID>InvalidPackageDeclaration:UserSpecifications.kt$package uk.gov.justice.digital.hmpps.approvedpremisesapi.jpa.specification</ID>
    <ID>LargeClass:ApplicationServiceTest.kt$ApplicationServiceTest</ID>
    <ID>LargeClass:ApplicationTest.kt$ApplicationTest : IntegrationTestBase</ID>
    <ID>LargeClass:AssessmentServiceTest.kt$AssessmentServiceTest</ID>
    <ID>LargeClass:AssessmentTest.kt$AssessmentTest : IntegrationTestBase</ID>
    <ID>LargeClass:BookingService.kt$BookingService</ID>
    <ID>LargeClass:BookingServiceTest.kt$BookingServiceTest</ID>
    <ID>LargeClass:BookingTest.kt$BookingTest : IntegrationTestBase</ID>
    <ID>LargeClass:BookingTransformerTest.kt$BookingTransformerTest</ID>
    <ID>LargeClass:DomainEventServiceTest.kt$DomainEventServiceTest</ID>
    <ID>LargeClass:LostBedsTest.kt$LostBedsTest : IntegrationTestBase</ID>
    <ID>LargeClass:PremisesTest.kt$PremisesTest : IntegrationTestBase</ID>
    <ID>LongMethod:BedSearchRepositoryTest.kt$BedSearchRepositoryTest$@Test fun `Searching for a Temporary Accommodation Bed returns correct results`()</ID>
    <ID>LongMethod:BedSearchRepositoryTest.kt$BedSearchRepositoryTest$@Test fun `Searching for an Approved Premises Bed returns correct results`()</ID>
    <ID>LongMethod:BookingTransformerTest.kt$BookingTransformerTest$@Test fun `Temporary Accommodation Entity with edited departure is correctly transformed`()</ID>
    <ID>LongMethod:BookingTransformerTest.kt$BookingTransformerTest$@Test fun `Temporary Accommodation entity with non-zero day turnaround period and departure with turnaround period in past is correctly transformed to closed status`()</ID>
    <ID>LongMethod:BookingTransformerTest.kt$BookingTransformerTest$@Test fun `Temporary Accommodation entity with non-zero day turnaround period and departure within turnaround period is correctly transformed to departed status`()</ID>
    <ID>LongMethod:SeedUtils.kt$@Suppress("CyclomaticComplexMethod") fun getCanonicalLocalAuthorityName(localAuthorityName: String): String</ID>
    <ID>LongMethod:UserAllocationsEngineTest.kt$UserAllocationsEngineTest$@BeforeEach fun setup()</ID>
    <ID>LongParameterList:ApplicationEntity.kt$ApplicationEntity$( @Id val id: UUID, val crn: String, @ManyToOne @JoinColumn(name = "created_by_user_id") val createdByUser: UserEntity, @Type(type = "com.vladmihalcea.hibernate.type.json.JsonType") var data: String?, @Type(type = "com.vladmihalcea.hibernate.type.json.JsonType") var document: String?, @ManyToOne @JoinColumn(name = "schema_version") var schemaVersion: JsonSchemaEntity, val createdAt: OffsetDateTime, var submittedAt: OffsetDateTime?, @Transient var schemaUpToDate: Boolean, @OneToMany(mappedBy = "application") var assessments: MutableList&lt;AssessmentEntity>, var nomsNumber: String?, )</ID>
    <ID>LongParameterList:ApplicationEntity.kt$ApprovedPremisesApplicationEntity$( id: UUID, crn: String, createdByUser: UserEntity, data: String?, document: String?, schemaVersion: JsonSchemaEntity, createdAt: OffsetDateTime, submittedAt: OffsetDateTime?, schemaUpToDate: Boolean, assessments: MutableList&lt;AssessmentEntity>, var isWomensApplication: Boolean?, var isPipeApplication: Boolean?, var isEmergencyApplication: Boolean?, var isEsapApplication: Boolean?, var isInapplicable: Boolean?, var isWithdrawn: Boolean, var withdrawalReason: String?, var otherWithdrawalReason: String?, val convictionId: Long, val eventNumber: String, val offenceId: String, nomsNumber: String?, @Type(type = "com.vladmihalcea.hibernate.type.json.JsonType") @Convert(disableConversion = true) val riskRatings: PersonRisks?, @OneToMany(mappedBy = "application") val teamCodes: MutableList&lt;ApplicationTeamCodeEntity>, @OneToMany(mappedBy = "application") var placementRequests: MutableList&lt;PlacementRequestEntity>, var releaseType: String?, var arrivalDate: OffsetDateTime?, var name: String, var targetLocation: String?, )</ID>
    <ID>LongParameterList:ApplicationEntity.kt$TemporaryAccommodationApplicationEntity$( id: UUID, crn: String, createdByUser: UserEntity, data: String?, document: String?, schemaVersion: JsonSchemaEntity, createdAt: OffsetDateTime, submittedAt: OffsetDateTime?, schemaUpToDate: Boolean, assessments: MutableList&lt;AssessmentEntity>, nomsNumber: String?, val convictionId: Long, val eventNumber: String, val offenceId: String, @Type(type = "com.vladmihalcea.hibernate.type.json.JsonType") @Convert(disableConversion = true) val riskRatings: PersonRisks?, @ManyToOne @JoinColumn(name = "probation_region_id") val probationRegion: ProbationRegionEntity, var arrivalDate: OffsetDateTime?, var isRegisteredSexOffender: Boolean?, var needsAccessibleProperty: Boolean?, var hasHistoryOfArson: Boolean?, var isDutyToReferSubmitted: Boolean?, var dutyToReferSubmissionDate: LocalDate?, var isEligible: Boolean?, var eligibilityReason: String?, )</ID>
    <ID>LongParameterList:ApplicationReportsTest.kt$ApplicationReportsTest$(applicationId: UUID, reportRow: ApplicationReportRow, userEntity: UserEntity, hasBooking: Boolean = true, hasCancellation: Boolean = false, hasDeparture: Boolean = false, hasNonArrival: Boolean = false)</ID>
    <ID>LongParameterList:ApplicationService.kt$ApplicationService$( applicationId: UUID, isWomensApplication: Boolean?, isPipeApplication: Boolean?, isEmergencyApplication: Boolean?, isEsapApplication: Boolean?, releaseType: String?, arrivalDate: LocalDate?, data: String, isInapplicable: Boolean?, username: String, )</ID>
    <ID>LongParameterList:ApplicationService.kt$ApplicationService$( crn: String, user: UserEntity, jwt: String, convictionId: Long?, deliusEventNumber: String?, offenceId: String?, createWithRisks: Boolean? = true, )</ID>
    <ID>LongParameterList:ApplicationService.kt$ApplicationService$( offenderDetails: OffenderDetailSummary, user: UserEntity, jwt: String, convictionId: Long?, deliusEventNumber: String?, offenceId: String?, createWithRisks: Boolean? = true, )</ID>
    <ID>LongParameterList:ApplicationService.kt$ApplicationService$( private val userRepository: NomisUserRepository, private val applicationRepository: Cas2ApplicationRepository, private val jsonSchemaService: JsonSchemaService, private val offenderService: OffenderService, private val userService: NomisUserService, private val userAccessService: UserAccessService, private val domainEventService: DomainEventService, private val objectMapper: ObjectMapper, @Value("\${url-templates.frontend.application}") private val applicationUrlTemplate: String, )</ID>
    <ID>LongParameterList:ApplicationService.kt$ApplicationService$( private val userRepository: UserRepository, private val applicationRepository: ApplicationRepository, private val applicationsTransformer: ApplicationsTransformer, private val jsonSchemaService: JsonSchemaService, private val offenderService: OffenderService, private val userService: UserService, private val assessmentService: AssessmentService, private val offlineApplicationRepository: OfflineApplicationRepository, private val domainEventService: DomainEventService, private val cas3DomainEventService: Cas3DomainEventService, private val communityApiClient: CommunityApiClient, private val apDeliusContextApiClient: ApDeliusContextApiClient, private val applicationTeamCodeRepository: ApplicationTeamCodeRepository, private val emailNotificationService: EmailNotificationService, private val userAccessService: UserAccessService, private val notifyConfig: NotifyConfig, private val assessmentClarificationNoteTransformer: AssessmentClarificationNoteTransformer, private val objectMapper: ObjectMapper, @Value("\${url-templates.frontend.application}") private val applicationUrlTemplate: String, )</ID>
    <ID>LongParameterList:ApplicationsController.kt$ApplicationsController$( private val httpAuthService: HttpAuthService, private val applicationService: ApplicationService, private val placementApplicationService: PlacementApplicationService, private val applicationsTransformer: ApplicationsTransformer, private val assessmentTransformer: AssessmentTransformer, private val placementApplicationTransformer: PlacementApplicationTransformer, private val objectMapper: ObjectMapper, private val offenderService: OffenderService, private val documentTransformer: DocumentTransformer, private val assessmentService: AssessmentService, private val userService: UserService, private val taskTransformer: TaskTransformer, )</ID>
    <ID>LongParameterList:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$( fileName: String, private val bookingRepository: BookingRepository, private val bookingService: BookingService, private val communityApiClient: CommunityApiClient, private val bedRepository: BedRepository, private val departureReasonRepository: DepartureReasonRepository, private val moveOnCategoryRepository: MoveOnCategoryRepository, private val destinationProviderRepository: DestinationProviderRepository, private val nonArrivalReasonRepository: NonArrivalReasonRepository, private val cancellationReasonRepository: CancellationReasonRepository, )</ID>
    <ID>LongParameterList:AssessmentController.kt$AssessmentController$( private val objectMapper: ObjectMapper, private val assessmentService: AssessmentService, private val userService: UserService, private val offenderService: OffenderService, private val assessmentTransformer: AssessmentTransformer, private val assessmentClarificationNoteTransformer: AssessmentClarificationNoteTransformer, private val assessmentReferralHistoryNoteTransformer: AssessmentReferralHistoryNoteTransformer, )</ID>
    <ID>LongParameterList:AssessmentEntity.kt$ApprovedPremisesAssessmentEntity$( id: UUID, application: ApplicationEntity, data: String?, document: String?, schemaVersion: JsonSchemaEntity, allocatedToUser: UserEntity?, allocatedAt: OffsetDateTime?, reallocatedAt: OffsetDateTime?, createdAt: OffsetDateTime, submittedAt: OffsetDateTime?, decision: AssessmentDecision?, rejectionRationale: String?, clarificationNotes: MutableList&lt;AssessmentClarificationNoteEntity>, referralHistoryNotes: MutableList&lt;AssessmentReferralHistoryNoteEntity>, schemaUpToDate: Boolean, isWithdrawn: Boolean, )</ID>
    <ID>LongParameterList:AssessmentEntity.kt$AssessmentEntity$( @Id val id: UUID, @ManyToOne @JoinColumn(name = "application_id") val application: ApplicationEntity, @Type(type = "com.vladmihalcea.hibernate.type.json.JsonType") var data: String?, @Type(type = "com.vladmihalcea.hibernate.type.json.JsonType") var document: String?, @ManyToOne @JoinColumn(name = "schema_version") var schemaVersion: JsonSchemaEntity, @ManyToOne @JoinColumn(name = "allocated_to_user_id") var allocatedToUser: UserEntity?, var allocatedAt: OffsetDateTime?, var reallocatedAt: OffsetDateTime?, val createdAt: OffsetDateTime, var submittedAt: OffsetDateTime?, @Enumerated(value = EnumType.STRING) var decision: AssessmentDecision?, var rejectionRationale: String?, @OneToMany(mappedBy = "assessment") var clarificationNotes: MutableList&lt;AssessmentClarificationNoteEntity>, @OneToMany(mappedBy = "assessment") var referralHistoryNotes: MutableList&lt;AssessmentReferralHistoryNoteEntity>, @Transient var schemaUpToDate: Boolean, var isWithdrawn: Boolean, )</ID>
    <ID>LongParameterList:AssessmentEntity.kt$DomainAssessmentSummary$( val type: String, val id: UUID, val applicationId: UUID, val createdAt: OffsetDateTime, val riskRatings: String?, val arrivalDate: OffsetDateTime?, val dateOfInfoRequest: OffsetDateTime?, val completed: Boolean, val isStarted: Boolean, val isAllocated: Boolean, val decision: String?, val crn: String, )</ID>
    <ID>LongParameterList:AssessmentEntity.kt$TemporaryAccommodationAssessmentEntity$( id: UUID, application: ApplicationEntity, data: String?, document: String?, schemaVersion: JsonSchemaEntity, allocatedToUser: UserEntity?, allocatedAt: OffsetDateTime?, reallocatedAt: OffsetDateTime?, createdAt: OffsetDateTime, submittedAt: OffsetDateTime?, decision: AssessmentDecision?, rejectionRationale: String?, clarificationNotes: MutableList&lt;AssessmentClarificationNoteEntity>, referralHistoryNotes: MutableList&lt;AssessmentReferralHistoryNoteEntity>, schemaUpToDate: Boolean, var completedAt: OffsetDateTime?, @Type(type = "com.vladmihalcea.hibernate.type.json.JsonType") var summaryData: String, isWithdrawn: Boolean, )</ID>
    <ID>LongParameterList:AssessmentInfo.kt$AssessmentInfo$( val assessmentId: Long, val assessmentType: String, val dateCompleted: OffsetDateTime?, val assessorSignedDate: OffsetDateTime?, val initiationDate: OffsetDateTime, val assessmentStatus: String, val superStatus: String?, val limitedAccessOffender: Boolean, )</ID>
    <ID>LongParameterList:AssessmentService.kt$AssessmentService$( private val userService: UserService, private val userAccessService: UserAccessService, private val assessmentRepository: AssessmentRepository, private val assessmentClarificationNoteRepository: AssessmentClarificationNoteRepository, private val assessmentReferralHistoryNoteRepository: AssessmentReferralHistoryNoteRepository, private val jsonSchemaService: JsonSchemaService, private val domainEventService: DomainEventService, private val offenderService: OffenderService, private val communityApiClient: CommunityApiClient, private val cruService: CruService, private val placementRequestService: PlacementRequestService, private val emailNotificationService: EmailNotificationService, private val notifyConfig: NotifyConfig, private val placementRequirementsService: PlacementRequirementsService, private val objectMapper: ObjectMapper, @Value("\${url-templates.frontend.application}") private val applicationUrlTemplate: String, @Value("\${url-templates.frontend.assessment}") private val assessmentUrlTemplate: String, )</ID>
    <ID>LongParameterList:AssessmentService.kt$AssessmentService$(user: UserEntity, assessmentId: UUID, document: String?, placementRequirements: PlacementRequirements?, placementDates: PlacementDates?, notes: String?)</ID>
    <ID>LongParameterList:AssessmentTransformer.kt$AssessmentTransformer$( private val objectMapper: ObjectMapper, private val applicationsTransformer: ApplicationsTransformer, private val assessmentClarificationNoteTransformer: AssessmentClarificationNoteTransformer, private val assessmentReferralHistoryNoteTransformer: AssessmentReferralHistoryNoteTransformer, private val userTransformer: UserTransformer, private val personTransformer: PersonTransformer, private val risksTransformer: RisksTransformer, )</ID>
    <ID>LongParameterList:BedSearchRepository.kt$ApprovedPremisesBedSearchResult$( premisesId: UUID, premisesName: String, premisesAddressLine1: String, premisesAddressLine2: String?, premisesTown: String?, premisesPostcode: String, premisesCharacteristics: MutableList&lt;CharacteristicNames>, premisesBedCount: Int, roomId: UUID, roomName: String, bedId: UUID, bedName: String, roomCharacteristics: MutableList&lt;CharacteristicNames>, val distance: Double, )</ID>
    <ID>LongParameterList:BedSearchRepository.kt$BedSearchRepository$( postcodeDistrictOutcode: String, maxDistanceMiles: Int, startDate: LocalDate, durationInDays: Int, requiredPremisesCharacteristics: List&lt;UUID>, requiredRoomCharacteristics: List&lt;UUID>, )</ID>
    <ID>LongParameterList:BedSearchRepository.kt$BedSearchResult$( val premisesId: UUID, val premisesName: String, val premisesAddressLine1: String, val premisesAddressLine2: String?, val premisesTown: String?, val premisesPostcode: String, val premisesCharacteristics: MutableList&lt;CharacteristicNames>, val premisesBedCount: Int, val roomId: UUID, val roomName: String, val bedId: UUID, val bedName: String, val roomCharacteristics: MutableList&lt;CharacteristicNames>, )</ID>
    <ID>LongParameterList:BedSearchRepository.kt$TemporaryAccommodationBedSearchResult$( premisesId: UUID, premisesName: String, premisesAddressLine1: String, premisesAddressLine2: String?, premisesTown: String?, premisesPostcode: String, premisesCharacteristics: MutableList&lt;CharacteristicNames>, premisesBedCount: Int, roomId: UUID, roomName: String, bedId: UUID, bedName: String, roomCharacteristics: MutableList&lt;CharacteristicNames>, val overlaps: MutableList&lt;TemporaryAccommodationBedSearchResultOverlap>, )</ID>
    <ID>LongParameterList:BedSearchService.kt$BedSearchService$( user: UserEntity, postcodeDistrictOutcode: String, maxDistanceMiles: Int, startDate: LocalDate, durationInDays: Int, requiredCharacteristics: List&lt;PlacementCriteria>, )</ID>
    <ID>LongParameterList:BookingService.kt$BookingService$( private val premisesService: PremisesService, private val staffMemberService: StaffMemberService, private val offenderService: OffenderService, private val domainEventService: DomainEventService, private val cas3DomainEventService: Cas3DomainEventService, private val cruService: CruService, private val applicationService: ApplicationService, private val workingDayCountService: WorkingDayCountService, private val emailNotificationService: EmailNotificationService, private val placementRequestService: PlacementRequestService, private val communityApiClient: CommunityApiClient, private val bookingRepository: BookingRepository, private val arrivalRepository: ArrivalRepository, private val cancellationRepository: CancellationRepository, private val confirmationRepository: ConfirmationRepository, private val extensionRepository: ExtensionRepository, private val dateChangeRepository: DateChangeRepository, private val departureRepository: DepartureRepository, private val departureReasonRepository: DepartureReasonRepository, private val moveOnCategoryRepository: MoveOnCategoryRepository, private val destinationProviderRepository: DestinationProviderRepository, private val nonArrivalRepository: NonArrivalRepository, private val nonArrivalReasonRepository: NonArrivalReasonRepository, private val cancellationReasonRepository: CancellationReasonRepository, private val bedRepository: BedRepository, private val placementRequestRepository: PlacementRequestRepository, private val lostBedsRepository: LostBedsRepository, private val turnaroundRepository: TurnaroundRepository, private val bedMoveRepository: BedMoveRepository, private val premisesRepository: PremisesRepository, private val assessmentRepository: AssessmentRepository, private val notifyConfig: NotifyConfig, @Value("\${url-templates.frontend.application}") private val applicationUrlTemplate: String, @Value("\${url-templates.frontend.booking}") private val bookingUrlTemplate: String, @Value("\${arrived-departed-domain-events-disabled}") private val arrivedAndDepartedDomainEventsDisabled: Boolean, )</ID>
    <ID>LongParameterList:BookingService.kt$BookingService$( user: UserEntity, placementRequestId: UUID, bedId: UUID?, premisesId: UUID?, arrivalDate: LocalDate, departureDate: LocalDate, )</ID>
    <ID>LongParameterList:BookingService.kt$BookingService$( user: UserEntity, premises: TemporaryAccommodationPremisesEntity, crn: String, nomsNumber: String?, arrivalDate: LocalDate, departureDate: LocalDate, bedId: UUID, assessmentId: UUID?, enableTurnarounds: Boolean, )</ID>
    <ID>LongParameterList:BookingService.kt$BookingService$( user: UserEntity? = null, booking: BookingEntity, arrivalDate: LocalDate, expectedDepartureDate: LocalDate, notes: String?, keyWorkerStaffCode: String?, )</ID>
    <ID>LongParameterList:BookingService.kt$BookingService$( user: UserEntity? = null, booking: BookingEntity, arrivalDateTime: Instant, expectedDepartureDate: LocalDate, notes: String?, keyWorkerStaffCode: String?, )</ID>
    <ID>LongParameterList:BookingService.kt$BookingService$( user: UserEntity? = null, crn: String, nomsNumber: String?, arrivalDate: LocalDate, departureDate: LocalDate, bedId: UUID, eventNumber: String?, bookingId: UUID = UUID.randomUUID(), )</ID>
    <ID>LongParameterList:BookingService.kt$BookingService$( user: UserEntity?, booking: BookingEntity, dateTime: OffsetDateTime, reasonId: UUID, moveOnCategoryId: UUID, destinationProviderId: UUID?, notes: String?, )</ID>
    <ID>LongParameterList:BookingTransformer.kt$BookingTransformer$( private val personTransformer: PersonTransformer, private val staffMemberTransformer: StaffMemberTransformer, private val arrivalTransformer: ArrivalTransformer, private val departureTransformer: DepartureTransformer, private val nonArrivalTransformer: NonArrivalTransformer, private val cancellationTransformer: CancellationTransformer, private val confirmationTransformer: ConfirmationTransformer, private val extensionTransformer: ExtensionTransformer, private val bedTransformer: BedTransformer, private val turnaroundTransformer: TurnaroundTransformer, private val enumConverterFactory: EnumConverterFactory, private val workingDayCountService: WorkingDayCountService, )</ID>
    <ID>LongParameterList:DomainEventService.kt$DomainEventService$( domainEvent: DomainEvent&lt;*>, typeName: String, typeDescription: String, detailUrl: String, crn: String, nomsNumber: String, )</ID>
    <ID>LongParameterList:DomainEventService.kt$DomainEventService$( domainEvent: DomainEvent&lt;T>, typeName: String, typeDescription: String, detailUrl: String, crn: String, nomsNumber: String?, )</ID>
    <ID>LongParameterList:DomainEventService.kt$DomainEventService$( private val objectMapper: ObjectMapper, private val domainEventRepository: DomainEventRepository, private val domainEventBuilder: DomainEventBuilder, private val hmppsQueueService: HmppsQueueService, @Value("\${domain-events.cas3.emit-enabled}") private val emitDomainEventsEnabled: Boolean, @Value("\${url-templates.api.cas3.booking-cancelled-event-detail}") private val bookingCancelledDetailUrlTemplate: String, @Value("\${url-templates.api.cas3.booking-confirmed-event-detail}") private val bookingConfirmedDetailUrlTemplate: String, @Value("\${url-templates.api.cas3.booking-provisionally-made-event-detail}") private val bookingProvisionallyMadeDetailUrlTemplate: String, @Value("\${url-templates.api.cas3.person-arrived-event-detail}") private val personArrivedDetailUrlTemplate: String, @Value("\${url-templates.api.cas3.person-departed-event-detail}") private val personDepartedDetailUrlTemplate: String, @Value("\${url-templates.api.cas3.referral-submitted-event-detail}") private val referralSubmittedDetailUrlTemplate: String, )</ID>
    <ID>LongParameterList:DomainEventService.kt$DomainEventService$( private val objectMapper: ObjectMapper, private val domainEventRepository: DomainEventRepository, private val hmppsQueueService: HmppsQueueService, @Value("\${domain-events.cas1.emit-enabled}") private val emitDomainEventsEnabled: Boolean, @Value("\${url-templates.api.cas1.application-submitted-event-detail}") private val applicationSubmittedDetailUrlTemplate: String, @Value("\${url-templates.api.cas1.application-assessed-event-detail}") private val applicationAssessedDetailUrlTemplate: String, @Value("\${url-templates.api.cas1.booking-made-event-detail}") private val bookingMadeDetailUrlTemplate: String, @Value("\${url-templates.api.cas1.person-arrived-event-detail}") private val personArrivedDetailUrlTemplate: String, @Value("\${url-templates.api.cas1.person-not-arrived-event-detail}") private val personNotArrivedDetailUrlTemplate: String, @Value("\${url-templates.api.cas1.person-departed-event-detail}") private val personDepartedDetailUrlTemplate: String, @Value("\${url-templates.api.cas1.booking-not-made-event-detail}") private val bookingNotMadeDetailUrlTemplate: String, @Value("\${url-templates.api.cas1.booking-cancelled-event-detail}") private val bookingCancelledDetailUrlTemplate: String, @Value("\${url-templates.api.cas1.booking-changed-event-detail}") private val bookingChangedDetailUrlTemplate: String, @Value("\${url-templates.api.cas1.application-withdrawn-event-detail}") private val applicationWithdrawnDetailUrlTemplate: String, )</ID>
    <ID>LongParameterList:GivenAPlacementApplication.kt$( assessmentDecision: AssessmentDecision = AssessmentDecision.ACCEPTED, createdByUser: UserEntity, schema: ApprovedPremisesPlacementApplicationJsonSchemaEntity, crn: String = randomStringMultiCaseWithNumbers(8), allocatedToUser: UserEntity? = null, submittedAt: OffsetDateTime? = null, decision: PlacementApplicationDecision? = null, reallocated: Boolean = false, placementType: PlacementType? = PlacementType.ADDITIONAL_PLACEMENT, )</ID>
    <ID>LongParameterList:GivenAPlacementApplication.kt$( assessmentDecision: AssessmentDecision = AssessmentDecision.ACCEPTED, createdByUser: UserEntity, schema: ApprovedPremisesPlacementApplicationJsonSchemaEntity, crn: String = randomStringMultiCaseWithNumbers(8), allocatedToUser: UserEntity? = null, submittedAt: OffsetDateTime? = null, decision: PlacementApplicationDecision? = null, reallocated: Boolean = false, placementType: PlacementType? = PlacementType.ADDITIONAL_PLACEMENT, block: (placementApplicationEntity: PlacementApplicationEntity) -> Unit, )</ID>
    <ID>LongParameterList:GivenAPlacementRequest.kt$( placementRequestAllocatedTo: UserEntity, assessmentAllocatedTo: UserEntity, createdByUser: UserEntity, crn: String = randomStringMultiCaseWithNumbers(8), reallocated: Boolean = false, expectedArrival: LocalDate? = null, tier: String? = null, block: (placementRequest: PlacementRequestEntity, application: ApplicationEntity) -> Unit, )</ID>
    <ID>LongParameterList:GivenAPlacementRequest.kt$( placementRequestAllocatedTo: UserEntity, assessmentAllocatedTo: UserEntity, createdByUser: UserEntity, crn: String? = null, name: String? = null, reallocated: Boolean = false, isWithdrawn: Boolean = false, isParole: Boolean = false, expectedArrival: LocalDate? = null, tier: String? = null, mappa: String? = null, applicationSubmittedAt: OffsetDateTime = OffsetDateTime.now(), )</ID>
    <ID>LongParameterList:GivenAUser.kt$( id: UUID = UUID.randomUUID(), staffUserDetailsConfigBlock: (StaffUserDetailsFactory.() -> Unit)? = null, roles: List&lt;UserRole> = emptyList(), qualifications: List&lt;UserQualification> = emptyList(), probationRegion: ProbationRegionEntity? = null, isActive: Boolean = true, )</ID>
    <ID>LongParameterList:GivenAUser.kt$( id: UUID = UUID.randomUUID(), staffUserDetailsConfigBlock: (StaffUserDetailsFactory.() -> Unit)? = null, roles: List&lt;UserRole> = emptyList(), qualifications: List&lt;UserQualification> = emptyList(), probationRegion: ProbationRegionEntity? = null, isActive: Boolean = true, block: (userEntity: UserEntity, jwt: String) -> Unit, )</ID>
    <ID>LongParameterList:GivenAnAssessment.kt$( allocatedToUser: UserEntity, createdByUser: UserEntity, crn: String = randomStringMultiCaseWithNumbers(8), reallocated: Boolean = false, data: String? = "{ \"some\": \"data\"}", createdAt: OffsetDateTime? = null, block: ((assessment: AssessmentEntity, application: TemporaryAccommodationApplicationEntity) -> Unit)? = null, )</ID>
    <ID>LongParameterList:GivenAnAssessment.kt$( allocatedToUser: UserEntity, createdByUser: UserEntity, crn: String = randomStringMultiCaseWithNumbers(8), reallocated: Boolean = false, data: String? = "{ \"some\": \"data\"}", decision: AssessmentDecision? = null, submittedAt: OffsetDateTime? = null, block: (assessment: AssessmentEntity, application: ApprovedPremisesApplicationEntity) -> Unit, )</ID>
    <ID>LongParameterList:GivenAnAssessment.kt$( allocatedToUser: UserEntity, createdByUser: UserEntity, crn: String = randomStringMultiCaseWithNumbers(8), reallocated: Boolean = false, data: String? = "{ \"some\": \"data\"}", decision: AssessmentDecision? = null, submittedAt: OffsetDateTime? = null, createdAt: OffsetDateTime? = null, isWithdrawn: Boolean = false, )</ID>
    <ID>LongParameterList:HealthDetails.kt$HealthDetails$( assessmentId: Long, assessmentType: String, dateCompleted: OffsetDateTime?, assessorSignedDate: OffsetDateTime?, initiationDate: OffsetDateTime, assessmentStatus: String, superStatus: String?, limitedAccessOffender: Boolean, val health: HealthDetailsInner, )</ID>
    <ID>LongParameterList:InmateDetailsCacheRefreshWorker.kt$InmateDetailsCacheRefreshWorker$( private val applicationRepository: ApplicationRepository, private val bookingRepository: BookingRepository, private val prisonsApiClient: PrisonsApiClient, private val loggingEnabled: Boolean, private val delayMs: Long, redLock: RedLock, lockDurationMs: Int, )</ID>
    <ID>LongParameterList:JwtAuthHelper.kt$JwtAuthHelper$( subject: String, scope: List&lt;String>? = listOf(), roles: List&lt;String>? = listOf(), authSource: String = "delius", expiryTime: Duration = Duration.ofHours(1), jwtId: String = UUID.randomUUID().toString(), )</ID>
    <ID>LongParameterList:JwtAuthHelper.kt$JwtAuthHelper$( username: String? = null, scope: List&lt;String>? = listOf(), roles: List&lt;String>? = listOf(), authSource: String = if (username == null) "none" else "delius", expiryTime: Duration = Duration.ofHours(1), jwtId: String = UUID.randomUUID().toString(), )</ID>
    <ID>LongParameterList:LostBedsEntity.kt$LostBedsEntity$( @Id val id: UUID, var startDate: LocalDate, var endDate: LocalDate, @ManyToOne @JoinColumn(name = "lost_bed_reason_id") var reason: LostBedReasonEntity, var referenceNumber: String?, var notes: String?, @ManyToOne @JoinColumn(name = "premises_id") var premises: PremisesEntity, @OneToOne(mappedBy = "lostBed") var cancellation: LostBedCancellationEntity?, @ManyToOne @JoinColumn(name = "bed_id") var bed: BedEntity, )</ID>
    <ID>LongParameterList:NeedsDetails.kt$NeedsDetails$( assessmentId: Long, assessmentType: String, dateCompleted: OffsetDateTime?, assessorSignedDate: OffsetDateTime?, initiationDate: OffsetDateTime, assessmentStatus: String, superStatus: String?, limitedAccessOffender: Boolean, val needs: NeedsDetailsInner?, val linksToHarm: LinksToHarm?, val linksToReOffending: LinksToReOffending?, )</ID>
    <ID>LongParameterList:OASysSectionsTransformer.kt$OASysSectionsTransformer$( offenceDetails: OffenceDetails, roshSummary: RoshSummary, risksToTheIndividual: RisksToTheIndividual, riskManagementPlan: RiskManagementPlan, needsDetails: NeedsDetails, requestedOptionalSections: List&lt;Int>, )</ID>
    <ID>LongParameterList:OffenceDetails.kt$OffenceDetails$( assessmentId: Long, assessmentType: String, dateCompleted: OffsetDateTime?, assessorSignedDate: OffsetDateTime?, initiationDate: OffsetDateTime, assessmentStatus: String, superStatus: String?, limitedAccessOffender: Boolean, val offence: OffenceDetailsInner?, )</ID>
    <ID>LongParameterList:OffenderDetailsCacheRefreshWorker.kt$OffenderDetailsCacheRefreshWorker$( private val applicationRepository: ApplicationRepository, private val bookingRepository: BookingRepository, private val communityApiClient: CommunityApiClient, private val loggingEnabled: Boolean, private val delayMs: Long, redLock: RedLock, lockDurationMs: Int, )</ID>
    <ID>LongParameterList:OffenderService.kt$OffenderService$( private val communityApiClient: CommunityApiClient, private val hmppsTierApiClient: HMPPSTierApiClient, private val prisonsApiClient: PrisonsApiClient, private val caseNotesClient: CaseNotesClient, private val apOASysContextApiClient: ApOASysContextApiClient, private val adjudicationsApiClient: AdjudicationsApiClient, private val apDeliusContextApiClient: ApDeliusContextApiClient, prisonCaseNotesConfigBindingModel: PrisonCaseNotesConfigBindingModel, adjudicationsConfigBindingModel: PrisonAdjudicationsConfigBindingModel, )</ID>
    <ID>LongParameterList:PeopleController.kt$PeopleController$( private val httpAuthService: HttpAuthService, private val offenderService: OffenderService, private val personTransformer: PersonTransformer, private val risksTransformer: RisksTransformer, private val prisonCaseNoteTransformer: PrisonCaseNoteTransformer, private val adjudicationTransformer: AdjudicationTransformer, private val alertTransformer: AlertTransformer, private val needsDetailsTransformer: NeedsDetailsTransformer, private val oaSysSectionsTransformer: OASysSectionsTransformer, private val convictionTransformer: ConvictionTransformer, private val userService: UserService, )</ID>
    <ID>LongParameterList:PlacementRequestEntity.kt$PlacementRequestRepository$(status: PlacementRequestStatus?, crn: String?, crnOrName: String?, tier: String?, arrivalDateFrom: LocalDate?, arrivalDateTo: LocalDate?, pageable: Pageable?)</ID>
    <ID>LongParameterList:PlacementRequestRepositoryTest.kt$PlacementRequestRepositoryTest$(count: Int, isWithdrawn: Boolean, isReallocated: Boolean, isParole: Boolean, crn: String? = null, name: String? = null, expectedArrival: LocalDate? = null, tier: String? = null)</ID>
    <ID>LongParameterList:PlacementRequestService.kt$PlacementRequestService$( private val placementRequestRepository: PlacementRequestRepository, private val userService: UserService, private val bookingNotMadeRepository: BookingNotMadeRepository, private val domainEventService: DomainEventService, private val emailNotificationService: EmailNotificationService, private val notifyConfig: NotifyConfig, private val offenderService: OffenderService, private val communityApiClient: CommunityApiClient, private val cruService: CruService, private val placementRequirementsRepository: PlacementRequirementsRepository, private val placementDateRepository: PlacementDateRepository, private val cancellationRepository: CancellationRepository, @Value("\${url-templates.frontend.application}") private val applicationUrlTemplate: String, )</ID>
    <ID>LongParameterList:PlacementRequestService.kt$PlacementRequestService$(status: PlacementRequestStatus?, crn: String?, crnOrName: String?, tier: String?, arrivalDateStart: LocalDate?, arrivalDateEnd: LocalDate?, page: Int?, sortBy: PlacementRequestSortField, sortDirection: SortDirection?)</ID>
    <ID>LongParameterList:PlacementRequestsController.kt$PlacementRequestsController$( private val userService: UserService, private val placementRequestService: PlacementRequestService, private val placementRequestTransformer: PlacementRequestTransformer, private val placementRequestDetailTransformer: PlacementRequestDetailTransformer, private val offenderService: OffenderService, private val bookingService: BookingService, private val bookingConfirmationTransformer: NewPlacementRequestBookingConfirmationTransformer, private val bookingNotMadeTransformer: BookingNotMadeTransformer, )</ID>
    <ID>LongParameterList:PlacementRequestsTest.kt$PlacementRequestsTest.Dashboard$(offenderDetails: OffenderDetailSummary, user: UserEntity, duration: Int = 12, expectedArrival: LocalDate = LocalDate.now(), createdAt: OffsetDateTime = OffsetDateTime.now(), applicationDate: OffsetDateTime = OffsetDateTime.now())</ID>
    <ID>LongParameterList:PreemptiveCacheRefresher.kt$PreemptiveCacheRefresher$( private val flyway: Flyway, private val applicationRepository: ApplicationRepository, private val bookingRepository: BookingRepository, private val communityApiClient: CommunityApiClient, private val prisonsApiClient: PrisonsApiClient, @Value("\${preemptive-cache-logging-enabled}") private val loggingEnabled: Boolean, @Value("\${preemptive-cache-delay-ms}") private val delayMs: Long, @Value("\${preemptive-cache-lock-duration-ms}") private val lockDurationMs: Int, redLock: RedLock, )</ID>
    <ID>LongParameterList:PremisesController.kt$PremisesController$( private val usersService: UserService, private val userAccessService: UserAccessService, private val premisesService: PremisesService, private val offenderService: OffenderService, private val bookingService: BookingService, private val lostBedsService: LostBedService, private val bedService: BedService, private val calendarService: CalendarService, private val premisesTransformer: PremisesTransformer, private val premisesSummaryTransformer: PremisesSummaryTransformer, private val bookingTransformer: BookingTransformer, private val lostBedsTransformer: LostBedsTransformer, private val arrivalTransformer: ArrivalTransformer, private val nonArrivalTransformer: NonArrivalTransformer, private val cancellationTransformer: CancellationTransformer, private val confirmationTransformer: ConfirmationTransformer, private val departureTransformer: DepartureTransformer, private val extensionTransformer: ExtensionTransformer, private val staffMemberTransformer: StaffMemberTransformer, private val staffMemberService: StaffMemberService, private val roomService: RoomService, private val roomTransformer: RoomTransformer, private val lostBedCancellationTransformer: LostBedCancellationTransformer, private val turnaroundTransformer: TurnaroundTransformer, private val bedSummaryTransformer: BedSummaryTransformer, private val bedDetailTransformer: BedDetailTransformer, private val calendarTransformer: CalendarTransformer, private val dateChangeTransformer: DateChangeTransformer, )</ID>
    <ID>LongParameterList:PremisesEntity.kt$ApprovedPremisesEntity$( id: UUID, name: String, addressLine1: String, addressLine2: String?, town: String?, postcode: String, longitude: Double?, latitude: Double?, totalBeds: Int, notes: String, emailAddress: String?, probationRegion: ProbationRegionEntity, localAuthorityArea: LocalAuthorityAreaEntity, bookings: MutableList&lt;BookingEntity>, lostBeds: MutableList&lt;LostBedsEntity>, var apCode: String, var qCode: String, rooms: MutableList&lt;RoomEntity>, characteristics: MutableList&lt;CharacteristicEntity>, status: PropertyStatus, var point: Point?, // TODO: Make not-null once Premises have had point added in all environments )</ID>
    <ID>LongParameterList:PremisesEntity.kt$PremisesEntity$( @Id val id: UUID, var name: String, var addressLine1: String, var addressLine2: String?, var town: String?, var postcode: String, var longitude: Double?, var latitude: Double?, var totalBeds: Int, var notes: String, var emailAddress: String?, @ManyToOne @JoinColumn(name = "probation_region_id") var probationRegion: ProbationRegionEntity, @ManyToOne @JoinColumn(name = "local_authority_area_id") var localAuthorityArea: LocalAuthorityAreaEntity?, @OneToMany(mappedBy = "premises") val bookings: MutableList&lt;BookingEntity>, @OneToMany(mappedBy = "premises") val lostBeds: MutableList&lt;LostBedsEntity>, @OneToMany(mappedBy = "premises") val rooms: MutableList&lt;RoomEntity>, @ManyToMany @JoinTable( name = "premises_characteristics", joinColumns = [JoinColumn(name = "premises_id")], inverseJoinColumns = [JoinColumn(name = "characteristic_id")], ) var characteristics: MutableList&lt;CharacteristicEntity>, @Enumerated(value = EnumType.STRING) var status: PropertyStatus, )</ID>
    <ID>LongParameterList:PremisesEntity.kt$TemporaryAccommodationPremisesEntity$( id: UUID, name: String, addressLine1: String, addressLine2: String?, town: String?, postcode: String, longitude: Double?, latitude: Double?, totalBeds: Int, notes: String, emailAddress: String?, probationRegion: ProbationRegionEntity, localAuthorityArea: LocalAuthorityAreaEntity?, bookings: MutableList&lt;BookingEntity>, lostBeds: MutableList&lt;LostBedsEntity>, rooms: MutableList&lt;RoomEntity>, characteristics: MutableList&lt;CharacteristicEntity>, status: PropertyStatus, @ManyToOne @JoinColumn(name = "probation_delivery_unit_id") var probationDeliveryUnit: ProbationDeliveryUnitEntity?, var turnaroundWorkingDayCount: Int, )</ID>
    <ID>LongParameterList:PremisesService.kt$PremisesService$( addressLine1: String, addressLine2: String?, town: String?, postcode: String, latitude: Double?, longitude: Double?, service: String, localAuthorityAreaId: UUID?, probationRegionId: UUID, name: String, notes: String?, characteristicIds: List&lt;UUID>, status: PropertyStatus, probationDeliveryUnitIdentifier: Either&lt;String, UUID>?, turnaroundWorkingDayCount: Int?, )</ID>
    <ID>LongParameterList:PremisesService.kt$PremisesService$( lostBedId: UUID, startDate: LocalDate, endDate: LocalDate, reasonId: UUID, referenceNumber: String?, notes: String?, )</ID>
    <ID>LongParameterList:PremisesService.kt$PremisesService$( premises: PremisesEntity, startDate: LocalDate, endDate: LocalDate, reasonId: UUID, referenceNumber: String?, notes: String?, bedId: UUID, )</ID>
    <ID>LongParameterList:PremisesService.kt$PremisesService$( premisesId: UUID, addressLine1: String, addressLine2: String?, town: String?, postcode: String, localAuthorityAreaId: UUID?, probationRegionId: UUID, characteristicIds: List&lt;UUID>, notes: String?, status: PropertyStatus, probationDeliveryUnitIdentifier: Either&lt;String, UUID>?, turnaroundWorkingDayCount: Int?, )</ID>
    <ID>LongParameterList:PremisesService.kt$PremisesService$( private val premisesRepository: PremisesRepository, private val lostBedsRepository: LostBedsRepository, private val bookingRepository: BookingRepository, private val lostBedReasonRepository: LostBedReasonRepository, private val localAuthorityAreaRepository: LocalAuthorityAreaRepository, private val probationRegionRepository: ProbationRegionRepository, private val lostBedCancellationRepository: LostBedCancellationRepository, private val probationDeliveryUnitRepository: ProbationDeliveryUnitRepository, private val characteristicService: CharacteristicService, private val roomRepository: RoomRepository, private val bedRepository: BedRepository, )</ID>
    <ID>LongParameterList:RedisConfiguration.kt$RedisConfiguration$( buildProperties: BuildProperties, objectMapper: ObjectMapper, @Value("\${caches.staffMembers.expiry-seconds}") staffMembersExpirySeconds: Long, @Value("\${caches.staffMember.expiry-seconds}") staffMemberExpirySeconds: Long, @Value("\${caches.userAccess.expiry-seconds}") userAccessExpirySeconds: Long, @Value("\${caches.staffDetails.expiry-seconds}") staffDetailsExpirySeconds: Long, @Value("\${caches.teamManagingCases.expiry-seconds}") teamManagingCasesExpirySeconds: Long, @Value("\${caches.ukBankHolidays.expiry-seconds}") ukBankHolidaysExpirySeconds: Long, @Value("21600") crnGetCaseDetailExpirySeconds: Long, )</ID>
    <ID>LongParameterList:ReferenceDataController.kt$ReferenceDataController$( private val departureReasonRepository: DepartureReasonRepository, private val moveOnCategoryRepository: MoveOnCategoryRepository, private val destinationProviderRepository: DestinationProviderRepository, private val cancellationReasonRepository: CancellationReasonRepository, private val lostBedReasonRepository: LostBedReasonRepository, private val localAuthorityAreaRepository: LocalAuthorityAreaRepository, private val characteristicRepository: CharacteristicRepository, private val probationRegionRepository: ProbationRegionRepository, private val nonArrivalReasonRepository: NonArrivalReasonRepository, private val probationDeliveryUnitRepository: ProbationDeliveryUnitRepository, private val departureReasonTransformer: DepartureReasonTransformer, private val moveOnCategoryTransformer: MoveOnCategoryTransformer, private val destinationProviderTransformer: DestinationProviderTransformer, private val cancellationReasonTransformer: CancellationReasonTransformer, private val lostBedReasonTransformer: LostBedReasonTransformer, private val localAuthorityAreaTransformer: LocalAuthorityAreaTransformer, private val characteristicTransformer: CharacteristicTransformer, private val probationRegionTransformer: ProbationRegionTransformer, private val nonArrivalReasonTransformer: NonArrivalReasonTransformer, private val probationDeliveryUnitTransformer: ProbationDeliveryUnitTransformer, )</ID>
    <ID>LongParameterList:ReferralsMetricsReportGeneratorTest.kt$ReferralsMetricsReportGeneratorTest$( tier: String?, hasInformationRequests: Boolean = false, decision: AssessmentDecision = AssessmentDecision.ACCEPTED, rejectionReason: String? = null, releaseType: String = "license", applicationSubmittedAt: LocalDate = LocalDate.now(), assessmentSubmittedAt: LocalDate = LocalDate.now(), isPipe: Boolean = false, isEsap: Boolean = false, )</ID>
    <ID>LongParameterList:ReportService.kt$ReportService$( private val bookingRepository: BookingRepository, private val bedRepository: BedRepository, private val lostBedsRepository: LostBedsRepository, private val bookingTransformer: BookingTransformer, private val workingDayCountService: WorkingDayCountService, private val applicationEntityReportRowRepository: ApplicationEntityReportRowRepository, private val offenderService: OffenderService, private val applicationRepository: ApplicationRepository, private val domainEventRepository: DomainEventRepository, private val assessmentRepository: AssessmentRepository, private val timelinessEntityRepository: ApplicationTimelinessEntityRepository, private val objectMapper: ObjectMapper, )</ID>
    <ID>LongParameterList:RiskManagementPlan.kt$RiskManagementPlan$( assessmentId: Long, assessmentType: String, dateCompleted: OffsetDateTime?, assessorSignedDate: OffsetDateTime?, initiationDate: OffsetDateTime, assessmentStatus: String, superStatus: String?, limitedAccessOffender: Boolean, val riskManagementPlan: RiskManagementPlanInner?, )</ID>
    <ID>LongParameterList:RiskToTheIndividual.kt$RisksToTheIndividual$( assessmentId: Long, assessmentType: String, dateCompleted: OffsetDateTime?, assessorSignedDate: OffsetDateTime?, initiationDate: OffsetDateTime, assessmentStatus: String, superStatus: String?, limitedAccessOffender: Boolean, val riskToTheIndividual: RiskToTheIndividualInner?, )</ID>
    <ID>LongParameterList:RoshRatings.kt$RoshRatings$( assessmentId: Long, assessmentType: String, dateCompleted: OffsetDateTime?, assessorSignedDate: OffsetDateTime?, initiationDate: OffsetDateTime, assessmentStatus: String, superStatus: String?, limitedAccessOffender: Boolean, val rosh: RoshRatingsInner, )</ID>
    <ID>LongParameterList:RoshSummary.kt$RoshSummary$( assessmentId: Long, assessmentType: String, dateCompleted: OffsetDateTime?, assessorSignedDate: OffsetDateTime?, initiationDate: OffsetDateTime, assessmentStatus: String, superStatus: String?, limitedAccessOffender: Boolean, val roshSummary: RoshSummaryInner?, )</ID>
    <ID>LongParameterList:TasksController.kt$TasksController$( private val userService: UserService, private val assessmentService: AssessmentService, private val placementRequestService: PlacementRequestService, private val taskTransformer: TaskTransformer, private val offenderService: OffenderService, private val placementApplicationService: PlacementApplicationService, private val enumConverterFactory: EnumConverterFactory, private val userTransformer: UserTransformer, private val taskService: TaskService, )</ID>
    <ID>LongParameterList:TemporaryAccommodationPremisesSeedJob.kt$TemporaryAccommodationPremisesSeedJob$( row: TemporaryAccommodationPremisesSeedCsvRow, existingPremises: TemporaryAccommodationPremisesEntity, probationRegion: ProbationRegionEntity, localAuthorityArea: LocalAuthorityAreaEntity, probationDeliveryUnit: ProbationDeliveryUnitEntity, characteristics: List&lt;CharacteristicEntity>, )</ID>
    <ID>LongParameterList:UserAllocationsEngineTest.kt$UserAllocationsEngineTest$(deliusUsername: String, isAssessor: Boolean, qualifications: List&lt;UserQualification>, numberOfPendingAssessments: Int, numberOfRecentCompletedAssessments: Int, numberOfLessRecentCompletedAssessments: Int, isActive: Boolean = true, isExcluded: Boolean = false)</ID>
    <ID>LongParameterList:UserAllocationsEngineTest.kt$UserAllocationsEngineTest$(deliusUsername: String, isMatcher: Boolean, qualifications: List&lt;UserQualification>, numberOfPlacementApplications: Int, numberOfRecentCompletedPlacementApplications: Int, numberOfLessRecentCompletedPlacementApplications: Int, isActive: Boolean = true, isExcluded: Boolean = false)</ID>
    <ID>LongParameterList:UserAllocationsEngineTest.kt$UserAllocationsEngineTest$(deliusUsername: String, isMatcher: Boolean, qualifications: List&lt;UserQualification>, numberOfPlacementRequests: Int, numberOfRecentCompletedPlacementRequests: Int, numberOfLessRecentCompletedPlacementRequests: Int, isActive: Boolean = true, isExcluded: Boolean = false)</ID>
    <ID>LongParameterList:UserService.kt$UserService$( @Value("\${assign-default-region-to-users-with-unknown-region}") private val assignDefaultRegionToUsersWithUnknownRegion: Boolean, private val currentRequest: HttpServletRequest, private val httpAuthService: HttpAuthService, private val offenderService: OffenderService, private val communityApiClient: CommunityApiClient, private val userRepository: UserRepository, private val userRoleAssignmentRepository: UserRoleAssignmentRepository, private val userQualificationAssignmentRepository: UserQualificationAssignmentRepository, private val probationRegionRepository: ProbationRegionRepository, private val probationAreaProbationRegionMappingRepository: ProbationAreaProbationRegionMappingRepository, private val userTransformer: UserTransformer, )</ID>
    <ID>MagicNumber:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$1_000</ID>
    <ID>MagicNumber:ApprovedPremisesSeedJob.kt$ApprovedPremisesSeedJob$4326</ID>
    <ID>MagicNumber:BaseHMPPSClient.kt$BaseHMPPSClient.HMPPSRequestConfiguration$10000</ID>
    <ID>MagicNumber:BookingService.kt$BookingService$7</ID>
    <ID>MagicNumber:CommunityApiClient.kt$CommunityApiClient$10</ID>
    <ID>MagicNumber:CommunityApiClient.kt$CommunityApiClient$12</ID>
    <ID>MagicNumber:CommunityApiClient.kt$CommunityApiClient$30</ID>
    <ID>MagicNumber:CommunityApiClient.kt$CommunityApiClient$5</ID>
    <ID>MagicNumber:CommunityApiClient.kt$CommunityApiClient$6</ID>
    <ID>MagicNumber:InmateDetailsCacheRefreshWorker.kt$InmateDetailsCacheRefreshWorker$50</ID>
    <ID>MagicNumber:MigrationJobService.kt$MigrationJobService$50</ID>
    <ID>MagicNumber:OASysSectionsTransformer.kt$OASysSectionsTransformer$10</ID>
    <ID>MagicNumber:OASysSectionsTransformer.kt$OASysSectionsTransformer$11</ID>
    <ID>MagicNumber:OASysSectionsTransformer.kt$OASysSectionsTransformer$12</ID>
    <ID>MagicNumber:OASysSectionsTransformer.kt$OASysSectionsTransformer$3</ID>
    <ID>MagicNumber:OASysSectionsTransformer.kt$OASysSectionsTransformer$4</ID>
    <ID>MagicNumber:OASysSectionsTransformer.kt$OASysSectionsTransformer$5</ID>
    <ID>MagicNumber:OASysSectionsTransformer.kt$OASysSectionsTransformer$6</ID>
    <ID>MagicNumber:OASysSectionsTransformer.kt$OASysSectionsTransformer$7</ID>
    <ID>MagicNumber:OAuth2ResourceServerSecurityConfiguration.kt$OAuth2ResourceServerSecurityConfiguration$401</ID>
    <ID>MagicNumber:OAuth2ResourceServerSecurityConfiguration.kt$OAuth2ResourceServerSecurityConfiguration.&lt;no name provided>$401</ID>
    <ID>MagicNumber:OffenderDetailsCacheRefreshWorker.kt$OffenderDetailsCacheRefreshWorker$50</ID>
    <ID>MagicNumber:PaginationUtils.kt$10</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$120</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$121</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$15</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$150</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$151</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$16</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$180</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$181</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$275</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$276</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$3</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$30</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$31</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$365</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$366</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$4</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$60</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$61</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$8</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$90</ID>
    <ID>MagicNumber:PlacementMetricsReportGenerator.kt$PlacementMetricsReportGenerator$91</ID>
    <ID>MagicNumber:PreemptiveCacheRefresher.kt$CacheRefreshWorker$1000</ID>
    <ID>MagicNumber:PreemptiveCacheRefresher.kt$CacheRefreshWorker$10000</ID>
    <ID>MagicNumber:PreemptiveCacheRefresher.kt$PreemptiveCacheRefresher$100</ID>
    <ID>MagicNumber:PrisonsApiClient.kt$PrisonsApiClient$10</ID>
    <ID>MagicNumber:PrisonsApiClient.kt$PrisonsApiClient$12</ID>
    <ID>MagicNumber:PrisonsApiClient.kt$PrisonsApiClient$30</ID>
    <ID>MagicNumber:PrisonsApiClient.kt$PrisonsApiClient$5</ID>
    <ID>MagicNumber:PrisonsApiClient.kt$PrisonsApiClient$6</ID>
    <ID>MagicNumber:ReferralsMetricsReportGenerator.kt$ReferralsMetricsReportGenerator$10</ID>
    <ID>MagicNumber:ReferralsMetricsReportGenerator.kt$ReferralsMetricsReportGenerator$100</ID>
    <ID>MagicNumber:ReportsController.kt$ReportsController$12</ID>
    <ID>MagicNumber:TaskTransformer.kt$TaskTransformer$10</ID>
    <ID>MagicNumber:UpdateAllUsersFromCommunityApiJob.kt$UpdateAllUsersFromCommunityApiJob$500</ID>
    <ID>MaxLineLength:AcceptAssessmentTest.kt$AcceptAssessmentTest$every { placementRequirementsServiceMock.createPlacementRequirements(assessment, placementRequirements) } returns ValidatableActionResult.GeneralValidationError("Couldn't create Placement Requirements")</ID>
    <ID>MaxLineLength:ApplicationReportsTest.kt$ApplicationReportsTest$private</ID>
    <ID>MaxLineLength:ApplicationService.kt$ApplicationService$fun</ID>
    <ID>MaxLineLength:ApplicationTest.kt$ApplicationTest.GetAssessmentForApplication$private</ID>
    <ID>MaxLineLength:ApplicationsController.kt$ApplicationsController$ServiceName.approvedPremises -> applicationService.createApprovedPremisesApplication(personInfo.offenderDetailSummary, user, deliusPrincipal.token.tokenValue, body.convictionId, body.deliusEventNumber, body.offenceId, createWithRisks)</ID>
    <ID>MaxLineLength:ApplicationsController.kt$ApplicationsController$when</ID>
    <ID>MaxLineLength:AssessmentService.kt$AssessmentService$fun</ID>
    <ID>MaxLineLength:AssessmentSummaryQueryTest.kt$AssessmentSummaryQueryTest$assertThat(summary.riskRatings).isEqualTo("""{"roshRisks":{"status":"NotFound","value":null},"mappa":{"status":"NotFound","value":null},"tier":{"status":"NotFound","value":null},"flags":{"status":"NotFound","value":null}}""")</ID>
    <ID>MaxLineLength:AssessmentTest.kt$AssessmentTest$fun</ID>
    <ID>MaxLineLength:AssessmentTest.kt$AssessmentTest$listOf(assessmentTransformer.transformDomainToApiSummary(toAssessmentSummaryEntity(assessment), PersonInfoResult.Success.Full(offenderDetails.otherIds.crn, offenderDetails, inmateDetails)))</ID>
    <ID>MaxLineLength:AssessmentTest.kt$AssessmentTest$}</ID>
    <ID>MaxLineLength:AuthTest.kt$AuthTest$val jwt = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhcHByb3ZlZC1wcmVtaXNlcy1hcGkiLCJncmFudF90eXBlIjoiY2xpZW50X2NyZWRlbnRpYWxzIiwic2NvcGUiOlsicmVhZCJdLCJhdXRoX3NvdXJjZSI6Im5vbmUiLCJpc3MiOiJodHRwOi8vbG9jYWxob3N0OjkwOTEvYXV0aC9pc3N1ZXIiLCJleHAiOjI2NTk3MDQ5NDAsImF1dGhvcml0aWVzIjpbIlJPTEVfSU5URVJWRU5USU9OUyIsIlJPTEVfT0FTWVNfUkVBRF9PTkxZIiwiUk9MRV9DT01NVU5JVFkiLCJST0xFX0dMT0JBTF9TRUFSQ0giLCJST0xFX0NPTU1VTklUWV9VU0VSUyIsIlJPTEVfUklTS19TVU1NQVJZIl0sImp0aSI6ImlTSEtsTXJ1aXFUNjF0dTNXVFFqckE2WWJfTSIsImNsaWVudF9pZCI6ImFwcHJvdmVkLXByZW1pc2VzLWFwaSJ9.Cr7Nl09vjUpyieddsJwyQF02nmqhR6PbM4xePA47ukkyhhctE4SwqpOAO5D5OIstr9ePnlmF_Tug7HZ6-SLF8lBnN9C_M2-74d8127gPkQxjWsGnAKIxAGDnwLjtwV1UpSvS0p-Phg3cBTGiq6_HABEuh2JSD67eJS0ZaqNPUXXp2kTfi1ZJXA1ysxFKvAP5qYHbBpYWfvFq9Wkpsrq4sM41yjzS7hmkpaEUAYvKUdYefeRAT6nMCU6pfkEOoCmXkMTf6n6rJ1HxxTvkucZwEQk1dOKZUH0d_AOjZy5RAXiSRzgiYsMfB02gvn2T0FfOyjkjKXgVDsFc2yf3bd6P0g"</ID>
    <ID>MaxLineLength:BedSearchServiceTest.kt$BedSearchServiceTest$every { mockCharacteristicService.getCharacteristicsByPropertyNames(listOf(premisesCharacteristic.propertyName!!, roomCharacteristic.propertyName!!)) } returns listOf(premisesCharacteristic, roomCharacteristic)</ID>
    <ID>MaxLineLength:BedUsageReportGeneratorTest.kt$BedUsageReportGeneratorTest$every { mockBookingRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), temporaryAccommodationBed) } returns listOf(temporaryAccommodationBooking)</ID>
    <ID>MaxLineLength:BedUsageReportGeneratorTest.kt$BedUsageReportGeneratorTest$every { mockLostBedsRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), temporaryAccommodationBed) } returns listOf(temporaryAccommodationLostBed)</ID>
    <ID>MaxLineLength:BedUsageReportGeneratorTest.kt$BedUsageReportGeneratorTest$every { mockLostBedsRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), temporaryAccommodationBedInProbationRegion) } returns listOf(temporaryAccommodationLostBedInProbationArea)</ID>
    <ID>MaxLineLength:BedUsageReportGeneratorTest.kt$BedUsageReportGeneratorTest$every { mockLostBedsRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), temporaryAccommodationBedOutsideProbationRegion) } returns listOf(temporaryAccommodationLostBedOutsideProbationArea)</ID>
    <ID>MaxLineLength:BedUtilisationReportGeneratorTest.kt$BedUtilisationReportGeneratorTest$every { mockBookingRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), bed) } returns listOf(relevantBookingStraddlingStartOfMonth, relevantBookingStraddlingEndOfMonth)</ID>
    <ID>MaxLineLength:BedUtilisationReportGeneratorTest.kt$BedUtilisationReportGeneratorTest$every { mockLostBedsRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), bed) } returns listOf(relevantVoidStraddlingStartOfMonth, relevantVoidStraddlingEndOfMonth)</ID>
    <ID>MaxLineLength:BedUtilisationReportGeneratorTest.kt$BedUtilisationReportGeneratorTest$every { mockLostBedsRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), temporaryAccommodationBed) } returns listOf(temporaryAccommodationLostBed)</ID>
    <ID>MaxLineLength:BedUtilisationReportGeneratorTest.kt$BedUtilisationReportGeneratorTest$every { mockLostBedsRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), temporaryAccommodationBedInProbationRegion) } returns listOf(temporaryAccommodationLostBedInProbationArea)</ID>
    <ID>MaxLineLength:BedUtilisationReportGeneratorTest.kt$BedUtilisationReportGeneratorTest$every { mockLostBedsRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), temporaryAccommodationBedOutsideProbationRegion) } returns listOf(temporaryAccommodationLostBedOutsideProbationArea)</ID>
    <ID>MaxLineLength:BookingEntity.kt$BookingRepository$@Query("SELECT b FROM BookingEntity b WHERE b.bed.id = :bedId AND b.arrivalDate &lt;= :endDate AND b.departureDate >= :startDate AND SIZE(b.cancellations) = 0 AND (CAST(:thisEntityId as org.hibernate.type.UUIDCharType) IS NULL OR b.id != :thisEntityId)")</ID>
    <ID>MaxLineLength:BookingServiceTest.kt$BookingServiceTest$fun</ID>
    <ID>MaxLineLength:BookingServiceTest.kt$BookingServiceTest$val authorisableResult = bookingService.createTemporaryAccommodationBooking(user, premises, crn, "NOMS123", LocalDate.parse("2023-02-23"), LocalDate.parse("2023-02-22"), bedId, assessmentId, false)</ID>
    <ID>MaxLineLength:BookingServiceTest.kt$BookingServiceTest.CreateApprovedPremisesAdHocBooking$(it["bookingUrl"] as String).matches(Regex("http://frontend/premises/[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}/bookings/[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}"))</ID>
    <ID>MaxLineLength:BookingServiceTest.kt$BookingServiceTest.CreateApprovedPremisesAdHocBooking$every { mockCommunityApiClient.getStaffUserDetails(user.deliusUsername) } returns ClientResult.Failure.StatusCode(HttpMethod.GET, "/staff-details/${user.deliusUsername}", HttpStatus.NOT_FOUND, null)</ID>
    <ID>MaxLineLength:BookingServiceTest.kt$BookingServiceTest.CreateApprovedPremisesBookingFromPlacementRequest$(it["bookingUrl"] as String).matches(Regex("http://frontend/premises/[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}/bookings/[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}"))</ID>
    <ID>MaxLineLength:BookingServiceTest.kt$BookingServiceTest.CreateDateChange$every { mockLostBedsRepository.findByBedIdAndOverlappingDate(temporaryAccommodationBed.id, LocalDate.parse("2023-07-12"), LocalDate.parse("2023-07-14"), null) } returns listOf(conflictingLostBed)</ID>
    <ID>MaxLineLength:BookingTransformerTest.kt$BookingTransformerTest$reason = CancellationReason(id = UUID.fromString("dd6444f7-af56-436c-8451-ca993617471e"), name = "Some other reason", isActive = true, serviceScope = ServiceName.temporaryAccommodation.value)</ID>
    <ID>MaxLineLength:BookingTransformerTest.kt$BookingTransformerTest$reason = CancellationReasonEntity(id = UUID.fromString("dd6444f7-af56-436c-8451-ca993617471e"), name = "Some other reason", isActive = true, serviceScope = ServiceName.temporaryAccommodation.value)</ID>
    <ID>MaxLineLength:DailyMetricReportRow.kt$// Date	Applications Started	Unique Users starting applications	Applications Submitted	Unique Users submitting applications	Assessments completed	Unique Users completing assessments	Bookings made	Unique Users making bookings</ID>
    <ID>MaxLineLength:DomainEventEntity.kt$DomainEventRepository$@Query("SELECT new uk.gov.justice.digital.hmpps.approvedpremisesapi.model.DomainEventSummary(cast(d.id as string), d.type, d.occurredAt) FROM DomainEventEntity d WHERE d.applicationId = :applicationId")</ID>
    <ID>MaxLineLength:ExceptionHandling.kt$ExceptionHandling$private fun logBadRequestProblem(problem: BadRequestProblem)</ID>
    <ID>MaxLineLength:IntegrationTestBase.kt$IntegrationTestBase$approvedPremisesPlacementApplicationJsonSchemaEntityFactory = PersistedFactory({ ApprovedPremisesPlacementApplicationJsonSchemaEntityFactory() }, approvedPremisesPlacementApplicationJsonSchemaRepository)</ID>
    <ID>MaxLineLength:IntegrationTestBase.kt$IntegrationTestBase$lateinit var approvedPremisesPlacementApplicationJsonSchemaEntityFactory: PersistedFactory&lt;ApprovedPremisesPlacementApplicationJsonSchemaEntity, UUID, ApprovedPremisesPlacementApplicationJsonSchemaEntityFactory></ID>
    <ID>MaxLineLength:IntegrationTestBase.kt$IntegrationTestBase$lateinit var temporaryAccommodationApplicationJsonSchemaEntityFactory: PersistedFactory&lt;TemporaryAccommodationApplicationJsonSchemaEntity, UUID, TemporaryAccommodationApplicationJsonSchemaEntityFactory></ID>
    <ID>MaxLineLength:IntegrationTestBase.kt$IntegrationTestBase$lateinit var temporaryAccommodationAssessmentJsonSchemaEntityFactory: PersistedFactory&lt;TemporaryAccommodationAssessmentJsonSchemaEntity, UUID, TemporaryAccommodationAssessmentJsonSchemaEntityFactory></ID>
    <ID>MaxLineLength:LostBedReportGeneratorTest.kt$LostBedReportGeneratorTest$every { mockLostBedsRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), temporaryAccommodationBed) } returns listOf(temporaryAccommodationLostBed)</ID>
    <ID>MaxLineLength:LostBedReportGeneratorTest.kt$LostBedReportGeneratorTest$every { mockLostBedsRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), temporaryAccommodationBedInProbationRegion) } returns listOf(temporaryAccommodationLostBedInProbationArea)</ID>
    <ID>MaxLineLength:LostBedReportGeneratorTest.kt$LostBedReportGeneratorTest$every { mockLostBedsRepository.findAllByOverlappingDateForBed(LocalDate.parse("2023-04-01"), LocalDate.parse("2023-04-30"), temporaryAccommodationBedOutsideProbationRegion) } returns listOf(temporaryAccommodationLostBedOutsideProbationArea)</ID>
    <ID>MaxLineLength:NotFoundProblem.kt$NotFoundProblem$class</ID>
    <ID>MaxLineLength:OAuth2ResourceServerSecurityConfiguration.kt$LoggingInMemoryOAuth2AuthorizedClientService$log.info("Retrieved a client_credentials JWT for service->service calls for client ${authorizedClient.clientRegistration.clientId} with authorities: ${info.authorities}, scopes: ${info.scope}, expiry: ${info.exp}")</ID>
    <ID>MaxLineLength:OffenderServiceTest.kt$OffenderServiceTest$private fun mock404Registrations(crn: String)</ID>
    <ID>MaxLineLength:OffenderServiceTest.kt$OffenderServiceTest$private fun mock500Registrations(crn: String)</ID>
    <ID>MaxLineLength:OffenderServiceTest.kt$OffenderServiceTest$private fun mock500RoSH(crn: String, jwt: String)</ID>
    <ID>MaxLineLength:PersistedFactory.kt$PersistedFactory$class</ID>
    <ID>MaxLineLength:PlacementApplicationService.kt$PlacementApplicationService$fun</ID>
    <ID>MaxLineLength:PlacementRequestEntity.kt$PlacementRequestRepository$fun</ID>
    <ID>MaxLineLength:PlacementRequestRepositoryTest.kt$PlacementRequestRepositoryTest$`Given a Placement Request`(user, user, user, reallocated = isReallocated, isWithdrawn = isWithdrawn, isParole = isParole, crn = crn, name = name, expectedArrival = expectedArrival, tier = tier).first</ID>
    <ID>MaxLineLength:PlacementRequestRepositoryTest.kt$PlacementRequestRepositoryTest$private</ID>
    <ID>MaxLineLength:PlacementRequestService.kt$PlacementRequestService$fun</ID>
    <ID>MaxLineLength:PlacementRequestsController.kt$PlacementRequestsController$override</ID>
    <ID>MaxLineLength:PlacementRequestsController.kt$PlacementRequestsController$val (requests, metadata) = placementRequestService.getAllActive(status, crn, crnOrName, tier?.value, arrivalDateStart, arrivalDateEnd, page, sortBy ?: PlacementRequestSortField.createdAt, sortDirection)</ID>
    <ID>MaxLineLength:PlacementRequestsTest.kt$PlacementRequestsTest.Dashboard$private</ID>
    <ID>MaxLineLength:PlacementRequestsTest.kt$PlacementRequestsTest.SinglePlacementRequest$fun</ID>
    <ID>MaxLineLength:PremisesEntity.kt$PremisesRepository$@Query("SELECT new uk.gov.justice.digital.hmpps.approvedpremisesapi.jpa.entity.ApprovedPremisesSummary(p.id, p.name, p.addressLine1, p.addressLine2, p.postcode, p.status, CAST(COUNT(b) as int), p.apCode) FROM ApprovedPremisesEntity p LEFT JOIN p.rooms r LEFT JOIN r.beds b GROUP BY p.id, p.name, p.addressLine1, p.addressLine2, p.postcode, p.apCode, p.status")</ID>
    <ID>MaxLineLength:ReferralsMetricsReportGeneratorTest.kt$ReferralsMetricsReportGeneratorTest$val assessmentsRejectedInsufficientContingencyPlan = (1..7).map { createDto("A0", decision = AssessmentDecision.REJECTED, rejectionReason = "Reject, insufficient information: Insufficient contingency plan") }</ID>
    <ID>MaxLineLength:ReferralsMetricsReportGeneratorTest.kt$ReferralsMetricsReportGeneratorTest$val assessmentsRejectedInsufficientMoveOnPlan = (1..8).map { createDto("A0", decision = AssessmentDecision.REJECTED, rejectionReason = "Reject, insufficient information: Insufficient move on plan") }</ID>
    <ID>MaxLineLength:ReferralsMetricsReportGeneratorTest.kt$ReferralsMetricsReportGeneratorTest$val assessmentsRejectedNeedsCannotBeMet = (1..2).map { createDto("A0", decision = AssessmentDecision.REJECTED, rejectionReason = "Reject, not suitable for an AP: Health / social care / disability needs cannot be met") }</ID>
    <ID>MaxLineLength:ReferralsMetricsReportGeneratorTest.kt$ReferralsMetricsReportGeneratorTest$val assessmentsRejectedRequestedInformationNotProvided = (1..6).map { createDto("A0", decision = AssessmentDecision.REJECTED, rejectionReason = "Reject, insufficient information: Requested information not provided by probation practitioner") }</ID>
    <ID>MaxLineLength:ReferralsMetricsReportGeneratorTest.kt$ReferralsMetricsReportGeneratorTest$val assessmentsRejectedRiskToHighToStaff = (1..11).map { createDto("A0", decision = AssessmentDecision.REJECTED, rejectionReason = "Reject, risk too high (must be approved by an AP Area Manager (APAM): Risk to staff") }</ID>
    <ID>MaxLineLength:ReferralsMetricsReportGeneratorTest.kt$ReferralsMetricsReportGeneratorTest$val assessmentsRejectedRiskTooHighToCommunity = (1..9).map { createDto("A0", decision = AssessmentDecision.REJECTED, rejectionReason = "Reject, risk too high (must be approved by an AP Area Manager (APAM): Risk to community") }</ID>
    <ID>MaxLineLength:ReferralsMetricsReportGeneratorTest.kt$ReferralsMetricsReportGeneratorTest$val assessmentsRejectedRiskTooHighToOtherPeopleInAP = (1..10).map { createDto("A0", decision = AssessmentDecision.REJECTED, rejectionReason = "Reject, risk too high (must be approved by an AP Area Manager (APAM): Risk to other people in AP") }</ID>
    <ID>MaxLineLength:ReferralsMetricsReportGeneratorTest.kt$ReferralsMetricsReportGeneratorTest$val assessmentsRejectedSupervisionPeriodTooShort = (1..3).map { createDto("A0", decision = AssessmentDecision.REJECTED, rejectionReason = "Reject, not suitable for an AP: Remaining supervision period too short") }</ID>
    <ID>MaxLineLength:SeedTemporaryAccommodationSmokeTest.kt$SeedTemporaryAccommodationSmokeTest$"APP,78 Applemill Court,Pudding Lane,Hereford,HR6 7ZP,West Midlands,Herefordshire,\"Herefordshire, Shropshire and Telford\",TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,,app@emailaddress.com"</ID>
    <ID>MaxLineLength:SeedTemporaryAccommodationSmokeTest.kt$SeedTemporaryAccommodationSmokeTest$"CHE,1 CherryTree Lane,,Sheffield,SH7 4PB,Yorkshire and the Humber,Sheffield,Sheffield,FALSE,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE,TRUE,FALSE,\"Property is located on the same road as a primary school and a park.\",che@emailaddress.com\n"</ID>
    <ID>MaxLineLength:SeedTemporaryAccommodationSmokeTest.kt$SeedTemporaryAccommodationSmokeTest$"Property reference,Address Line 1,Address Line 2 (optional),City/Town,Postcode,Region,Local authority / Borough,Probation delivery unit (PDU),Floor level access?,Wheelchair accessible?,Pub nearby?,Park nearby?,School nearby?,Women only?,Men only?,Not suitable for RSO?,Not suitable for arson offenders?,Optional notes,Email Address\n"</ID>
    <ID>MaxLineLength:SeedTemporaryAccommodationSmokeTest.kt$SeedTemporaryAccommodationSmokeTest$"Property reference,Bedspace reference,Single bed?,Double bed?,Shared kitchen?,Floor level access?,Lift access?,Wheelchair accessible?,Not suitable for RSO?,Not suitable for arson offenders?,Optional notes about the bedspace,Email address\n"</ID>
    <ID>MaxLineLength:SeedTemporaryAccommodationSmokeTest.kt$SeedTemporaryAccommodationSmokeTest$"SIL,12 Silverhill Lane,Broadheath,Bath,BA3 0EZ,South West,Bath and North East Somerset,Bath and North Somerset (Bath and North East Somerset and North Somerset),FALSE,FALSE,FALSE,FALSE,FALSE,TRUE,FALSE,FALSE,TRUE,\"This property has 3 bedspaces, with shared kitchen facilities.\",sil@emailaddress.com\n"</ID>
    <ID>MaxLineLength:SeedTemporaryAccommodationSmokeTest.kt$SeedTemporaryAccommodationSmokeTest$"STR,24 Strawberry Road,City Centre,Newport,NP1 0PA,Wales,Newport,\"Gwent (Blaenau Gwent, Caerphilly, Monmouthshire, Newport, Torfaen)\",FALSE,FALSE,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,\"Not suitable to those who hold addictive behaviours.\",str@emailaddress.com\n"</ID>
    <ID>MaxLineLength:SeedTemporaryAccommodationSmokeTest.kt$SeedTemporaryAccommodationSmokeTest$"WED,1 Wednesday Street,,Westminster,SE19 4EP,London,Lewisham,Lewisham and Bromley,TRUE,TRUE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,FALSE,\"Property is located in a block of flats. Bedspace is accessible for wheelchair users, as has ground floor access and a lift up to the property. Cleaning turn around is 7 days.\",wed@emailaddress.com\n"</ID>
    <ID>MaxLineLength:SeedUsersTest.kt$SeedUsersTest$println("${it.staffUserDetails.username}\n" + it.iterationValidations.mapIndexed { index, validation -> " Run $index: roles correct = ${validation.rolesCorrect}, qalifications correct = ${validation.qualificationsCorrect}" }.joinToString("\n"))</ID>
    <ID>MaxLineLength:TasksController.kt$TasksController$transformedAllocatableUsers</ID>
    <ID>MaxLineLength:UnauthenticatedProblem.kt$UnauthenticatedProblem$class</ID>
    <ID>MaxLineLength:UserAccessServiceTest.kt$UserAccessServiceTest$fun</ID>
    <ID>MaxLineLength:UserAllocationsEngine.kt$UserAllocationsEngine$class</ID>
    <ID>MaxLineLength:UserAllocationsEngineTest.kt$UserAllocationsEngineTest$private</ID>
    <ID>MaxLineLength:UserService.kt$UserService$fun</ID>
    <ID>MaxLineLength:UserService.kt$UserService$return (deliusUser.email !== user.email) || (deliusUser.telephoneNumber !== user.telephoneNumber) || (deliusUser.staff.fullName != user.name) || (deliusUser.staffCode != user.deliusStaffCode) || (deliusUser.probationArea.code != user.probationRegion.deliusCode)</ID>
    <ID>MaxLineLength:UsersController.kt$UsersController$override</ID>
    <ID>MaxLineLength:UsersController.kt$UsersController$private</ID>
    <ID>NestedBlockDepth:CalendarService.kt$CalendarService$fun getCalendarInfo(user: UserEntity, premisesId: UUID, startDate: LocalDate, endDate: LocalDate): Map&lt;CalendarBedInfo, List&lt;CalendarOccupancyInfo>></ID>
    <ID>NestedBlockDepth:DbExtension.kt$DbExtension$private fun setInitialDatabaseState(dataSource: DataSource)</ID>
    <ID>NestedBlockDepth:DeserializationValidationService.kt$DeserializationValidationService$fun validateObject(path: String = "$", targetType: KClass&lt;*>, jsonObject: ObjectNode): Map&lt;String, String></ID>
    <ID>NestedBlockDepth:OffenderService.kt$OffenderService$fun getInfoForPerson(crn: String, deliusUsername: String, ignoreLao: Boolean): PersonInfoResult</ID>
    <ID>NestedBlockDepth:OffenderService.kt$OffenderService$fun getOffenderByCrn(crn: String, userDistinguishedName: String, ignoreLao: Boolean = false): AuthorisableActionResult&lt;OffenderDetailSummary></ID>
    <ID>NestedBlockDepth:SeedService.kt$SeedService$@PostConstruct fun autoSeed()</ID>
    <ID>PrintStackTrace:DbExtension.kt$DbExtension$e</ID>
    <ID>ProtectedMemberInFinalClass:PreemptiveCacheRefresher.kt$PreemptiveCacheRefresher$protected val log = LoggerFactory.getLogger(this::class.java)</ID>
    <ID>ReturnCount:ApplicationService.kt$ApplicationService$@Transactional fun submitApplication( submitApplication: SubmitCas2Application, ): AuthorisableActionResult&lt;ValidatableActionResult&lt;Cas2ApplicationEntity>></ID>
    <ID>ReturnCount:ApplicationService.kt$ApplicationService$@Transactional fun submitApprovedPremisesApplication(applicationId: UUID, submitApplication: SubmitApprovedPremisesApplication, username: String, jwt: String): AuthorisableActionResult&lt;ValidatableActionResult&lt;ApplicationEntity>></ID>
    <ID>ReturnCount:ApplicationService.kt$ApplicationService$@Transactional fun submitTemporaryAccommodationApplication( applicationId: UUID, submitApplication: SubmitTemporaryAccommodationApplication, ): AuthorisableActionResult&lt;ValidatableActionResult&lt;ApplicationEntity>></ID>
    <ID>ReturnCount:ApplicationService.kt$ApplicationService$fun updateApplication(applicationId: UUID, data: String?, username: String?): AuthorisableActionResult&lt;ValidatableActionResult&lt;Cas2ApplicationEntity>></ID>
    <ID>ReturnCount:ApplicationService.kt$ApplicationService$fun updateApprovedPremisesApplication( applicationId: UUID, isWomensApplication: Boolean?, isPipeApplication: Boolean?, isEmergencyApplication: Boolean?, isEsapApplication: Boolean?, releaseType: String?, arrivalDate: LocalDate?, data: String, isInapplicable: Boolean?, username: String, ): AuthorisableActionResult&lt;ValidatableActionResult&lt;ApplicationEntity>></ID>
    <ID>ReturnCount:ApplicationService.kt$ApplicationService$fun updateTemporaryAccommodationApplication( applicationId: UUID, data: String, username: String, ): AuthorisableActionResult&lt;ValidatableActionResult&lt;ApplicationEntity>></ID>
    <ID>ReturnCount:AssessmentService.kt$AssessmentService$fun acceptAssessment(user: UserEntity, assessmentId: UUID, document: String?, placementRequirements: PlacementRequirements?, placementDates: PlacementDates?, notes: String?): AuthorisableActionResult&lt;ValidatableActionResult&lt;AssessmentEntity>></ID>
    <ID>ReturnCount:AssessmentService.kt$AssessmentService$fun closeAssessment( user: UserEntity, assessmentId: UUID, ): AuthorisableActionResult&lt;ValidatableActionResult&lt;AssessmentEntity>></ID>
    <ID>ReturnCount:AssessmentService.kt$AssessmentService$fun rejectAssessment(user: UserEntity, assessmentId: UUID, document: String?, rejectionRationale: String): AuthorisableActionResult&lt;ValidatableActionResult&lt;AssessmentEntity>></ID>
    <ID>ReturnCount:AssessmentService.kt$AssessmentService$fun updateAssessment(user: UserEntity, assessmentId: UUID, data: String?): AuthorisableActionResult&lt;ValidatableActionResult&lt;AssessmentEntity>></ID>
    <ID>ReturnCount:AssessmentService.kt$AssessmentService$fun updateAssessmentClarificationNote(user: UserEntity, assessmentId: UUID, id: UUID, response: String, responseReceivedOn: LocalDate): AuthorisableActionResult&lt;ValidatableActionResult&lt;AssessmentClarificationNoteEntity>></ID>
    <ID>ReturnCount:ExceptionHandling.kt$ExceptionHandling$override fun toProblem(throwable: Throwable, status: StatusType): ThrowableProblem?</ID>
    <ID>ReturnCount:OffenderService.kt$OffenderService$fun getInfoForPerson(crn: String, deliusUsername: String, ignoreLao: Boolean): PersonInfoResult</ID>
    <ID>ReturnCount:PlacementApplicationService.kt$PlacementApplicationService$@Transactional fun recordDecision(id: UUID, placementApplicationDecisionEnvelope: PlacementApplicationDecisionEnvelope): AuthorisableActionResult&lt;ValidatableActionResult&lt;PlacementApplicationEntity>></ID>
    <ID>ReturnCount:TaskService.kt$TaskService$fun reallocateTask(requestUser: UserEntity, taskType: TaskType, userToAllocateToId: UUID, id: UUID): AuthorisableActionResult&lt;ValidatableActionResult&lt;Reallocation>></ID>
    <ID>SpreadOperator:ReportGenerator.kt$ReportGenerator$(*sorted.toTypedArray())</ID>
    <ID>SpreadOperator:UserAllocationsEngine.kt$UserAllocationsEngine$(*predicates.toTypedArray())</ID>
    <ID>SpreadOperator:UserService.kt$UserService$(*UserRole.getAllRolesForService(ServiceName.temporaryAccommodation).toTypedArray())</ID>
    <ID>SpreadOperator:UserSpecifications.kt$(*predicates.toTypedArray())</ID>
    <ID>SwallowedException:DeserializationValidationService.kt$e: Exception</ID>
    <ID>SwallowedException:OffenderService.kt$OffenderService$exception: Exception</ID>
    <ID>SwallowedException:PlacementRequestTransformer.kt$PlacementRequestTransformer$exception: Exception</ID>
    <ID>SwallowedException:SeedService.kt$SeedService$exception: Exception</ID>
    <ID>ThrowsCount:ApplicationService.kt$ApplicationService$private fun createApplicationSubmittedEvent(application: ApprovedPremisesApplicationEntity, submitApplication: SubmitApprovedPremisesApplication, username: String, jwt: String)</ID>
    <ID>ThrowsCount:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$private fun createBooking( row: ApprovedPremisesBookingSeedCsvRow, )</ID>
    <ID>ThrowsCount:DeletePremisesController.kt$DeletePremisesController$@RequestMapping(method = [RequestMethod.DELETE], value = ["/internal/premises/{premisesId}"]) fun internalDeletePremises(@PathVariable("premisesId") premisesId: UUID): ResponseEntity&lt;Unit></ID>
    <ID>ThrowsCount:DeleteRoomController.kt$DeleteRoomController$@RequestMapping(method = [RequestMethod.DELETE], value = ["/internal/room/{roomId}"]) fun internalDeletePremises(@PathVariable("roomId") roomId: UUID): ResponseEntity&lt;Unit></ID>
    <ID>ThrowsCount:DocumentsController.kt$DocumentsController$@RequestMapping(method = [RequestMethod.GET], value = ["/documents/{crn}/{documentId}"], produces = ["application/octet-stream"]) fun documentsCrnDocumentIdGet(@PathVariable("crn") crn: String, @PathVariable("documentId") documentId: String): ResponseEntity&lt;StreamingResponseBody></ID>
    <ID>ThrowsCount:ReportsController.kt$ReportsController$private fun validateParameters(probationRegionId: UUID?, month: Int)</ID>
    <ID>TooGenericExceptionCaught:BaseHMPPSClient.kt$BaseHMPPSClient$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:CommunityApiClient.kt$CommunityApiClient$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:DeserializationValidationService.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MigrationJobService.kt$MigrationJobService$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:OAuth2ResourceServerSecurityConfiguration.kt$LoggingInMemoryOAuth2AuthorizedClientService$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:OffenderService.kt$OffenderService$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:PersonRisks.kt$PersonRisksConverter$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:PlacementRequestTransformer.kt$PlacementRequestTransformer$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:PreemptiveCacheRefresher.kt$CacheRefreshWorker$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:SeedService.kt$SeedService$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:SeedService.kt$SeedService$exception: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:UpdateAllUsersFromCommunityApiJob.kt$UpdateAllUsersFromCommunityApiJob$exception: Exception</ID>
    <ID>TooGenericExceptionCaught:UsersSeedJob.kt$UsersSeedJob$exception: Exception</ID>
    <ID>TooGenericExceptionThrown:AdjudicationTransformer.kt$AdjudicationTransformer$throw RuntimeException("Agency ${result.agencyId} not found")</ID>
    <ID>TooGenericExceptionThrown:ApplicationReportsTest.kt$ApplicationReportsTest$throw Exception("No offender found for CRN ${application.crn}")</ID>
    <ID>TooGenericExceptionThrown:ApplicationService.kt$ApplicationService$throw RuntimeException( "CAS2 applications now require " + "NomisUser", )</ID>
    <ID>TooGenericExceptionThrown:ApplicationService.kt$ApplicationService$throw RuntimeException("Cannot create an Application for an Offender without a NOMS number")</ID>
    <ID>TooGenericExceptionThrown:ApplicationService.kt$ApplicationService$throw RuntimeException("Could not get user")</ID>
    <ID>TooGenericExceptionThrown:ApplicationService.kt$ApplicationService$throw RuntimeException("Incorrect type of JSON schema referenced by AP Application")</ID>
    <ID>TooGenericExceptionThrown:ApplicationService.kt$ApplicationService$throw RuntimeException("Incorrect type of JSON schema referenced by CAS2 Application")</ID>
    <ID>TooGenericExceptionThrown:ApplicationService.kt$ApplicationService$throw RuntimeException("Incorrect type of JSON schema referenced by TA Application")</ID>
    <ID>TooGenericExceptionThrown:ApplicationService.kt$ApplicationService$throw RuntimeException("Unable to get Offender Details when creating Application Submitted Domain Event: Not Found")</ID>
    <ID>TooGenericExceptionThrown:ApplicationService.kt$ApplicationService$throw RuntimeException("Unable to get Offender Details when creating Application Submitted Domain Event: Unauthorised")</ID>
    <ID>TooGenericExceptionThrown:ApplicationService.kt$ApplicationService$throw RuntimeException("Unable to get Risks when creating Application Submitted Domain Event: Not Found")</ID>
    <ID>TooGenericExceptionThrown:ApplicationService.kt$ApplicationService$throw RuntimeException("Unable to get Risks when creating Application Submitted Domain Event: Unauthorised")</ID>
    <ID>TooGenericExceptionThrown:ApplicationService.kt$ApplicationService$throw RuntimeException("Unknown gender: ${offenderDetails.gender}")</ID>
    <ID>TooGenericExceptionThrown:ApplicationTeamCodeEntityFactory.kt$ApplicationTeamCodeEntityFactory$throw RuntimeException("Must provide an Application")</ID>
    <ID>TooGenericExceptionThrown:ApplicationTest.kt$InboundMessageListener$throw RuntimeException("Never received SQS message from SNS topic after 30s")</ID>
    <ID>TooGenericExceptionThrown:ApplicationsController.kt$ApplicationsController$throw RuntimeException( "CAS2 now has its own " + "Cas2ApplicationsController", )</ID>
    <ID>TooGenericExceptionThrown:ApplicationsController.kt$ApplicationsController$throw RuntimeException("Unsupported Application type: ${application::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:ApplicationsController.kt$ApplicationsController$throw RuntimeException("Unsupported SubmitApplication type: ${submitApplication::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:ApplicationsController.kt$ApplicationsController$throw RuntimeException("Unsupported UpdateApplication type: ${body::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:ApplicationsTransformer.kt$ApplicationsTransformer$throw RuntimeException("Only CAS1 is currently supported")</ID>
    <ID>TooGenericExceptionThrown:ApplicationsTransformer.kt$ApplicationsTransformer$throw RuntimeException("Unrecognised application type when transforming: ${domain::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:ApplicationsTransformer.kt$ApplicationsTransformer$throw RuntimeException("Unrecognised application type when transforming: ${jpa::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesApplicationEntityFactory.kt$ApprovedPremisesApplicationEntityFactory$throw RuntimeException("Must provide a createdByUser")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesAssessmentEntityFactory.kt$ApprovedPremisesAssessmentEntityFactory$throw RuntimeException("Must provide an allocatedToUser")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesAssessmentEntityFactory.kt$ApprovedPremisesAssessmentEntityFactory$throw RuntimeException("Must provide an application")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingCancelSeedJob.kt$ApprovedPremisesBookingCancelSeedJob$throw RuntimeException("Booking ${row.id} is not an Approved Premises Booking")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingCancelSeedJob.kt$ApprovedPremisesBookingCancelSeedJob$throw RuntimeException("Conflict trying to create Cancellation: ${validationResult.message}")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingCancelSeedJob.kt$ApprovedPremisesBookingCancelSeedJob$throw RuntimeException("Field error trying to create Cancellation: ${validationResult.validationMessages}")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingCancelSeedJob.kt$ApprovedPremisesBookingCancelSeedJob$throw RuntimeException("General error trying to create Cancellation: ${validationResult.message}")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingCancelSeedJob.kt$ApprovedPremisesBookingCancelSeedJob$throw RuntimeException("No Booking with Id of ${row.id} exists")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("Bed with code ${row.bedCode} does not exist")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("Could not find Cancellation Reason with name '${row.cancellationReason}'")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("Could not find Departure Reason with name '${row.departureReason}'")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("Could not find Destination Provider with name '${row.departureDestinationProvider}'")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("Could not find Move on Category with name '${row.departureMoveOnCategory}'")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("Could not find Non Arrival Reason with name '${row.nonArrivalReason}'")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("If arrivalDate is provided, keyWorkerDeliusUsername must also be provided.")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("If cancellationDate is provided, cancellationReason must also be provided")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("If departureDateTime is provided, arrivalDate must also be provided.")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("If departureDateTime is provided, departureReason must also be provided")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("If departureDateTime is provided, destinationProvider must also be provided")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("If departureDateTime is provided, moveOnCategory must also be provided")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("If nonArrivalDate is provided, nonArrivalReason must also be provided")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesBookingSeedJob.kt$ApprovedPremisesBookingSeedJob$throw RuntimeException("Offender does not have a NOMS number")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesEntityFactory.kt$ApprovedPremisesEntityFactory$throw RuntimeException("Must provide a local authority area")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesEntityFactory.kt$ApprovedPremisesEntityFactory$throw RuntimeException("Must provide a probation region")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesRoomsSeedJob.kt$ApprovedPremisesRoomsSeedJob$throw RuntimeException( "Error: no premises with apCode '${row.apCode}' found. " + "Please seed premises before rooms/beds.", )</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesRoomsSeedJob.kt$ApprovedPremisesRoomsSeedJob$throw RuntimeException("'$value' is not a recognised boolean for '$fieldName' (use yes | no)")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesRoomsSeedJob.kt$ApprovedPremisesRoomsSeedJob$throw RuntimeException("Characteristic '${it.propertyName}' does not exist for AP room")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesSeedJob.kt$ApprovedPremisesSeedJob$throw RuntimeException("'$value' is not a recognised boolean for '$fieldName' (use yes | no)")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesSeedJob.kt$ApprovedPremisesSeedJob$throw RuntimeException("Characteristic '${it.propertyName}' does not exist for AP premises")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesSeedJob.kt$ApprovedPremisesSeedJob$throw RuntimeException("Local Authority Area ${row.localAuthorityArea} does not exist")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesSeedJob.kt$ApprovedPremisesSeedJob$throw RuntimeException("Premises ${row.apCode} is of type ${existingPremises::class.qualifiedName}, cannot be updated with Approved Premises Seed Job")</ID>
    <ID>TooGenericExceptionThrown:ApprovedPremisesSeedJob.kt$ApprovedPremisesSeedJob$throw RuntimeException("Probation Region ${row.probationRegion} does not exist")</ID>
    <ID>TooGenericExceptionThrown:ArrivalEntityFactory.kt$ArrivalEntityFactory$throw RuntimeException("Booking must be provided")</ID>
    <ID>TooGenericExceptionThrown:AssessmentClarificationNoteEntityFactory.kt$AssessmentClarificationNoteEntityFactory$throw RuntimeException("Must provide a createdBy")</ID>
    <ID>TooGenericExceptionThrown:AssessmentClarificationNoteEntityFactory.kt$AssessmentClarificationNoteEntityFactory$throw RuntimeException("Must provide an assessment")</ID>
    <ID>TooGenericExceptionThrown:AssessmentReferralHistoryNoteTransformer.kt$AssessmentReferralHistoryNoteTransformer$throw RuntimeException("Unsupported ReferralHistoryNote type: ${jpa::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:AssessmentReferralHistorySystemNoteEntityFactory.kt$AssessmentReferralHistorySystemNoteEntityFactory$throw RuntimeException("Must provide a createdBy")</ID>
    <ID>TooGenericExceptionThrown:AssessmentReferralHistorySystemNoteEntityFactory.kt$AssessmentReferralHistorySystemNoteEntityFactory$throw RuntimeException("Must provide an assessment")</ID>
    <ID>TooGenericExceptionThrown:AssessmentReferralHistoryUserNoteEntityFactory.kt$AssessmentReferralHistoryUserNoteEntityFactory$throw RuntimeException("Must provide a createdBy")</ID>
    <ID>TooGenericExceptionThrown:AssessmentReferralHistoryUserNoteEntityFactory.kt$AssessmentReferralHistoryUserNoteEntityFactory$throw RuntimeException("Must provide an assessment")</ID>
    <ID>TooGenericExceptionThrown:AssessmentService.kt$AssessmentService$throw RuntimeException("Assessment type '${assessment::class.qualifiedName}' is not currently supported")</ID>
    <ID>TooGenericExceptionThrown:AssessmentService.kt$AssessmentService$throw RuntimeException("Only CAS3 Assessments are currently supported")</ID>
    <ID>TooGenericExceptionThrown:AssessmentService.kt$AssessmentService$throw RuntimeException("Only CAS3 assessments are currently supported")</ID>
    <ID>TooGenericExceptionThrown:AssessmentService.kt$AssessmentService$throw RuntimeException("Only CAS3 is currently supported")</ID>
    <ID>TooGenericExceptionThrown:AssessmentService.kt$AssessmentService$throw RuntimeException("Reallocating an assessment of type '${currentAssessment::class.qualifiedName}' has not been implemented.")</ID>
    <ID>TooGenericExceptionThrown:AssessmentService.kt$AssessmentService$throw RuntimeException("Unable to get Offender Details when creating Application Assessed Domain Event: Not Found")</ID>
    <ID>TooGenericExceptionThrown:AssessmentService.kt$AssessmentService$throw RuntimeException("Unable to get Offender Details when creating Application Assessed Domain Event: Unauthorised")</ID>
    <ID>TooGenericExceptionThrown:AssessmentTest.kt$AssessmentTest$throw RuntimeException()</ID>
    <ID>TooGenericExceptionThrown:AssessmentTransformer.kt$AssessmentTransformer$throw RuntimeException("Unsupported Application type when transforming Assessment: ${jpa.application::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:AssessmentTransformer.kt$AssessmentTransformer$throw RuntimeException("Unsupported type: ${ase.type}")</ID>
    <ID>TooGenericExceptionThrown:AssessmentUtils.kt$throw RuntimeException("Cannot compare values of types ${a::class.qualifiedName} and ${b::class.qualifiedName} due to incomparable status types.")</ID>
    <ID>TooGenericExceptionThrown:AssessmentUtils.kt$throw RuntimeException("Unknown assessment summary type '${it::class.qualifiedName}'; could not narrow AssessmentStatus enum to its corresponding service-specific enum.")</ID>
    <ID>TooGenericExceptionThrown:BedSearchController.kt$BedSearchController$throw RuntimeException("Unsupported BedSearchParameters type: ${bedSearchParameters::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:BedSearchRepositoryTest.kt$BedSearchRepositoryTest$throw RuntimeException("Distance decreased in later search result - therefore results are ordered incorrectly")</ID>
    <ID>TooGenericExceptionThrown:BookingEntityFactory.kt$BookingEntityFactory$throw RuntimeException("Must provide a Premises")</ID>
    <ID>TooGenericExceptionThrown:BookingNotMadeEntityFactory.kt$BookingNotMadeEntityFactory$throw RuntimeException("Must provide a Placement Request")</ID>
    <ID>TooGenericExceptionThrown:BookingSearchResultTransformer.kt$BookingSearchResultTransformer$throw RuntimeException("Unknown booking status ${result.bookingStatus}")</ID>
    <ID>TooGenericExceptionThrown:BookingService.kt$BookingService$throw RuntimeException("Only CAS1 bookings are supported")</ID>
    <ID>TooGenericExceptionThrown:BookingService.kt$BookingService$throw RuntimeException("Only CAS3 bookings are supported")</ID>
    <ID>TooGenericExceptionThrown:BookingService.kt$BookingService$throw RuntimeException("Unable to get Offender Details when creating Booking Cancelled Domain Event: Not Found")</ID>
    <ID>TooGenericExceptionThrown:BookingService.kt$BookingService$throw RuntimeException("Unable to get Offender Details when creating Booking Cancelled Domain Event: Unauthorised")</ID>
    <ID>TooGenericExceptionThrown:BookingService.kt$BookingService$throw RuntimeException("Unable to get Offender Details when creating Booking Made Domain Event: Not Found")</ID>
    <ID>TooGenericExceptionThrown:BookingService.kt$BookingService$throw RuntimeException("Unable to get Offender Details when creating Booking Made Domain Event: Unauthorised")</ID>
    <ID>TooGenericExceptionThrown:BookingService.kt$BookingService$throw RuntimeException("Unknown premises type ${booking.premises::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:BookingTransformer.kt$BookingTransformer$throw RuntimeException("Could not determine service for Booking ${jpa.id}")</ID>
    <ID>TooGenericExceptionThrown:BookingTransformer.kt$BookingTransformer$throw RuntimeException("Could not determine status for Booking ${jpa.id}")</ID>
    <ID>TooGenericExceptionThrown:CAS3DomainEventFactory.kt$CAS3DomainEventFactory$throw RuntimeException("Must provide event data")</ID>
    <ID>TooGenericExceptionThrown:CAS3DomainEventFactory.kt$CAS3DomainEventFactory$throw RuntimeException("Unknown event details type ${dataClass.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:CacheClearTest.kt$CacheClearTest$throw RuntimeException("Upstream endpoint was never called by OffenderDetailsCacheRefreshWorker", throwable)</ID>
    <ID>TooGenericExceptionThrown:CancellationEntityFactory.kt$CancellationEntityFactory$throw RuntimeException("Booking must be provided")</ID>
    <ID>TooGenericExceptionThrown:CancellationEntityFactory.kt$CancellationEntityFactory$throw RuntimeException("Reason must be provided")</ID>
    <ID>TooGenericExceptionThrown:Cas2ApplicationEntityFactory.kt$Cas2ApplicationEntityFactory$throw RuntimeException("Must provide a createdByUser")</ID>
    <ID>TooGenericExceptionThrown:Cas2DomainEventFactory.kt$Cas2DomainEventFactory$throw RuntimeException("Must provide event data")</ID>
    <ID>TooGenericExceptionThrown:Cas2DomainEventFactory.kt$Cas2DomainEventFactory$throw RuntimeException("Unknown event details type ${dataClass.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:CharacteristicTransformer.kt$CharacteristicTransformer$throw RuntimeException("Unsupported service scope: ${jpa.modelScope}")</ID>
    <ID>TooGenericExceptionThrown:CharacteristicTransformer.kt$CharacteristicTransformer$throw RuntimeException("Unsupported service scope: ${jpa.serviceScope}")</ID>
    <ID>TooGenericExceptionThrown:CharacteristicsSeedJob.kt$CharacteristicsSeedJob$throw RuntimeException("The field: '$requiredField' is required")</ID>
    <ID>TooGenericExceptionThrown:CharacteristicsSeedJob.kt$CharacteristicsSeedJob$throw RuntimeException("Your '$requiredField' value: '$value' is not recognised")</ID>
    <ID>TooGenericExceptionThrown:ConfirmationEntityFactory.kt$ConfirmationEntityFactory$throw RuntimeException("Booking must be provided")</ID>
    <ID>TooGenericExceptionThrown:DateChangeEntityFactory.kt$DateChangeEntityFactory$throw RuntimeException("Must provide a booking")</ID>
    <ID>TooGenericExceptionThrown:DateChangeEntityFactory.kt$DateChangeEntityFactory$throw RuntimeException("Must provide a changedByUser")</ID>
    <ID>TooGenericExceptionThrown:DepartureEntityFactory.kt$DepartureEntityFactory$throw RuntimeException("Booking must be provided")</ID>
    <ID>TooGenericExceptionThrown:DepartureEntityFactory.kt$DepartureEntityFactory$throw RuntimeException("MoveOnCategory must be provided")</ID>
    <ID>TooGenericExceptionThrown:DepartureEntityFactory.kt$DepartureEntityFactory$throw RuntimeException("Reason must be provided")</ID>
    <ID>TooGenericExceptionThrown:DomainEventEntity.kt$DomainEventEntity$throw RuntimeException("Unsupported DomainEventData type ${T::class.qualifiedName}/${this.type.name}")</ID>
    <ID>TooGenericExceptionThrown:DomainEventService.kt$DomainEventService$throw RuntimeException("Unrecognised domain event type: ${type.name}")</ID>
    <ID>TooGenericExceptionThrown:DomainEventService.kt$DomainEventService$throw RuntimeException("Unrecognised domain event type: ${type.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:DomainEventService.kt$DomainEventService$throw RuntimeException("Unsupported DomainEventData type ${T::class.qualifiedName}/${domainEventEntity.type.name}")</ID>
    <ID>TooGenericExceptionThrown:ExtensionEntityFactory.kt$ExtensionEntityFactory$throw RuntimeException("Booking must be provided")</ID>
    <ID>TooGenericExceptionThrown:IntegrationTestBase.kt$WiremockPortHolder$throw RuntimeException("Could not lock any potential Wiremock ports")</ID>
    <ID>TooGenericExceptionThrown:LostBedCancellationEntityFactory.kt$LostBedCancellationEntityFactory$throw RuntimeException("Lost Bed must be provided")</ID>
    <ID>TooGenericExceptionThrown:LostBedsEntityFactory.kt$LostBedsEntityFactory$throw RuntimeException("Must provide a Bed")</ID>
    <ID>TooGenericExceptionThrown:LostBedsEntityFactory.kt$LostBedsEntityFactory$throw RuntimeException("Must provide a Premises")</ID>
    <ID>TooGenericExceptionThrown:LostBedsEntityFactory.kt$LostBedsEntityFactory$throw RuntimeException("Reason must be provided")</ID>
    <ID>TooGenericExceptionThrown:NonArrivalEntityFactory.kt$NonArrivalEntityFactory$throw RuntimeException("Booking must be provided")</ID>
    <ID>TooGenericExceptionThrown:NonArrivalEntityFactory.kt$NonArrivalEntityFactory$throw RuntimeException("Reason must be provided")</ID>
    <ID>TooGenericExceptionThrown:OAuth2ResourceServerSecurityConfiguration.kt$AuthAwareTokenConverter$throw RuntimeException("Unable to find a claim to identify Subject by")</ID>
    <ID>TooGenericExceptionThrown:OffenderService.kt$OffenderService$throw RuntimeException("No category provided for prison-case-notes.excluded-categories at index $index")</ID>
    <ID>TooGenericExceptionThrown:OffenderService.kt$OffenderService$throw RuntimeException("No prison-adjudications.adjudications-api-page-size configuration provided")</ID>
    <ID>TooGenericExceptionThrown:OffenderService.kt$OffenderService$throw RuntimeException("No prison-api-page-size configuration provided")</ID>
    <ID>TooGenericExceptionThrown:OffenderService.kt$OffenderService$throw RuntimeException("No prison-case-notes.excluded-categories provided")</ID>
    <ID>TooGenericExceptionThrown:OffenderService.kt$OffenderService$throw RuntimeException("No prison-case-notes.lookback-days configuration provided")</ID>
    <ID>TooGenericExceptionThrown:PersistedFactory.kt$PersistedFactory$throw RuntimeException("Unreachable")</ID>
    <ID>TooGenericExceptionThrown:PersonRisks.kt$PersonRisksConverter$throw RuntimeException("Unable to deserialize PersonRisks from JSON string", exception)</ID>
    <ID>TooGenericExceptionThrown:PersonRisks.kt$PersonRisksConverter$throw RuntimeException("Unable to serialize PersonRisks to JSON string for database", exception)</ID>
    <ID>TooGenericExceptionThrown:PlacementApplicationEntityFactory.kt$PlacementApplicationEntityFactory$throw RuntimeException("Must provide a createdByUser")</ID>
    <ID>TooGenericExceptionThrown:PlacementApplicationEntityFactory.kt$PlacementApplicationEntityFactory$throw RuntimeException("Must provide an application")</ID>
    <ID>TooGenericExceptionThrown:PlacementApplicationsController.kt$PlacementApplicationsController$throw RuntimeException("Only CAS1 Applications are currently supported")</ID>
    <ID>TooGenericExceptionThrown:PlacementDateEntityFactory.kt$PlacementDateEntityFactory$throw RuntimeException("Must provide a placementApplication")</ID>
    <ID>TooGenericExceptionThrown:PlacementRequestEntityFactory.kt$PlacementRequestEntityFactory$throw RuntimeException("Must provide Placement Requirements")</ID>
    <ID>TooGenericExceptionThrown:PlacementRequestEntityFactory.kt$PlacementRequestEntityFactory$throw RuntimeException("Must provide an Application")</ID>
    <ID>TooGenericExceptionThrown:PlacementRequestEntityFactory.kt$PlacementRequestEntityFactory$throw RuntimeException("Must provide an Assessment")</ID>
    <ID>TooGenericExceptionThrown:PlacementRequestService.kt$PlacementRequestService$throw RuntimeException("Unable to get Offender Details when creating Booking Not Made Domain Event: Not Found")</ID>
    <ID>TooGenericExceptionThrown:PlacementRequestService.kt$PlacementRequestService$throw RuntimeException("Unable to get Offender Details when creating Booking Not Made Domain Event: Unauthorised")</ID>
    <ID>TooGenericExceptionThrown:PlacementRequestTransformer.kt$PlacementRequestTransformer$throw RuntimeException("Unrecognised releaseType: $releaseType")</ID>
    <ID>TooGenericExceptionThrown:PlacementRequirementsEntityFactory.kt$PlacementRequirementsEntityFactory$throw RuntimeException("Must provide an Application")</ID>
    <ID>TooGenericExceptionThrown:PlacementRequirementsEntityFactory.kt$PlacementRequirementsEntityFactory$throw RuntimeException("Must provide an Assessment")</ID>
    <ID>TooGenericExceptionThrown:PlacementRequirementsService.kt$PlacementRequirementsService$throw RuntimeException("Only Approved Premises Assessments are currently supported for Placement Requests")</ID>
    <ID>TooGenericExceptionThrown:PremisesController.kt$PremisesController$throw RuntimeException("Booking ${it.id} has a Key Worker specified but Premises ${premises.id} is not an ApprovedPremises")</ID>
    <ID>TooGenericExceptionThrown:PremisesController.kt$PremisesController$throw RuntimeException("Booking has a Key Worker specified but Premises is not an ApprovedPremises")</ID>
    <ID>TooGenericExceptionThrown:PremisesController.kt$PremisesController$throw RuntimeException("CAS2 not supported")</ID>
    <ID>TooGenericExceptionThrown:PremisesController.kt$PremisesController$throw RuntimeException("Unsupported New Booking type: ${body::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:PremisesController.kt$PremisesController$throw RuntimeException("Unsupported NewArrival type: ${body::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:PremisesService.kt$PremisesService$throw RuntimeException("startDate must be before endDate when calculating availability for range")</ID>
    <ID>TooGenericExceptionThrown:PremisesTransformer.kt$PremisesTransformer$throw RuntimeException("Unsupported PremisesEntity type: ${jpa::class.qualifiedName}")</ID>
    <ID>TooGenericExceptionThrown:ProbationAreaProbationRegionMappingEntityFactory.kt$ProbationAreaProbationRegionMappingEntityFactory$throw RuntimeException("Must provide a Probation Region")</ID>
    <ID>TooGenericExceptionThrown:ProbationDeliveryUnitEntityFactory.kt$ProbationDeliveryUnitEntityFactory$throw RuntimeException("Must provide a Probation Region")</ID>
    <ID>TooGenericExceptionThrown:ProbationRegionEntityFactory.kt$ProbationRegionEntityFactory$throw RuntimeException("Must provide an ApArea")</ID>
    <ID>TooGenericExceptionThrown:ProblemResponsesTest.kt$DeserializationTestController$throw RuntimeException("I am an unhandled exception")</ID>
    <ID>TooGenericExceptionThrown:RedisConfiguration.kt$ClientResultRedisSerializer$throw RuntimeException("Preemptively cached requests should not be annotated with @Cacheable")</ID>
    <ID>TooGenericExceptionThrown:RedisConfiguration.kt$ClientResultRedisSerializer$throw RuntimeException("Unhandled discriminator type: ${deserializedWrapper.discriminator}")</ID>
    <ID>TooGenericExceptionThrown:ReferralsMetricsReportGenerator.kt$ReferralsMetricsReportGenerator$throw RuntimeException("Unknown Metric type - ${this::class.java}")</ID>
    <ID>TooGenericExceptionThrown:ReportGenerator.kt$ReportGenerator$throw RuntimeException("CAS2 not supported")</ID>
    <ID>TooGenericExceptionThrown:RoomEntityFactory.kt$RoomEntityFactory$throw RuntimeException("Must provide a premises")</ID>
    <ID>TooGenericExceptionThrown:RoshRatings.kt$RoshRatingsInner$throw RuntimeException("No RiskLevels found")</ID>
    <ID>TooGenericExceptionThrown:SeedJob.kt$SeedJob$throw RuntimeException("Filename must be just the filename of a .csv file in the /seed directory, e.g. for /seed/upload.csv, just `upload` should be supplied")</ID>
    <ID>TooGenericExceptionThrown:SeedJob.kt$SeedJob$throw RuntimeException("required headers: $missingHeaders")</ID>
    <ID>TooGenericExceptionThrown:SeedService.kt$SeedService$throw RuntimeException("The headers provided: $headerRow did not include ${exception.message}")</ID>
    <ID>TooGenericExceptionThrown:SeedService.kt$SeedService$throw RuntimeException("There was an issue opening the CSV file", exception)</ID>
    <ID>TooGenericExceptionThrown:SeedService.kt$SeedService$throw RuntimeException("There were issues deserializing the CSV:\n${errors.joinToString(", \n")}")</ID>
    <ID>TooGenericExceptionThrown:SeedService.kt$SeedService$throw RuntimeException("Unable to process CSV at row $rowNumber", exception)</ID>
    <ID>TooGenericExceptionThrown:TaskService.kt$TaskService$throw RuntimeException("Unexpected type")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationApplicationEntityFactory.kt$TemporaryAccommodationApplicationEntityFactory$throw RuntimeException("A probation region must be provided")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationApplicationEntityFactory.kt$TemporaryAccommodationApplicationEntityFactory$throw RuntimeException("Must provide a createdByUser")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationAssessmentEntityFactory.kt$TemporaryAccommodationAssessmentEntityFactory$throw RuntimeException("Must provide an application")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationBedspaceSeedJob.kt$TemporaryAccommodationBedspaceSeedJob$throw RuntimeException("Characteristic $it does not exist")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationBedspaceSeedJob.kt$TemporaryAccommodationBedspaceSeedJob$throw RuntimeException("Premises with reference '${row.premisesName}' does not exist")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationPremisesEntityFactory.kt$TemporaryAccommodationPremisesEntityFactory$throw RuntimeException("Must provide a local authority area")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationPremisesEntityFactory.kt$TemporaryAccommodationPremisesEntityFactory$throw RuntimeException("Must provide a probation region")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationPremisesSeedJob.kt$TemporaryAccommodationPremisesSeedJob$throw RuntimeException("Characteristic $it does not exist")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationPremisesSeedJob.kt$TemporaryAccommodationPremisesSeedJob$throw RuntimeException("Local Authority Area ${row.localAuthorityArea} does not exist")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationPremisesSeedJob.kt$TemporaryAccommodationPremisesSeedJob$throw RuntimeException("Model scope does not match for Characteristic $it")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationPremisesSeedJob.kt$TemporaryAccommodationPremisesSeedJob$throw RuntimeException("Probation Delivery Unit ${row.pdu} does not exist")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationPremisesSeedJob.kt$TemporaryAccommodationPremisesSeedJob$throw RuntimeException("Probation Region $canonicalRegionName does not exist")</ID>
    <ID>TooGenericExceptionThrown:TemporaryAccommodationPremisesSeedJob.kt$TemporaryAccommodationPremisesSeedJob$throw RuntimeException("Service scope does not match for Characteristic $it")</ID>
    <ID>TooGenericExceptionThrown:TurnaroundEntityFactory.kt$TurnaroundEntityFactory$throw RuntimeException("Must provide a Booking")</ID>
    <ID>TooGenericExceptionThrown:UserEntityFactory.kt$UserEntityFactory$throw RuntimeException("A probation region must be provided")</ID>
    <ID>TooGenericExceptionThrown:UserQualificationAssignmentEntityFactory.kt$UserQualificationAssignmentEntityFactory$throw RuntimeException("Must provide a User")</ID>
    <ID>TooGenericExceptionThrown:UserRoleAssignmentEntityFactory.kt$UserRoleAssignmentEntityFactory$throw RuntimeException("Must provide a User")</ID>
    <ID>TooGenericExceptionThrown:UsersSeedJob.kt$UsersSeedJob$throw RuntimeException("Could not get user ${row.deliusUsername}", exception)</ID>
    <ID>TooGenericExceptionThrown:UsersSeedJob.kt$UsersSeedJob$throw RuntimeException("Unrecognised User Qualifications(s): $unknownQualifications")</ID>
    <ID>TooGenericExceptionThrown:UsersSeedJob.kt$UsersSeedJob$throw RuntimeException("Unrecognised User Role(s): $unknownRoles")</ID>
    <ID>TooGenericExceptionThrown:ValidatableActionResult.kt$ValidatableActionResult$throw RuntimeException("Cannot translate Success")</ID>
    <ID>TooGenericExceptionThrown:WebClientCache.kt$WebClientCache$throw RuntimeException("Must provide a preemptiveCacheKey")</ID>
    <ID>TooManyFunctions:ApplicationEntity.kt$ApplicationRepository : JpaRepository</ID>
    <ID>TooManyFunctions:ApplicationEntityReportRow.kt$ApplicationEntityReportRow</ID>
    <ID>TooManyFunctions:AssessmentService.kt$AssessmentService</ID>
    <ID>TooManyFunctions:BookingEntity.kt$BookingRepository : JpaRepository</ID>
    <ID>TooManyFunctions:BookingService.kt$BookingService</ID>
    <ID>TooManyFunctions:DomainEventService.kt$DomainEventService</ID>
    <ID>TooManyFunctions:OffenderService.kt$OffenderService</ID>
    <ID>TooManyFunctions:PremisesController.kt$PremisesController : PremisesApiDelegate</ID>
    <ID>TooManyFunctions:PremisesService.kt$PremisesService</ID>
    <ID>TooManyFunctions:UserAccessService.kt$UserAccessService</ID>
    <ID>TooManyFunctions:UserService.kt$UserService</ID>
    <ID>TopLevelPropertyNaming:BedEntity.kt$const val bedSummaryQuery = """ select cast(b.id as text) as id, cast(b.name as text) as name, cast(r.name as text) as roomName, r.id as roomId, ( select count(booking.id) from bookings booking left join cancellations cancellation on booking.id = cancellation.booking_id left join non_arrivals non_arrival on non_arrival.booking_id = booking.id where booking.bed_id = b.id and booking.arrival_date &lt;= CURRENT_DATE and booking.departure_date >= CURRENT_DATE and cancellation IS NULL and non_arrival IS NULL ) > 0 as bedBooked, ( select count(lost_bed.id) from lost_beds lost_bed left join lost_bed_cancellations cancellation on lost_bed.id = cancellation.lost_bed_id where lost_bed.bed_id = b.id and lost_bed.start_date &lt;= CURRENT_DATE and lost_bed.end_date >= CURRENT_DATE and cancellation IS NULL ) > 0 as bedOutOfService from beds b join rooms r on b.room_id = r.id """</ID>
    <ID>UnusedParameter:APOASysContext.kt$response: NeedsDetails</ID>
    <ID>UnusedParameter:APOASysContext.kt$response: RisksToTheIndividual</ID>
    <ID>UnusedParameter:APOASysContext.kt$response: RoshSummary</ID>
    <ID>UnusedParameter:ApplicationService.kt$ApplicationService$jwt: String</ID>
    <ID>UnusedParameter:ApplicationService.kt$ApplicationService$username: String</ID>
    <ID>UnusedParameter:ApplicationService.kt$ApplicationService$username: String?</ID>
    <ID>UnusedParameter:ApplicationsController.kt$ApplicationsController$user: NomisUserEntity</ID>
    <ID>UnusedParameter:BookingService.kt$BookingService$keyWorkerStaffCode: String?</ID>
    <ID>UnusedParameter:BookingService.kt$BookingService$user: UserEntity</ID>
    <ID>UnusedParameter:BookingService.kt$BookingService$user: UserEntity? = null</ID>
    <ID>UnusedParameter:BookingServiceTest.kt$BookingServiceTest.CreateApprovedPremisesAdHocBooking$role: UserRole</ID>
    <ID>UnusedParameter:GivenAPlacementRequest.kt$assessmentAllocatedTo: UserEntity</ID>
    <ID>UnusedParameter:MigrationJobService.kt$MigrationJobService$pageSize: Int = 50</ID>
    <ID>UnusedParameter:OAuth2ResourceServerSecurityConfiguration.kt$JwksCacheConfig$applicationContext: ApplicationContext</ID>
    <ID>UnusedParameter:OffenderService.kt$OffenderService$jwt: String</ID>
    <ID>UnusedParameter:OffenderServiceTest.kt$OffenderServiceTest$jwt: String</ID>
    <ID>UnusedParameter:PremisesService.kt$PremisesService$latitude: Double?</ID>
    <ID>UnusedParameter:PremisesService.kt$PremisesService$longitude: Double?</ID>
    <ID>UnusedParameter:PremisesTest.kt$PremisesTest$expectedErrorType: String</ID>
    <ID>UnusedParameter:PremisesTest.kt$PremisesTest$turnaroundWorkingDayCount: Int</ID>
    <ID>UnusedParameter:PrisonsApiClient.kt$PrisonsApiClient$alertCode: String</ID>
    <ID>UnusedParameter:ProblemResponsesTest.kt$DeserializationTestController$@RequestBody body: AllSpecialJSONPrimitives</ID>
    <ID>UnusedParameter:ProblemResponsesTest.kt$DeserializationTestController$@RequestBody body: DeserializationTestBody</ID>
    <ID>UnusedParameter:ProblemResponsesTest.kt$DeserializationTestController$@RequestBody body: List&lt;DeserializationTestBody></ID>
    <ID>UnusedParameter:ProblemResponsesTest.kt$DeserializationTestController$@RequestParam(value = "requiredProperty", required = true) requiredProperty: Int</ID>
    <ID>UnusedParameter:RedisConfiguration.kt$RedisConfiguration$@Value("\${caches.staffMember.expiry-seconds}") staffMemberExpirySeconds: Long</ID>
    <ID>UnusedParameter:WebClientConfiguration.kt$WebClientConfiguration$authorizedClients: OAuth2AuthorizedClientRepository</ID>
    <ID>UnusedParameter:WebClientConfiguration.kt$WebClientConfiguration$clientRegistrations: ClientRegistrationRepository</ID>
    <ID>UnusedPrivateMember:ApplicationsController.kt$ApplicationsController$private fun getAssessmentTask(assessment: AssessmentEntity, user: UserEntity): AssessmentTask</ID>
    <ID>UnusedPrivateMember:ApplicationsController.kt$ApplicationsController$private fun getPersonDetail(crn: String, forceFullLaoCheck: Boolean = false): Pair&lt;OffenderDetailSummary, InmateDetail?></ID>
    <ID>UnusedPrivateMember:ApplicationsController.kt$ApplicationsController$private fun getPlacementApplicationTask(placementApplication: PlacementApplicationEntity, user: UserEntity): PlacementApplicationTask</ID>
    <ID>UnusedPrivateMember:ApplicationsController.kt$ApplicationsController$private fun getPlacementRequestTask(placementRequest: PlacementRequestEntity, user: UserEntity): PlacementRequestTask</ID>
    <ID>UnusedPrivateMember:BookingServiceTest.kt$BookingServiceTest.CreateApprovedPremisesAdHocBooking$@BeforeEach private fun setup()</ID>
    <ID>UnusedPrivateMember:OAuth2ResourceServerSecurityConfiguration.kt$AuthAwareTokenConverter$private fun extractAuthSource(claims: Map&lt;String, Any?>): String</ID>
    <ID>UnusedPrivateMember:UserService.kt$UserService$private fun updateUserFromCommunityApi(user: UserEntity): UserEntity</ID>
    <ID>UnusedPrivateProperty:ApplicationReportGenerator.kt$ApplicationReportGenerator$private val offenderService: OffenderService</ID>
    <ID>UnusedPrivateProperty:ApplicationService.kt$ApplicationService$val schema = application.schemaVersion as? ApprovedPremisesApplicationJsonSchemaEntity ?: throw RuntimeException("Incorrect type of JSON schema referenced by AP Application")</ID>
    <ID>UnusedPrivateProperty:ApplicationService.kt$ApplicationService$val schema = application.schemaVersion as? Cas2ApplicationJsonSchemaEntity ?: throw RuntimeException("Incorrect type of JSON schema referenced by CAS2 Application")</ID>
    <ID>UnusedPrivateProperty:ApplicationService.kt$ApplicationService$val schema = application.schemaVersion as? TemporaryAccommodationApplicationJsonSchemaEntity ?: throw RuntimeException("Incorrect type of JSON schema referenced by TA Application")</ID>
    <ID>UnusedPrivateProperty:ApplicationServiceTest.kt$ApplicationServiceTest.SubmitApplication$val _schema = application.schemaVersion as Cas2ApplicationJsonSchemaEntity</ID>
    <ID>UnusedPrivateProperty:ApplicationServiceTest.kt$ApplicationServiceTest.SubmitApplication$val num = 50</ID>
    <ID>UnusedPrivateProperty:ApplicationServiceTest.kt$ApplicationServiceTest.SubmitApplication$val text = "Hello world!"</ID>
    <ID>UnusedPrivateProperty:ApplicationServiceTest.kt$ApplicationServiceTest.UpdateApplication$val probationRegion = ProbationRegionEntityFactory() .withYieldedApArea { ApAreaEntityFactory().produce() } .produce()</ID>
    <ID>UnusedPrivateProperty:ApplicationSummaryQueryTest.kt$ApplicationSummaryQueryTest$val placementRequest = placementRequestFactory.produceAndPersist { withApplication(submittedApplication) withAssessment(assessmentForSubmittedApplication) withAllocatedToUser(user) withBooking(booking) withPlacementRequirements(placementRequirements) }</ID>
    <ID>UnusedPrivateProperty:ApplicationSummaryQueryTest.kt$ApplicationSummaryQueryTest$val unansweredClarificationNote = assessmentClarificationNoteEntityFactory.produceAndPersist { withAssessment(assessmentForSubmittedApplication) withCreatedBy(user) withResponse(null) }</ID>
    <ID>UnusedPrivateProperty:ApplicationTimelinessEntityFactory.kt$ApplicationTimelinessEntityFactory$private var overallTimelinessInWorkingDays: Yielded&lt;Int?> = { randomInt(0, 10) }</ID>
    <ID>UnusedPrivateProperty:ApplicationTimelinessTest.kt$ApplicationTimelinessTest$val unSubmittedApplication = approvedPremisesApplicationEntityFactory.produceAndPersist { withCreatedByUser(user) withApplicationSchema(applicationSchema) withSubmittedAt(null) withRiskRatings(risks) }</ID>
    <ID>UnusedPrivateProperty:ApplicationsTransformerTest.kt$ApplicationsTransformerTest$private val unSubmittedApprovedPremisesApplicationFactory = approvedPremisesApplicationFactory .withSubmittedAt(null)</ID>
    <ID>UnusedPrivateProperty:ApprovedPremisesOfflineApplicationsSeedJob.kt$ApprovedPremisesOfflineApplicationsSeedJob$private val log = LoggerFactory.getLogger(this::class.java)</ID>
    <ID>UnusedPrivateProperty:AssessmentController.kt$AssessmentController$private val log = LoggerFactory.getLogger(this::class.java)</ID>
    <ID>UnusedPrivateProperty:CancellationQueryTest.kt$CancellationQueryTest$val otherCancellations = listOf( cancellationEntityFactory.produceAndPersist { withBooking( bookingEntityFactory.produceAndPersist { withPremises(premises) }, ) withReason(cancellationReasonEntityFactory.produceAndPersist()) }, cancellationEntityFactory.produceAndPersist { withBooking( bookingEntityFactory.produceAndPersist { withPremises(premises) }, ) withReason(cancellationReasonEntityFactory.produceAndPersist()) }, )</ID>
    <ID>UnusedPrivateProperty:CharacteristicQueryTest.kt$CharacteristicQueryTest$var otherCharacteristics = mutableListOf( characteristicEntityFactory.produceAndPersist(), characteristicEntityFactory.produceAndPersist(), )</ID>
    <ID>UnusedPrivateProperty:ClientResultRedisSerializerTest.kt$ClientResultRedisSerializerTest$val cachedString = String(cachedByteArray)</ID>
    <ID>UnusedPrivateProperty:DailyMetricsReportTest.kt$DailyMetricsReportTest$val endDate = startDate.with(TemporalAdjusters.lastDayOfMonth())</ID>
    <ID>UnusedPrivateProperty:ExternalUserService.kt$ExternalUserService$private val log = LoggerFactory.getLogger(this::class.java)</ID>
    <ID>UnusedPrivateProperty:IntegrationTestBase.kt$IntegrationTestBase$@Autowired private lateinit var jdbcTemplate: JdbcTemplate</ID>
    <ID>UnusedPrivateProperty:JsonSchemaService.kt$JsonSchemaService$private val applicationRepository: ApplicationRepository</ID>
    <ID>UnusedPrivateProperty:JsonSchemaService.kt$JsonSchemaService$private val applicationRepository: Cas2ApplicationRepository</ID>
    <ID>UnusedPrivateProperty:LostBedsTest.kt$LostBedsTest$val booking = bookingEntityFactory.produceAndPersist { withPremises(premises) withOriginalArrivalDate(LocalDate.now().minusDays(4)) withArrivalDate(LocalDate.now().minusDays(4)) withOriginalDepartureDate(LocalDate.now().plusDays(6)) withDepartureDate(LocalDate.now().plusDays(6)) }</ID>
    <ID>UnusedPrivateProperty:NomisUserService.kt$NomisUserService$private val log = LoggerFactory.getLogger(this::class.java)</ID>
    <ID>UnusedPrivateProperty:OffenderServiceTest.kt$OffenderServiceTest$private val objectMapper = ObjectMapper().apply { registerModule(Jdk8Module()) registerModule(JavaTimeModule()) registerKotlinModule() }</ID>
    <ID>UnusedPrivateProperty:PeopleController.kt$PeopleController$private val log = LoggerFactory.getLogger(this::class.java)</ID>
    <ID>UnusedPrivateProperty:PeopleController.kt$PeopleController$val user = userService.getUserForRequest()</ID>
    <ID>UnusedPrivateProperty:PlacementApplicationServiceTest.kt$PlacementApplicationServiceTest.ReallocateApplicationTest$private val previousUser = UserEntityFactory() .withYieldedProbationRegion { ProbationRegionEntityFactory() .withYieldedApArea { ApAreaEntityFactory().produce() } .produce() } .produce()</ID>
    <ID>UnusedPrivateProperty:PlacementRequestsController.kt$PlacementRequestsController$private val log = LoggerFactory.getLogger(this::class.java)</ID>
    <ID>UnusedPrivateProperty:PlacementRequestsTest.kt$PlacementRequestsTest.AllPlacementRequests$val postcodeDistrict = postCodeDistrictRepository.findAll()[0&#x5d;</ID>
    <ID>UnusedPrivateProperty:PlacementRequirementsEntityFactory.kt$PlacementRequirementsEntityFactory$private var duration: Yielded&lt;Int> = { 12 }</ID>
    <ID>UnusedPrivateProperty:PlacementRequirementsEntityFactory.kt$PlacementRequirementsEntityFactory$private var expectedArrival: Yielded&lt;LocalDate> = { LocalDate.now() }</ID>
    <ID>UnusedPrivateProperty:PremisesController.kt$PremisesController$private val log = LoggerFactory.getLogger(this::class.java)</ID>
    <ID>UnusedPrivateProperty:ReferralsMetricsReportGeneratorTest.kt$ReferralsMetricsReportGeneratorTest$private val newestJsonSchema = ApprovedPremisesApplicationJsonSchemaEntityFactory() .withSchema("{}") .produce()</ID>
    <ID>UnusedPrivateProperty:ReferralsMetricsReportGeneratorTest.kt$ReferralsMetricsReportGeneratorTest$private val user = UserEntityFactory() .withYieldedProbationRegion { ProbationRegionEntityFactory() .withYieldedApArea { ApAreaEntityFactory().produce() } .produce() } .produce()</ID>
    <ID>UnusedPrivateProperty:SeedApprovedPremisesTest.kt$SeedApprovedPremisesTest$val characteristic = characteristicEntityFactory.produceAndPersist { withId(UUID.fromString("8e04628f-2cdd-4d9a-8ae7-27689d7daa73")) withPropertyName("isCatered") withServiceScope("approved-premises") withModelScope("room") }</ID>
    <ID>UnusedPrivateProperty:TaskTransformerTest.kt$TaskTransformerTest$private val mockInmateDetail = mockk&lt;InmateDetail>()</ID>
    <ID>UnusedPrivateProperty:TaskTransformerTest.kt$TaskTransformerTest$private val mockOffenderDetailSummary = mockk&lt;OffenderDetailSummary>()</ID>
    <ID>UnusedPrivateProperty:TaskTransformerTest.kt$TaskTransformerTest$private val mockPersonTransformer = mockk&lt;PersonTransformer>()</ID>
    <ID>UnusedPrivateProperty:TasksController.kt$TasksController$private val log = LoggerFactory.getLogger(this::class.java)</ID>
    <ID>UnusedPrivateProperty:UserAccessService.kt$UserAccessService$private val communityApiClient: CommunityApiClient</ID>
    <ID>UnusedPrivateProperty:UserService.kt$UserService$private val userTransformer: UserTransformer</ID>
    <ID>UnusedPrivateProperty:WorkingDayCountService.kt$WorkingDayCountService$i</ID>
    <ID>VariableNaming:ApplicationServiceTest.kt$ApplicationServiceTest.SubmitApplication$val _schema = application.schemaVersion as Cas2ApplicationJsonSchemaEntity</ID>
  </CurrentIssues>
</SmellBaseline>

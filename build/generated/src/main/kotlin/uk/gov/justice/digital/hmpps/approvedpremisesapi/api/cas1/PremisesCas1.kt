/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package uk.gov.justice.digital.hmpps.approvedpremisesapi.api.cas1

import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1ApprovedPremisesGender
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1PremiseCapacity
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1PremiseDaySummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1PremisesBasicSummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1PremisesSummary
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1SpaceBookingCharacteristic
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Cas1SpaceBookingDaySummarySortField
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.Problem
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.SortDirection
import uk.gov.justice.digital.hmpps.approvedpremisesapi.api.model.ValidationError
import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired


import kotlin.collections.List
import kotlin.collections.Map

interface PremisesCas1 {

    fun getDelegate(): PremisesCas1Delegate = object: PremisesCas1Delegate {}

    @Operation(
        tags = ["premises",],
        summary = "Provides capacity information for a given date range",
        operationId = "getCapacity",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1PremiseCapacity::class))]),
            ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))]),
            ApiResponse(responseCode = "401", description = "not authenticated", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "403", description = "unauthorised", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "404", description = "invalid premises ID or booking ID", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/{premisesId}/capacity"],
            produces = ["application/json", "application/problem+json"]
    )
    fun getCapacity(@Parameter(description = "ID of the premises", required = true) @PathVariable("premisesId") premisesId: java.util.UUID,@Parameter(description = "Start date, inclusive", required = true) @RequestParam(value = "startDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) startDate: java.time.LocalDate,@Parameter(description = "End date, inclusive", required = true) @RequestParam(value = "endDate", required = true) @org.springframework.format.annotation.DateTimeFormat(iso = org.springframework.format.annotation.DateTimeFormat.ISO.DATE) endDate: java.time.LocalDate): ResponseEntity<Cas1PremiseCapacity> {
        return getDelegate().getCapacity(premisesId, startDate, endDate)
    }

    @Operation(
        tags = ["premises",],
        summary = "Provides a summary of capacity, space bookings and out of service beds for a premise on a given day",
        operationId = "getDaySummary",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1PremiseDaySummary::class))]),
            ApiResponse(responseCode = "401", description = "not authenticated", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "403", description = "unauthorised", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/{premisesId}/day-summary/{date}"],
            produces = ["application/json"]
    )
    fun getDaySummary(@Parameter(description = "ID of the premises", required = true) @PathVariable("premisesId") premisesId: java.util.UUID,@Parameter(description = "date the summary is required for", required = true) @PathVariable("date") date: java.time.LocalDate,@Parameter(description = "If provided, will only show bookings with matching criteria") @RequestParam(value = "bookingsCriteriaFilter", required = false) bookingsCriteriaFilter: kotlin.collections.List<Cas1SpaceBookingCharacteristic>?,@Parameter(description = "The direction to sort the bookings by. If not defined, will sort in descending order", schema = Schema(allowableValues = ["asc", "desc"])) @RequestParam(value = "bookingsSortDirection", required = false) bookingsSortDirection: SortDirection?,@Parameter(description = "The field to sort the booking by. If not defined, will sort on person name", schema = Schema(allowableValues = ["personName", "tier", "canonicalArrivalDate", "canonicalDepartureDate", "releaseType", "spaceType"])) @RequestParam(value = "bookingsSortBy", required = false) bookingsSortBy: Cas1SpaceBookingDaySummarySortField?): ResponseEntity<Cas1PremiseDaySummary> {
        return getDelegate().getDaySummary(premisesId, date, bookingsCriteriaFilter, bookingsSortDirection, bookingsSortBy)
    }

    @Operation(
        tags = ["premises",],
        summary = "Returns premises information",
        operationId = "getPremisesById",
        description = """""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(schema = Schema(implementation = Cas1PremisesSummary::class))]),
            ApiResponse(responseCode = "401", description = "not authenticated", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "403", description = "unauthorised", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "404", description = "invalid premises ID", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/{premisesId}"],
            produces = ["application/json"]
    )
    fun getPremisesById(@Parameter(description = "", required = true) @PathVariable("premisesId") premisesId: java.util.UUID): ResponseEntity<Cas1PremisesSummary> {
        return getDelegate().getPremisesById(premisesId)
    }

    @Operation(
        tags = ["premises",],
        summary = "",
        operationId = "getPremisesSummaries",
        description = """Provide a summary of all premises, with optional filtering""",
        responses = [
            ApiResponse(responseCode = "200", description = "successful operation", content = [Content(array = ArraySchema(schema = Schema(implementation = Cas1PremisesBasicSummary::class)))]),
            ApiResponse(responseCode = "400", description = "invalid params", content = [Content(schema = Schema(implementation = ValidationError::class))]),
            ApiResponse(responseCode = "401", description = "not authenticated", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "403", description = "unauthorised", content = [Content(schema = Schema(implementation = Problem::class))]),
            ApiResponse(responseCode = "500", description = "unexpected error", content = [Content(schema = Schema(implementation = Problem::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/premises/summary"],
            produces = ["application/json", "application/problem+json"]
    )
    fun getPremisesSummaries(@Parameter(description = "If specified, only return premises for the corresponding gender", schema = Schema(allowableValues = ["man", "woman"])) @RequestParam(value = "gender", required = false) gender: Cas1ApprovedPremisesGender?,@Parameter(description = "ID of the AP area to filter by") @RequestParam(value = "apAreaId", required = false) apAreaId: java.util.UUID?): ResponseEntity<List<Cas1PremisesBasicSummary>> {
        return getDelegate().getPremisesSummaries(gender, apAreaId)
    }
}

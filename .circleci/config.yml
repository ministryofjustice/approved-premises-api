version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@7.3.1
  mem: circleci/rememborb@0.0.2

parameters:
  alerts-slack-channel:
    type: string
    default: approved-premises-team-events
  releases-slack-channel:
    type: string
    default: approved-premises-team-events
  run-security-workflow-on-branch:
    type: boolean
    default: false

executors:
  test-gradle:
    resource_class: medium+
    docker:
      - image: cimg/openjdk:17.0
      - image: "postgis/postgis"
        environment:
          - POSTGRES_USER=integration_test
          - POSTGRES_PASSWORD=integration_test_password
          - POSTGRES_DB=approved_premises_integration_test
      - image: "bitnami/redis:7.0.11"
        environment:
          - ALLOW_EMPTY_PASSWORD=yes
      - image: localstack/localstack:1.3.1
        environment:
          - SERVICES=sns,sqs
          - DEBUG=${DEBUG- }
          - DOCKER_HOST=unix:///var/run/docker.sock
          - DEFAULT_REGION=eu-west-2
          - ES_PORT_EXTERNAL=4571
          - DATA_DIR=/tmp/localstack/data

jobs:
  trigger-ui-tests:
    docker: 
      - image: cimg/base:stable
    resource_class: small
    steps:
      - run:
          name: "Approved Premises UI test"
          command: | 
              curl --request POST \
                --url https://circleci.com/api/v2/project/github/ministryofjustice/hmpps-approved-premises-ui/pipeline \
                --header "Circle-Token: $CIRCLECI_PIPELINE_TOKEN" \
                --header "content-type: application/json" \
                --data '{"branch":"main"}'
      - run:
          name: "Temporary Accommodation UI test"
          command: | 
              curl --request POST \
                --url https://circleci.com/api/v2/project/github/ministryofjustice/hmpps-temporary-accommodation-ui/pipeline \
                --header "Circle-Token: $CIRCLECI_PIPELINE_TOKEN" \
                --header "content-type: application/json" \
                --data '{"branch":"main"}'
  generate_trivyignore:
    # Needed to get Trivy to respect the .trivyignore file, as it doesn't use the one that's inside the Docker image.
    docker:
      - image: cimg/openjdk:17.0
    resource_class: small
    steps:
      - checkout
      - run:
          name: "Initialise Gradle"
          # Any Gradle command will cause .trivyignore to be generated.
          command: |
            ./gradlew init
      - persist_to_workspace:
          root: .
          paths:
            - .trivyignore
  build_multiplatform_docker_without_publish:
    # Hybrid of the hmpps/build_docker and hmpps/build_multiplatform_docker jobs.
    # Needed for the 'security_branch' workflow as:
    # - the hmpps/build_multiplatform_docker job does not allow for building Docker images without also
    #   publishing to quay.io, which would both clutter the repo with ephemeral builds and set the 'latest' tag to an
    #   image built from a non-main branch.
    # - the hmpps/build_docker job does allow for building Docker images and persisting them locally, but uses the
    #   legacy build system instead of buildx, which would necessitate changes to the Dockerfile, and possibly break
    #   local builds.
    docker:
      - image: cimg/base:stable
    resource_class: small
    parameters:
      image_name:
        type: string
        default: "quay.io/hmpps/${CIRCLE_PROJECT_REPONAME}"
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - hmpps/create_app_version
      - run:
          name: Create IMAGE_NAME env var
          command: |
            IMAGE_NAME="<< parameters.image_name >>"
            echo "export IMAGE_NAME=$IMAGE_NAME" >> $BASH_ENV
      - mem/remember:
          env_var: IMAGE_NAME
          value: "${IMAGE_NAME}"
      - run:
          name: Setup buildx
          command: |
            docker context create multi-arch-build
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker run --rm --privileged tonistiigi/binfmt --install all
            docker buildx create --use multi-arch-build --platform linux/arm64,linux/amd64
      - run:
          name: Build container image
          command: |
            docker buildx build \
              --platform linux/amd64 --pull \
              --progress plain \
              --rm=false . \
              --build-arg BUILD_NUMBER=$APP_VERSION \
              --build-arg GIT_REF=$CIRCLE_SHA1 \
              --tag "${IMAGE_NAME}:${APP_VERSION}" \
              --label "maintainer=dps-hmpps@digital.justice.gov.uk" \
              --label "app.version=${APP_VERSION}" \
              --label "build.version=${APP_VERSION}" \
              --label "build.number=${CIRCLE_BUILD_NUM}" \
              --label "build.url=${CIRCLE_BUILD_URL}" \
              --label "build.gitref=${CIRCLE_SHA1}" \
              --output=type=docker
      - run:
          name: Persist container image to workspace
          command: |
            mkdir -p docker_cache
            docker save ${IMAGE_NAME}:${APP_VERSION} -o docker_cache/build_image.tar
      - persist_to_workspace:
          root: .
          paths:
            - docker_cache
  build:
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-{{ checksum "build.gradle.kts" }}
            - gradle-
      - run:
          name: Install dependencies
          command: ./gradlew build -x test --build-cache
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - persist_to_workspace:
          root: .
          paths:
            - build
  test:
    parallelism: 4
    environment:
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
      POSTGRES_PORT: 5432
      SPRING_REDIS_PORT: 6379
    executor:
      name: test-gradle
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run tests in parallel
          # Use "./gradlew test" instead if tests are not run in parallel
          command: |
            cd src/test/kotlin
            # Get list of classnames of tests that should run on this node
            CLASSNAMES=$(circleci tests glob "**/*Test.kt" \
              | cut -c 1- | sed 's@/@.@g' \
              | sed 's/.\{3\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            cd ../../..
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            ./gradlew test --build-cache -x openApiGenerateDomainEvents -x openApiGenerate -x compileKotlin -x compileTestKotlin $GRADLE_ARGS
      - save_cache:
          paths:
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle.kts" }}
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: build/reports/tests

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - build
      - test:
          filters:
            tags:
              ignore: /.*/
          requires:
            - build
      - hmpps/helm_lint:
          name: helm_lint
      - hmpps/build_multiplatform_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: "dev"
          context: hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - build_docker
            - helm_lint
      - request-test-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_test
          env: "test"
          context:
            - hmpps-common-vars
            - hmpps-approved-premises-api-stage
          requires:
            - request-test-approval
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev
      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          context:
            - hmpps-common-vars
            - hmpps-approved-premises-api-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod
      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          slack_notification: true
          slack_channel_name: << pipeline.parameters.releases-slack-channel >>
          context:
            - hmpps-common-vars
            - hmpps-approved-premises-api-prod
          requires:
            - request-prod-approval
      - trigger-ui-tests:
          requires:
            - deploy_dev

  security:
    triggers:
      - schedule:
          cron: "11 5 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - generate_trivyignore:
          name: generate_trivyignore
      - hmpps/gradle_owasp_dependency_check:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/trivy_latest_scan:
          pre-steps:
            - attach_workspace:
                at: ~/trivyetc
          additional_args: --ignorefile ~/trivyetc/.trivyignore
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
          requires:
            - generate_trivyignore
      - hmpps/veracode_pipeline_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
  security-branch:
    # Mimics the 'security' workflow, but can be manually triggered on any branch.
    when: << pipeline.parameters.run-security-workflow-on-branch >>
    jobs:
      - generate_trivyignore:
          name: generate_trivyignore
      - build_multiplatform_docker_without_publish:
          name: build_docker
          image_name: hmpps-approved-premises-api
      - hmpps/gradle_owasp_dependency_check:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - hmpps-common-vars
      - hmpps/trivy_pipeline_scan:
          context:
            - hmpps-common-vars
          requires:
            - build_docker
            - generate_trivyignore
  security-weekly:
    triggers:
      - schedule:
          cron: "0 5 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          slack_channel: << pipeline.parameters.alerts-slack-channel >>
          context:
            - veracode-credentials
            - hmpps-common-vars
